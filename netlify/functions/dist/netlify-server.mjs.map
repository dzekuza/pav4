{"version":3,"file":"netlify-server.mjs","sources":["../../../server/netlify-server.ts"],"sourcesContent":["import dotenv from \"dotenv\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport helmet from \"helmet\";\nimport compression from \"compression\";\nimport path from \"path\";\n\n// Load environment variables\ndotenv.config();\n\n// Import database service\nimport { PrismaClient } from \"@prisma/client\";\n\n// Create a single Prisma Client instance\nconst createPrismaClient = () => {\n    console.log('Creating Prisma client with DATABASE_URL:', process.env.DATABASE_URL ? 'SET' : 'NOT SET');\n    return new PrismaClient({\n        log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n        datasources: {\n            db: {\n                url: process.env.DATABASE_URL\n            }\n        }\n    });\n};\n\nexport const prisma = globalThis.__prisma || createPrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n    globalThis.__prisma = prisma;\n}\n\n// Test database connection\nasync function testDatabaseConnection() {\n    try {\n        await prisma.$connect();\n        console.log('Database connection successful');\n        return true;\n    } catch (error) {\n        console.error('Database connection failed:', error);\n        return false;\n    }\n}\n\n// Simple server creation function for Netlify Functions\nexport async function createServer() {\n    // Test database connection on startup\n    console.log('Testing database connection...');\n    const dbConnected = await testDatabaseConnection();\n    if (!dbConnected) {\n        console.error('Failed to connect to database on startup');\n    } else {\n        console.log('Database connection successful on startup');\n    }\n\n    const app = express();\n\n    // Trust Netlify/Heroku/Cloud proxy for correct req.ip and rate limiting\n    app.set('trust proxy', 1);\n\n    // Security middleware\n    app.use(helmet({\n        contentSecurityPolicy: {\n            directives: {\n                defaultSrc: [\"'self'\"],\n                scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"blob:\"],\n                styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\", \"https://rsms.me\"],\n                imgSrc: [\"'self'\", \"data:\", \"https:\"],\n                connectSrc: [\n                    \"'self'\",\n                    \"https://api.searchapi.io\",\n                    \"https://n8n.srv824584.hstgr.cloud\",\n                    \"https://pavlo4.netlify.app\",\n                ],\n            },\n        },\n    }));\n\n    // CORS configuration\n    app.use(cors({\n        origin: process.env.FRONTEND_URL || \"http://localhost:5173\",\n        credentials: true,\n    }));\n\n    // Body parsing middleware\n    app.use(express.json({ limit: '10mb' }));\n    app.use(express.urlencoded({ extended: true, limit: '10mb' }));\n    app.use(cookieParser());\n\n    // Compression middleware\n    app.use(compression());\n\n    // Basic health check\n    app.get(\"/api/health\", (req, res) => {\n        res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n    });\n\n    // Track event endpoint\n    app.post(\"/api/track-event\", async (req, res) => {\n        try {\n            const {\n                event_type,\n                business_id,\n                affiliate_id,\n                platform,\n                session_id,\n                user_agent,\n                referrer,\n                timestamp,\n                url,\n                data\n            } = req.body;\n\n            console.log('Track event request:', { event_type, business_id, affiliate_id, platform });\n\n            // Validate required fields\n            if (!event_type || !business_id || !affiliate_id) {\n                console.log('Missing required fields:', { event_type, business_id, affiliate_id });\n                return res.status(400).json({\n                    success: false,\n                    error: \"Missing required fields: event_type, business_id, affiliate_id\"\n                });\n            }\n\n            // For now, just log the event without database operations\n            console.log('Event received:', {\n                event_type,\n                business_id,\n                affiliate_id,\n                platform,\n                session_id,\n                user_agent,\n                referrer,\n                timestamp,\n                url,\n                data\n            });\n\n            // Return success response\n            res.json({\n                success: true,\n                message: \"Event tracked successfully (logged only)\",\n                event_id: Date.now(),\n                note: \"Database operations temporarily disabled for testing\"\n            });\n\n        } catch (error) {\n            console.error(\"Error tracking event:\", error);\n            res.status(500).json({\n                success: false,\n                error: \"Failed to track event\",\n                details: error instanceof Error ? error.message : String(error)\n            });\n        }\n    });\n\n    return app;\n} "],"names":[],"mappings":"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"}