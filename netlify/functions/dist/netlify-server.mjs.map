{"version":3,"file":"netlify-server.mjs","sources":["../../../server/netlify-server.ts"],"sourcesContent":["import dotenv from \"dotenv\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport helmet from \"helmet\";\nimport compression from \"compression\";\nimport path from \"path\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\n\n// Load environment variables\ndotenv.config();\n\n// Import database service\nimport { PrismaClient } from \"@prisma/client\";\n\n// Create a single Prisma Client instance\nconst createPrismaClient = () => {\n    // Use only Netlify database URL\n    const databaseUrl = process.env.NETLIFY_DATABASE_URL;\n    \n    console.log('Creating Prisma client with database URL:', databaseUrl ? 'SET' : 'NOT SET');\n    console.log('Using Netlify database:', !!process.env.NETLIFY_DATABASE_URL);\n\n    if (!databaseUrl) {\n        console.error('No NETLIFY_DATABASE_URL found');\n        return null;\n    }\n\n    return new PrismaClient({\n        log: ['error'],\n        datasources: {\n            db: {\n                url: databaseUrl\n            }\n        }\n    });\n};\n\nexport const prisma = globalThis.__prisma || createPrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n    globalThis.__prisma = prisma;\n}\n\n// Test database connection with retry logic\nasync function testDatabaseConnection() {\n    try {\n        if (!prisma) {\n            console.error('Prisma client not initialized - DATABASE_URL missing');\n            return false;\n        }\n        \n        console.log('Testing database connection...');\n        await prisma.$connect();\n        console.log('Database connection successful');\n        \n        return true;\n    } catch (error) {\n        console.error('Database connection failed:', error);\n        return false;\n    }\n}\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Helper function to generate JWT token for business\nfunction generateBusinessToken(businessId: number, email: string) {\n    return jwt.sign(\n        { businessId, email, type: \"business\" },\n        JWT_SECRET,\n        { expiresIn: \"7d\" }\n    );\n}\n\n// Helper function to verify business token\nfunction verifyBusinessToken(token: string) {\n    try {\n        return jwt.verify(token, JWT_SECRET) as any;\n    } catch (error) {\n        return null;\n    }\n}\n\n// Business service functions\nconst businessService = {\n    async findBusinessByEmail(email: string) {\n        return prisma.business.findUnique({\n            where: { email },\n        });\n    },\n\n    async findBusinessById(id: number) {\n        return prisma.business.findUnique({\n            where: { id },\n        });\n    },\n\n    async createBusiness(data: any) {\n        return prisma.business.create({\n            data,\n        });\n    },\n\n    async getBusinessStatistics(businessId: number) {\n        try {\n            console.log('Getting business statistics for businessId:', businessId);\n            \n            // Test database connection first\n            const dbConnected = await testDatabaseConnection();\n            if (!dbConnected) {\n                console.log('Database connection failed, cannot get business statistics');\n                return null;\n            }\n            \n            // Get business details\n            const business = await prisma.business.findUnique({\n                where: { id: businessId },\n                select: {\n                    id: true,\n                    name: true,\n                    domain: true,\n                    totalVisits: true,\n                    totalPurchases: true,\n                    totalRevenue: true,\n                    commission: true,\n                    adminCommissionRate: true,\n                    affiliateId: true,\n                    trackingVerified: true,\n                },\n            });\n\n            console.log('Business found:', business);\n\n            if (!business) {\n                console.log('Business not found for ID:', businessId);\n                return null;\n            }\n\n            // Get recent clicks and conversions\n            const [clicks, conversions] = await Promise.all([\n                prisma.businessClick.findMany({\n                    where: { businessId },\n                    orderBy: { timestamp: \"desc\" },\n                    take: 10,\n                }),\n                prisma.businessConversion.findMany({\n                    where: { businessId },\n                    orderBy: { timestamp: \"desc\" },\n                    take: 10,\n                }),\n            ]);\n\n            console.log('Recent clicks count:', clicks.length);\n            console.log('Recent conversions count:', conversions.length);\n\n            // Calculate derived fields\n            const averageOrderValue = business.totalPurchases > 0 ? business.totalRevenue / business.totalPurchases : 0;\n            const conversionRate = business.totalVisits > 0 ? (business.totalPurchases / business.totalVisits) * 100 : 0;\n            const projectedFee = business.totalRevenue * (business.adminCommissionRate / 100);\n\n            const result = {\n                ...business,\n                averageOrderValue,\n                conversionRate,\n                projectedFee,\n                recentClicks: clicks,\n                recentConversions: conversions,\n            };\n\n            console.log('Returning business statistics:', result);\n            return result;\n        } catch (error) {\n            console.error(\"Error getting business statistics:\", error);\n            return null;\n        }\n    },\n};\n\n// Simple server creation function for Netlify Functions\nexport async function createServer() {\n    // Test database connection on startup\n    console.log('Testing database connection...');\n    const dbConnected = await testDatabaseConnection();\n    if (!dbConnected) {\n        console.error('Failed to connect to database on startup');\n    } else {\n        console.log('Database connection successful on startup');\n    }\n\n    const app = express();\n\n    // Trust Netlify/Heroku/Cloud proxy for correct req.ip and rate limiting\n    app.set('trust proxy', 1);\n\n    // Security middleware\n    app.use(helmet({\n        contentSecurityPolicy: {\n            directives: {\n                defaultSrc: [\"'self'\"],\n                scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"blob:\"],\n                styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\", \"https://rsms.me\"],\n                imgSrc: [\"'self'\", \"data:\", \"https:\"],\n                connectSrc: [\n                    \"'self'\",\n                    \"https://api.searchapi.io\",\n                    \"https://n8n.srv824584.hstgr.cloud\",\n                    \"https://pavlo4.netlify.app\",\n                ],\n            },\n        },\n    }));\n\n    // CORS configuration\n    app.use(cors({\n        origin: process.env.FRONTEND_URL || \"http://localhost:5173\",\n        credentials: true,\n    }));\n\n    // Body parsing middleware\n    app.use(express.json({ limit: '10mb' }));\n    app.use(express.urlencoded({ extended: true, limit: '10mb' }));\n    app.use(cookieParser());\n\n    // Compression middleware\n    app.use(compression());\n\n    // Basic health check\n    app.get(\"/api/health\", (req, res) => {\n        res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n    });\n\n    // Debug endpoint to check environment variables\n    app.get(\"/api/debug/env\", (req, res) => {\n        res.json({\n            DATABASE_URL: process.env.DATABASE_URL ? \"SET\" : \"NOT SET\",\n            JWT_SECRET: process.env.JWT_SECRET ? \"SET\" : \"NOT SET\",\n            NODE_ENV: process.env.NODE_ENV,\n            FRONTEND_URL: process.env.FRONTEND_URL,\n            ALLOWED_ORIGINS: process.env.ALLOWED_ORIGINS,\n        });\n    });\n\n    // Debug endpoint to test database connection\n    app.get(\"/api/debug/db\", async (req, res) => {\n        try {\n            console.log('Testing database connection from debug endpoint...');\n            const dbConnected = await testDatabaseConnection();\n            \n            if (dbConnected) {\n                // Test business query\n                const business = await prisma.business.findUnique({\n                    where: { id: 3 },\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        domain: true,\n                    }\n                });\n                \n                res.json({\n                    success: true,\n                    databaseConnected: true,\n                    businessFound: !!business,\n                    business: business\n                });\n            } else {\n                res.json({\n                    success: false,\n                    databaseConnected: false,\n                    error: \"Database connection failed\"\n                });\n            }\n        } catch (error) {\n            console.error('Database test error:', error);\n            res.json({\n                success: false,\n                databaseConnected: false,\n                error: error instanceof Error ? error.message : String(error)\n            });\n        }\n    });\n\n    // Location endpoint\n    app.get(\"/api/location\", (req, res) => {\n        res.json({ \n            success: true, \n            location: { \n                country: \"LT\", \n                city: \"Vilnius\" \n            } \n        });\n    });\n\n    // Auth endpoints (simplified responses)\n    app.get(\"/api/auth/me\", (req, res) => {\n        res.json({ \n            success: false, \n            message: \"Not authenticated\" \n        });\n    });\n\n    // Business authentication endpoints\n    app.get(\"/api/business/auth/me\", async (req, res) => {\n        try {\n            // Check for token in cookies or Authorization header\n            let token = req.cookies.business_token;\n\n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            if (!token) {\n                return res.json({\n                    business: null,\n                    authenticated: false\n                });\n            }\n\n            const decoded = verifyBusinessToken(token);\n            if (!decoded || decoded.type !== \"business\") {\n                return res.json({\n                    business: null,\n                    authenticated: false\n                });\n            }\n\n            const business = await businessService.findBusinessById(decoded.businessId);\n            if (!business) {\n                return res.json({\n                    business: null,\n                    authenticated: false\n                });\n            }\n\n            res.json({\n                business: {\n                    id: business.id,\n                    name: business.name,\n                    domain: business.domain,\n                    email: business.email,\n                    affiliateId: business.affiliateId,\n                    trackingVerified: business.trackingVerified,\n                },\n                authenticated: true\n            });\n        } catch (error) {\n            console.error(\"Error getting current business:\", error);\n            res.json({\n                business: null,\n                authenticated: false\n            });\n        }\n    });\n\n    app.post(\"/api/business/auth/login\", async (req, res) => {\n        try {\n            const { email, password } = req.body;\n\n            if (!email || !password) {\n                return res.status(400).json({\n                    success: false,\n                    error: \"Email and password are required\"\n                });\n            }\n\n            const business = await businessService.findBusinessByEmail(email);\n            if (!business) {\n                return res.status(401).json({\n                    success: false,\n                    error: \"Invalid email or password\"\n                });\n            }\n\n            if (!business.isActive) {\n                return res.status(401).json({\n                    success: false,\n                    error: \"Business account is deactivated\"\n                });\n            }\n\n            const isPasswordValid = await bcrypt.compare(password, business.password);\n            if (!isPasswordValid) {\n                return res.status(401).json({\n                    success: false,\n                    error: \"Invalid email or password\"\n                });\n            }\n\n            // Generate token\n            const token = generateBusinessToken(business.id, business.email);\n\n            // Set cookie\n            res.cookie(\"business_token\", token, {\n                httpOnly: true,\n                secure: process.env.NODE_ENV === \"production\",\n                sameSite: \"strict\",\n                maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n            });\n\n            res.json({\n                success: true,\n                business: {\n                    id: business.id,\n                    name: business.name,\n                    domain: business.domain,\n                    email: business.email,\n                },\n                message: \"Business login successful\"\n            });\n        } catch (error) {\n            console.error(\"Error logging in business:\", error);\n            res.status(500).json({ success: false, error: \"Failed to login\" });\n        }\n    });\n\n    app.post(\"/api/business/auth/logout\", (req, res) => {\n        res.clearCookie(\"business_token\");\n        res.json({ success: true, message: \"Business logged out successfully\" });\n    });\n\n    // Business statistics endpoint\n    app.get(\"/api/business/auth/stats\", async (req, res) => {\n        try {\n            console.log('Stats endpoint called');\n            \n            // Check for business authentication\n            let token = req.cookies.business_token;\n\n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            console.log('Token found:', !!token);\n\n            if (!token) {\n                console.log('No token found');\n                return res.status(401).json({\n                    success: false,\n                    error: \"Not authenticated\"\n                });\n            }\n\n            const decoded = verifyBusinessToken(token);\n            console.log('Token decoded:', decoded);\n\n            if (!decoded || decoded.type !== \"business\") {\n                console.log('Invalid token:', decoded);\n                return res.status(401).json({\n                    success: false,\n                    error: \"Invalid token\"\n                });\n            }\n\n            console.log('Business ID from token:', decoded.businessId);\n\n            const stats = await businessService.getBusinessStatistics(decoded.businessId);\n            console.log('Stats result:', !!stats);\n\n            if (!stats) {\n                console.log('Business not found in getBusinessStatistics');\n                return res.status(404).json({\n                    success: false,\n                    error: \"Business not found\"\n                });\n            }\n\n            console.log('Returning successful stats response');\n            res.json({ success: true, stats });\n        } catch (error) {\n            console.error(\"Error getting business stats:\", error);\n            res.status(500).json({ success: false, error: \"Failed to get business statistics\" });\n        }\n    });\n\n    // Track event endpoint\n    app.post(\"/api/track-event\", async (req, res) => {\n        try {\n            const {\n                event_type,\n                business_id,\n                affiliate_id,\n                platform,\n                session_id,\n                user_agent,\n                referrer,\n                timestamp,\n                url,\n                data\n            } = req.body;\n\n            console.log('Track event request:', { event_type, business_id, affiliate_id, platform });\n\n            // Validate required fields\n            if (!event_type || !business_id || !affiliate_id) {\n                console.log('Missing required fields:', { event_type, business_id, affiliate_id });\n                return res.status(400).json({\n                    success: false,\n                    error: \"Missing required fields: event_type, business_id, affiliate_id\"\n                });\n            }\n\n            // Test database connection first\n            console.log('Testing database connection...');\n            const dbConnected = await testDatabaseConnection();\n\n            if (dbConnected) {\n                // Database is available - try to save the event\n                try {\n                    console.log('Creating tracking event in database...');\n                    const trackingEvent = await prisma.trackingEvent.create({\n                        data: {\n                            eventType: event_type,\n                            businessId: parseInt(business_id),\n                            affiliateId: affiliate_id,\n                            platform: platform || 'universal',\n                            sessionId: session_id,\n                            userAgent: user_agent,\n                            referrer: referrer,\n                            timestamp: new Date(timestamp),\n                            url: url,\n                            eventData: data || {},\n                            ipAddress: req.ip || req.connection.remoteAddress || 'unknown'\n                        }\n                    });\n\n                    console.log('Tracking event created:', trackingEvent.id);\n\n                    res.json({\n                        success: true,\n                        message: \"Event tracked successfully\",\n                        event_id: trackingEvent.id\n                    });\n                } catch (dbError) {\n                    console.error('Database operation failed:', dbError);\n                    res.json({\n                        success: true,\n                        message: \"Event tracked successfully (logged only)\",\n                        event_id: Date.now(),\n                        note: \"Database operation failed, but event was logged\"\n                    });\n                }\n            } else {\n                // Database not available - just log the event\n                console.log('Event received (no database):', {\n                    event_type,\n                    business_id,\n                    affiliate_id,\n                    platform,\n                    session_id,\n                    user_agent,\n                    referrer,\n                    timestamp,\n                    url,\n                    data\n                });\n\n                res.json({\n                    success: true,\n                    message: \"Event tracked successfully (logged only)\",\n                    event_id: Date.now(),\n                    note: \"Database not available - check DATABASE_URL environment variable\"\n                });\n            }\n\n        } catch (error) {\n            console.error(\"Error tracking event:\", error);\n            res.status(500).json({\n                success: false,\n                error: \"Failed to track event\",\n                details: error instanceof Error ? error.message : String(error)\n            });\n        }\n    });\n\n    return app;\n} "],"names":["dbConnected"],"mappings":"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"}