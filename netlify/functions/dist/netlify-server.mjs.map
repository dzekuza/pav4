{"version":3,"file":"netlify-server.mjs","sources":["../../../server/netlify-server.ts"],"sourcesContent":["import dotenv from \"dotenv\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport helmet from \"helmet\";\nimport compression from \"compression\";\nimport path from \"path\";\n\n// Load environment variables\ndotenv.config();\n\n// Import database service\nimport { PrismaClient } from \"@prisma/client\";\n\n// Create a single Prisma Client instance\nconst createPrismaClient = () => {\n  return new PrismaClient({\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });\n};\n\nexport const prisma = globalThis.__prisma || createPrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.__prisma = prisma;\n}\n\n// Simple server creation function for Netlify Functions\nexport async function createServer() {\n  const app = express();\n\n  // Trust Netlify/Heroku/Cloud proxy for correct req.ip and rate limiting\n  app.set('trust proxy', 1);\n\n  // Security middleware\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"blob:\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\", \"https://rsms.me\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\"],\n        connectSrc: [\n          \"'self'\",\n          \"https://api.searchapi.io\",\n          \"https://n8n.srv824584.hstgr.cloud\",\n          \"https://pavlo4.netlify.app\",\n        ],\n      },\n    },\n  }));\n\n  // CORS configuration\n  app.use(cors({\n    origin: process.env.FRONTEND_URL || \"http://localhost:5173\",\n    credentials: true,\n  }));\n\n  // Body parsing middleware\n  app.use(express.json({ limit: '10mb' }));\n  app.use(express.urlencoded({ extended: true, limit: '10mb' }));\n  app.use(cookieParser());\n\n  // Compression middleware\n  app.use(compression());\n\n  // Basic health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // Track event endpoint\n  app.post(\"/api/track-event\", async (req, res) => {\n    try {\n      const {\n        event_type,\n        business_id,\n        affiliate_id,\n        platform,\n        session_id,\n        user_agent,\n        referrer,\n        timestamp,\n        url,\n        data\n      } = req.body;\n\n      console.log('Track event request:', { event_type, business_id, affiliate_id, platform });\n\n      // Validate required fields\n      if (!event_type || !business_id || !affiliate_id) {\n        console.log('Missing required fields:', { event_type, business_id, affiliate_id });\n        return res.status(400).json({\n          success: false,\n          error: \"Missing required fields: event_type, business_id, affiliate_id\"\n        });\n      }\n\n      // Check if business exists\n      console.log('Checking business with ID:', business_id);\n      const business = await prisma.business.findUnique({\n        where: { id: parseInt(business_id) }\n      });\n\n      if (!business) {\n        console.log('Business not found:', business_id);\n        return res.status(400).json({\n          success: false,\n          error: \"Business not found\"\n        });\n      }\n\n      console.log('Business found:', business.name);\n\n      // Create tracking event in database\n      console.log('Creating tracking event...');\n      const trackingEvent = await prisma.trackingEvent.create({\n        data: {\n          eventType: event_type,\n          businessId: parseInt(business_id),\n          affiliateId: affiliate_id,\n          platform: platform || 'universal',\n          sessionId: session_id,\n          userAgent: user_agent,\n          referrer: referrer,\n          timestamp: new Date(timestamp),\n          url: url,\n          eventData: data || {},\n          ipAddress: req.ip || req.connection.remoteAddress || 'unknown'\n        }\n      });\n\n      console.log('Tracking event created:', trackingEvent.id);\n\n      // Update business statistics based on event type\n      if (event_type === 'purchase_click' || event_type === 'conversion') {\n        console.log('Updating business visits...');\n        await prisma.business.update({\n          where: { id: parseInt(business_id) },\n          data: {\n            totalVisits: {\n              increment: 1\n            }\n          }\n        });\n      }\n\n      if (event_type === 'conversion') {\n        console.log('Updating business purchases...');\n        await prisma.business.update({\n          where: { id: parseInt(business_id) },\n          data: {\n            totalPurchases: {\n              increment: 1\n            },\n            totalRevenue: {\n              increment: parseFloat(data?.total_amount || '0')\n            }\n          }\n        });\n      }\n\n      console.log('Track event completed successfully');\n      res.json({\n        success: true,\n        message: \"Event tracked successfully\",\n        event_id: trackingEvent.id\n      });\n\n    } catch (error) {\n      console.error(\"Error tracking event:\", error);\n      res.status(500).json({\n        success: false,\n        error: \"Failed to track event\",\n        details: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  return app;\n} "],"names":[],"mappings":"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"}