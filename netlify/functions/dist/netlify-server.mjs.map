{"version":3,"file":"netlify-server.mjs","sources":["../../../server/netlify-server.ts"],"sourcesContent":["import dotenv from \"dotenv\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport helmet from \"helmet\";\nimport compression from \"compression\";\nimport path from \"path\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { neon } from '@netlify/neon';\n\n// Load environment variables\ndotenv.config();\n\n// Create Neon SQL client\nconst sql = neon(); // automatically uses env NETLIFY_DATABASE_URL\n\n// Test database connection with retry logic\nasync function testDatabaseConnection() {\n    try {\n        console.log('Testing database connection with Neon...');\n        const result = await sql`SELECT 1 as test`;\n        console.log('Database connection successful:', result);\n        return true;\n    } catch (error) {\n        console.error('Database connection failed:', error);\n        return false;\n    }\n}\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Helper function to generate JWT token for business\nfunction generateBusinessToken(businessId: number, email: string) {\n    return jwt.sign(\n        { businessId, email, type: \"business\" },\n        JWT_SECRET,\n        { expiresIn: \"7d\" }\n    );\n}\n\n// Helper function to verify business token\nfunction verifyBusinessToken(token: string) {\n    try {\n        return jwt.verify(token, JWT_SECRET) as any;\n    } catch (error) {\n        return null;\n    }\n}\n\n// Business service functions using Neon\nconst businessService = {\n    async findBusinessByEmail(email: string) {\n        try {\n            const result = await sql`\n                SELECT * FROM business \n                WHERE email = ${email}\n            `;\n            return result[0] || null;\n        } catch (error) {\n            console.error('Error finding business by email:', error);\n            return null;\n        }\n    },\n\n    async findBusinessById(id: number) {\n        try {\n            const result = await sql`\n                SELECT * FROM business \n                WHERE id = ${id}\n            `;\n            return result[0] || null;\n        } catch (error) {\n            console.error('Error finding business by id:', error);\n            return null;\n        }\n    },\n\n    async createBusiness(data: any) {\n        try {\n            const result = await sql`\n                INSERT INTO business (name, domain, website, email, password, affiliate_id, is_active, created_at, updated_at)\n                VALUES (${data.name}, ${data.domain}, ${data.website}, ${data.email}, ${data.password}, ${data.affiliateId}, true, NOW(), NOW())\n                RETURNING *\n            `;\n            return result[0] || null;\n        } catch (error) {\n            console.error('Error creating business:', error);\n            return null;\n        }\n    },\n\n    async getBusinessStatistics(businessId: number) {\n        try {\n            console.log('Getting business statistics for businessId:', businessId);\n            \n            // Test database connection first\n            const dbConnected = await testDatabaseConnection();\n            if (!dbConnected) {\n                console.log('Database connection failed, cannot get business statistics');\n                return null;\n            }\n            \n            // Get business details\n            const businessResult = await sql`\n                SELECT id, name, domain, total_visits, total_purchases, total_revenue, commission, admin_commission_rate, affiliate_id, tracking_verified\n                FROM business \n                WHERE id = ${businessId}\n            `;\n            \n            const business = businessResult[0];\n            console.log('Business found:', business);\n\n            if (!business) {\n                console.log('Business not found for ID:', businessId);\n                return null;\n            }\n\n            // Get recent clicks and conversions\n            const [clicks, conversions] = await Promise.all([\n                sql`\n                    SELECT * FROM business_click \n                    WHERE business_id = ${businessId}\n                    ORDER BY timestamp DESC \n                    LIMIT 10\n                `,\n                sql`\n                    SELECT * FROM business_conversion \n                    WHERE business_id = ${businessId}\n                    ORDER BY timestamp DESC \n                    LIMIT 10\n                `\n            ]);\n\n            console.log('Recent clicks count:', clicks.length);\n            console.log('Recent conversions count:', conversions.length);\n\n            // Calculate derived fields\n            const averageOrderValue = business.total_purchases > 0 ? business.total_revenue / business.total_purchases : 0;\n            const conversionRate = business.total_visits > 0 ? (business.total_purchases / business.total_visits) * 100 : 0;\n            const projectedFee = business.total_revenue * (business.admin_commission_rate / 100);\n\n            const result = {\n                id: business.id,\n                name: business.name,\n                domain: business.domain,\n                totalVisits: business.total_visits,\n                totalPurchases: business.total_purchases,\n                totalRevenue: business.total_revenue,\n                commission: business.commission,\n                adminCommissionRate: business.admin_commission_rate,\n                affiliateId: business.affiliate_id,\n                trackingVerified: business.tracking_verified,\n                averageOrderValue,\n                conversionRate,\n                projectedFee,\n                recentClicks: clicks,\n                recentConversions: conversions,\n            };\n\n            console.log('Returning business statistics:', result);\n            return result;\n        } catch (error) {\n            console.error(\"Error getting business statistics:\", error);\n            return null;\n        }\n    },\n};\n\n// Simple server creation function for Netlify Functions\nexport async function createServer() {\n    // Test database connection on startup\n    console.log('Testing database connection...');\n    const dbConnected = await testDatabaseConnection();\n    if (!dbConnected) {\n        console.error('Failed to connect to database on startup');\n    } else {\n        console.log('Database connection successful on startup');\n    }\n\n    const app = express();\n\n    // Trust Netlify/Heroku/Cloud proxy for correct req.ip and rate limiting\n    app.set('trust proxy', 1);\n\n    // Security middleware\n    app.use(helmet({\n        contentSecurityPolicy: {\n            directives: {\n                defaultSrc: [\"'self'\"],\n                scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"blob:\"],\n                styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\", \"https://rsms.me\"],\n                imgSrc: [\"'self'\", \"data:\", \"https:\"],\n                connectSrc: [\n                    \"'self'\",\n                    \"https://api.searchapi.io\",\n                    \"https://n8n.srv824584.hstgr.cloud\",\n                    \"https://pavlo4.netlify.app\",\n                ],\n            },\n        },\n    }));\n\n    // CORS configuration\n    app.use(cors({\n        origin: process.env.FRONTEND_URL || \"http://localhost:5173\",\n        credentials: true,\n    }));\n\n    // Body parsing middleware\n    app.use(express.json({ limit: '10mb' }));\n    app.use(express.urlencoded({ extended: true, limit: '10mb' }));\n    app.use(cookieParser());\n\n    // Compression middleware\n    app.use(compression());\n\n    // Basic health check\n    app.get(\"/api/health\", (req, res) => {\n        res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n    });\n\n    // Debug endpoint to check environment variables\n    app.get(\"/api/debug/env\", (req, res) => {\n        res.json({\n            NETLIFY_DATABASE_URL: process.env.NETLIFY_DATABASE_URL ? \"SET\" : \"NOT SET\",\n            JWT_SECRET: process.env.JWT_SECRET ? \"SET\" : \"NOT SET\",\n            NODE_ENV: process.env.NODE_ENV,\n            FRONTEND_URL: process.env.FRONTEND_URL,\n        });\n    });\n\n    // Debug endpoint to test database connection\n    app.get(\"/api/debug/db\", async (req, res) => {\n        try {\n            console.log('Testing database connection from debug endpoint...');\n            const dbConnected = await testDatabaseConnection();\n            \n            if (dbConnected) {\n                // Test business query\n                const businessResult = await sql`\n                    SELECT id, name, email, domain \n                    FROM business \n                    WHERE id = 3\n                `;\n                const business = businessResult[0];\n                \n                res.json({\n                    success: true,\n                    databaseConnected: true,\n                    businessFound: !!business,\n                    business: business\n                });\n            } else {\n                res.json({\n                    success: false,\n                    databaseConnected: false,\n                    error: \"Database connection failed\"\n                });\n            }\n        } catch (error) {\n            console.error('Database test error:', error);\n            res.json({\n                success: false,\n                databaseConnected: false,\n                error: error instanceof Error ? error.message : String(error)\n            });\n        }\n    });\n\n    // Location endpoint\n    app.get(\"/api/location\", (req, res) => {\n        res.json({ \n            success: true, \n            location: { \n                country: \"LT\", \n                city: \"Vilnius\" \n            } \n        });\n    });\n\n    // User authentication endpoints\n    app.get(\"/api/auth/me\", async (req, res) => {\n        try {\n            // Check for token in cookies or Authorization header\n            let token = req.cookies.auth_token;\n            \n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            if (!token) {\n                // Return null user instead of 401 for unauthenticated requests\n                return res.json({\n                    user: null,\n                    authenticated: false\n                });\n            }\n\n            const decoded = verifyToken(token);\n            if (!decoded) {\n                return res.json({\n                    user: null,\n                    authenticated: false\n                });\n            }\n\n            // Handle both string and number user IDs\n            const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n            \n            if (isNaN(userId)) {\n                return res.json({\n                    user: null,\n                    authenticated: false\n                });\n            }\n\n            const userResult = await sql`\n                SELECT id, email, is_admin as \"isAdmin\"\n                FROM users \n                WHERE id = ${userId}\n            `;\n            const user = userResult[0];\n            \n            if (!user) {\n                return res.json({\n                    user: null,\n                    authenticated: false\n                });\n            }\n\n            res.json({\n                user: {\n                    id: user.id,\n                    email: user.email,\n                    isAdmin: user.isAdmin,\n                },\n                authenticated: true\n            });\n        } catch (error) {\n            console.error(\"Get current user error:\", error);\n            // Return null user instead of 500 error\n            res.json({\n                user: null,\n                authenticated: false\n            });\n        }\n    });\n\n    // Helper function to generate JWT token for users\n    function generateToken(userId: number): string {\n        return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"7d\" });\n    }\n\n    // Helper function to verify user token\n    function verifyToken(token: string): { userId: number } | null {\n        try {\n            return jwt.verify(token, JWT_SECRET) as { userId: number };\n        } catch {\n            return null;\n        }\n    }\n\n    // User registration endpoint\n    app.post(\"/api/auth/register\", async (req, res) => {\n        try {\n            const { email, password } = req.body;\n\n            if (!email || !password) {\n                return res.status(400).json({ error: \"Email and password are required\" });\n            }\n\n            if (password.length < 8) {\n                return res\n                    .status(400)\n                    .json({ error: \"Password must be at least 8 characters long\" });\n            }\n\n            // Check for uppercase, lowercase, and number\n            const hasUpperCase = /[A-Z]/.test(password);\n            const hasLowerCase = /[a-z]/.test(password);\n            const hasNumber = /\\d/.test(password);\n\n            if (!hasUpperCase || !hasLowerCase || !hasNumber) {\n                return res\n                    .status(400)\n                    .json({ \n                        error: \"Password must contain uppercase, lowercase, and number\",\n                        details: [{\n                            type: \"field\",\n                            value: password,\n                            msg: \"Password must be at least 8 characters with uppercase, lowercase, and number\",\n                            path: \"password\",\n                            location: \"body\"\n                        }]\n                    });\n            }\n\n            // Check if user already exists\n            const existingUserResult = await sql`\n                SELECT id FROM users WHERE email = ${email}\n            `;\n            if (existingUserResult.length > 0) {\n                return res\n                    .status(400)\n                    .json({ error: \"User with this email already exists\" });\n            }\n\n            // Hash password\n            const hashedPassword = await bcrypt.hash(password, 12);\n\n            // Create new user\n            const userResult = await sql`\n                INSERT INTO users (email, password, is_admin, created_at, updated_at)\n                VALUES (${email}, ${hashedPassword}, false, NOW(), NOW())\n                RETURNING id, email, is_admin as \"isAdmin\"\n            `;\n            const user = userResult[0];\n\n            // Generate token\n            const token = generateToken(user.id);\n\n            res.cookie(\"auth_token\", token, {\n                httpOnly: true,\n                secure: process.env.NODE_ENV === \"production\",\n                sameSite: \"strict\",\n                maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n            });\n\n            res.status(201).json({\n                success: true,\n                token: token,\n                accessToken: token,\n                user: {\n                    id: user.id,\n                    email: user.email,\n                    isAdmin: user.isAdmin,\n                },\n            });\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            res.status(500).json({ error: \"Failed to register user\" });\n        }\n    });\n\n    // User login endpoint\n    app.post(\"/api/auth/login\", async (req, res) => {\n        try {\n            const { email, password } = req.body;\n\n            if (!email || !password) {\n                return res.status(400).json({ error: \"Email and password are required\" });\n            }\n\n            // Find user by email\n            const userResult = await sql`\n                SELECT id, email, password, is_admin as \"isAdmin\"\n                FROM users \n                WHERE email = ${email}\n            `;\n            const user = userResult[0];\n            \n            if (!user) {\n                return res.status(401).json({ error: \"Invalid email or password\" });\n            }\n\n            // Check password\n            const isValidPassword = await bcrypt.compare(password, user.password);\n            if (!isValidPassword) {\n                return res.status(401).json({ error: \"Invalid email or password\" });\n            }\n\n            // Generate token\n            const token = generateToken(user.id);\n\n            res.cookie(\"auth_token\", token, {\n                httpOnly: true,\n                secure: process.env.NODE_ENV === \"production\",\n                sameSite: \"strict\",\n                maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n            });\n\n            res.json({\n                success: true,\n                token: token,\n                accessToken: token,\n                user: {\n                    id: user.id,\n                    email: user.email,\n                    isAdmin: user.isAdmin,\n                },\n            });\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            res.status(500).json({ error: \"Failed to login\" });\n        }\n    });\n\n    // User logout endpoint\n    app.post(\"/api/auth/logout\", (req, res) => {\n        res.clearCookie(\"auth_token\");\n        res.json({ success: true });\n    });\n\n    // Search history endpoints\n    app.post(\"/api/search-history\", async (req, res) => {\n        try {\n            // Check for user authentication\n            let token = req.cookies.auth_token;\n            \n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            if (!token) {\n                return res.status(401).json({ error: \"Not authenticated\" });\n            }\n\n            const decoded = verifyToken(token);\n            if (!decoded) {\n                return res.status(401).json({ error: \"Invalid token\" });\n            }\n\n            const { query, results } = req.body;\n            \n            if (!query) {\n                return res.status(400).json({ error: \"Query is required\" });\n            }\n\n            // Add to search history\n            await sql`\n                INSERT INTO user_search_history (user_id, query, results, created_at)\n                VALUES (${decoded.userId}, ${query}, ${JSON.stringify(results || [])}, NOW())\n            `;\n\n            res.json({ success: true });\n        } catch (error) {\n            console.error(\"Error adding to search history:\", error);\n            res.status(500).json({ error: \"Failed to add to search history\" });\n        }\n    });\n\n    app.get(\"/api/search-history\", async (req, res) => {\n        try {\n            // Check for user authentication\n            let token = req.cookies.auth_token;\n            \n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            if (!token) {\n                return res.status(401).json({ error: \"Not authenticated\" });\n            }\n\n            const decoded = verifyToken(token);\n            if (!decoded) {\n                return res.status(401).json({ error: \"Invalid token\" });\n            }\n\n            // Get user's search history\n            const historyResult = await sql`\n                SELECT id, query, results, created_at as \"createdAt\"\n                FROM user_search_history \n                WHERE user_id = ${decoded.userId}\n                ORDER BY created_at DESC\n                LIMIT 50\n            `;\n\n            res.json({ \n                success: true,\n                history: historyResult.map(item => ({\n                    id: item.id,\n                    query: item.query,\n                    results: item.results,\n                    createdAt: item.createdAt\n                }))\n            });\n        } catch (error) {\n            console.error(\"Error getting search history:\", error);\n            res.status(500).json({ error: \"Failed to get search history\" });\n        }\n    });\n\n    // Business authentication endpoints\n    app.get(\"/api/business/auth/me\", async (req, res) => {\n        try {\n            // Check for token in cookies or Authorization header\n            let token = req.cookies.business_token;\n\n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            if (!token) {\n                return res.json({\n                    business: null,\n                    authenticated: false\n                });\n            }\n\n            const decoded = verifyBusinessToken(token);\n            if (!decoded || decoded.type !== \"business\") {\n                return res.json({\n                    business: null,\n                    authenticated: false\n                });\n            }\n\n            const business = await businessService.findBusinessById(decoded.businessId);\n            if (!business) {\n                return res.json({\n                    business: null,\n                    authenticated: false\n                });\n            }\n\n            res.json({\n                business: {\n                    id: business.id,\n                    name: business.name,\n                    domain: business.domain,\n                    email: business.email,\n                    affiliateId: business.affiliate_id,\n                    trackingVerified: business.tracking_verified,\n                },\n                authenticated: true\n            });\n        } catch (error) {\n            console.error(\"Error getting current business:\", error);\n            res.json({\n                business: null,\n                authenticated: false\n            });\n        }\n    });\n\n    app.post(\"/api/business/auth/login\", async (req, res) => {\n        try {\n            const { email, password } = req.body;\n\n            if (!email || !password) {\n                return res.status(400).json({\n                    success: false,\n                    error: \"Email and password are required\"\n                });\n            }\n\n            const business = await businessService.findBusinessByEmail(email);\n            if (!business) {\n                return res.status(401).json({\n                    success: false,\n                    error: \"Invalid email or password\"\n                });\n            }\n\n            if (!business.is_active) {\n                return res.status(401).json({\n                    success: false,\n                    error: \"Business account is deactivated\"\n                });\n            }\n\n            const isPasswordValid = await bcrypt.compare(password, business.password);\n            if (!isPasswordValid) {\n                return res.status(401).json({\n                    success: false,\n                    error: \"Invalid email or password\"\n                });\n            }\n\n            // Generate token\n            const token = generateBusinessToken(business.id, business.email);\n\n            // Set cookie\n            res.cookie(\"business_token\", token, {\n                httpOnly: true,\n                secure: process.env.NODE_ENV === \"production\",\n                sameSite: \"strict\",\n                maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n            });\n\n            res.json({\n                success: true,\n                business: {\n                    id: business.id,\n                    name: business.name,\n                    domain: business.domain,\n                    email: business.email,\n                },\n                message: \"Business login successful\"\n            });\n        } catch (error) {\n            console.error(\"Error logging in business:\", error);\n            res.status(500).json({ success: false, error: \"Failed to login\" });\n        }\n    });\n\n    app.post(\"/api/business/auth/logout\", (req, res) => {\n        res.clearCookie(\"business_token\");\n        res.json({ success: true, message: \"Business logged out successfully\" });\n    });\n\n    // Business statistics endpoint\n    app.get(\"/api/business/auth/stats\", async (req, res) => {\n        try {\n            console.log('Stats endpoint called');\n            \n            // Check for business authentication\n            let token = req.cookies.business_token;\n\n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            console.log('Token found:', !!token);\n\n            if (!token) {\n                console.log('No token found');\n                return res.status(401).json({\n                    success: false,\n                    error: \"Not authenticated\"\n                });\n            }\n\n            const decoded = verifyBusinessToken(token);\n            console.log('Token decoded:', decoded);\n\n            if (!decoded || decoded.type !== \"business\") {\n                console.log('Invalid token:', decoded);\n                return res.status(401).json({\n                    success: false,\n                    error: \"Invalid token\"\n                });\n            }\n\n            console.log('Business ID from token:', decoded.businessId);\n\n            const stats = await businessService.getBusinessStatistics(decoded.businessId);\n            console.log('Stats result:', !!stats);\n\n            if (!stats) {\n                console.log('Business not found in getBusinessStatistics');\n                return res.status(404).json({\n                    success: false,\n                    error: \"Business not found\"\n                });\n            }\n\n            console.log('Returning successful stats response');\n            res.json({ success: true, stats });\n        } catch (error) {\n            console.error(\"Error getting business stats:\", error);\n            res.status(500).json({ success: false, error: \"Failed to get business statistics\" });\n        }\n    });\n\n    // Business registration endpoint\n    app.post(\"/api/business/register\", async (req, res) => {\n        try {\n            const { \n                name, \n                domain, \n                website, \n                email,\n                password,\n                description, \n                logo, \n                contactEmail, \n                contactPhone, \n                address, \n                country, \n                category, \n                commission \n            } = req.body;\n\n            console.log('Business registration request:', { name, domain, email });\n\n            if (!name || !domain || !website || !email || !password) {\n                return res.status(400).json({ \n                    success: false, \n                    error: \"Name, domain, website, email, and password are required\" \n                });\n            }\n\n            // Validate email format\n            if (!email.includes('@')) {\n                return res.status(400).json({ \n                    success: false, \n                    error: \"Invalid email format\" \n                });\n            }\n\n            // Validate password length\n            if (password.length < 6) {\n                return res.status(400).json({ \n                    success: false, \n                    error: \"Password must be at least 6 characters long\" \n                });\n            }\n\n            // Validate domain format\n            const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/;\n            if (!domainRegex.test(domain)) {\n                return res.status(400).json({ \n                    success: false, \n                    error: \"Invalid domain format\" \n                });\n            }\n\n            // Test database connection first\n            const dbConnected = await testDatabaseConnection();\n            if (!dbConnected) {\n                return res.status(500).json({ \n                    success: false, \n                    error: \"Database connection failed\" \n                });\n            }\n\n            // Check if domain already exists\n            const existingDomainResult = await sql`\n                SELECT id FROM business WHERE domain = ${domain}\n            `;\n            if (existingDomainResult.length > 0) {\n                return res.status(400).json({ \n                    success: false, \n                    error: \"A business with this domain already exists\" \n                });\n            }\n\n            // Check if email already exists\n            const existingEmailResult = await sql`\n                SELECT id FROM business WHERE email = ${email}\n            `;\n            if (existingEmailResult.length > 0) {\n                return res.status(400).json({ \n                    success: false, \n                    error: \"A business with this email already exists\" \n                });\n            }\n\n            // Hash the password\n            const hashedPassword = await bcrypt.hash(password, 12);\n\n            // Generate affiliate ID\n            const affiliateId = `aff_${domain.replace(/[^a-zA-Z0-9]/g, '')}_${Date.now()}`;\n\n            // Create the business\n            const result = await sql`\n                INSERT INTO business (\n                    name, domain, website, email, password, description, logo, \n                    contact_email, contact_phone, address, country, category, \n                    commission, affiliate_id, is_active, created_at, updated_at\n                ) VALUES (\n                    ${name}, ${domain}, ${website}, ${email}, ${hashedPassword}, \n                    ${description || ''}, ${logo || ''}, ${contactEmail || ''}, \n                    ${contactPhone || ''}, ${address || ''}, ${country || ''}, \n                    ${category || ''}, ${commission ? parseFloat(commission) : 0}, \n                    ${affiliateId}, true, NOW(), NOW()\n                ) RETURNING id, name, domain, email, affiliate_id\n            `;\n\n            const business = result[0];\n\n            console.log('Business created successfully:', business.id);\n\n            res.status(201).json({ \n                success: true, \n                business: {\n                    id: business.id,\n                    name: business.name,\n                    domain: business.domain,\n                    email: business.email,\n                    affiliateId: business.affiliate_id,\n                },\n                message: \"Business registered successfully. You can now log in with your email and password.\" \n            });\n\n        } catch (error) {\n            console.error(\"Error registering business:\", error);\n            res.status(500).json({ \n                success: false, \n                error: \"Failed to register business\",\n                details: error instanceof Error ? error.message : String(error)\n            });\n        }\n    });\n\n    // Business activity endpoints\n    app.get(\"/api/business/activity/clicks\", async (req, res) => {\n        try {\n            // Check for business authentication\n            let token = req.cookies.business_token;\n            \n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            if (!token) {\n                return res.status(401).json({ \n                    success: false, \n                    error: \"Not authenticated\" \n                });\n            }\n\n            const decoded = verifyBusinessToken(token);\n            if (!decoded || decoded.type !== \"business\") {\n                return res.status(401).json({ \n                    success: false, \n                    error: \"Invalid token\" \n                });\n            }\n\n            // Get click logs for this business\n            const clicksResult = await sql`\n                SELECT id, product_url as \"productUrl\", product_title as \"productTitle\", \n                       product_price as \"productPrice\", retailer, session_id as \"sessionId\",\n                       referrer, utm_source as \"utmSource\", utm_medium as \"utmMedium\", \n                       utm_campaign as \"utmCampaign\", ip_address as \"ipAddress\", \n                       user_agent as \"userAgent\", timestamp\n                FROM business_clicks \n                WHERE business_id = ${decoded.businessId}\n                ORDER BY timestamp DESC\n                LIMIT 100\n            `;\n            \n            res.json({ success: true, clicks: clicksResult });\n        } catch (error) {\n            console.error(\"Error getting business clicks:\", error);\n            res.status(500).json({ success: false, error: \"Failed to get business clicks\" });\n        }\n    });\n\n    app.get(\"/api/business/activity/conversions\", async (req, res) => {\n        try {\n            // Check for business authentication\n            let token = req.cookies.business_token;\n            \n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            if (!token) {\n                return res.status(401).json({ \n                    success: false, \n                    error: \"Not authenticated\" \n                });\n            }\n\n            const decoded = verifyBusinessToken(token);\n            if (!decoded || decoded.type !== \"business\") {\n                return res.status(401).json({ \n                    success: false, \n                    error: \"Invalid token\" \n                });\n            }\n\n            // Get conversions for this business\n            const conversionsResult = await sql`\n                SELECT id, product_url as \"productUrl\", product_title as \"productTitle\", \n                       product_price as \"productPrice\", retailer, session_id as \"sessionId\",\n                       referrer, utm_source as \"utmSource\", utm_medium as \"utmMedium\", \n                       utm_campaign as \"utmCampaign\", ip_address as \"ipAddress\", \n                       user_agent as \"userAgent\", timestamp\n                FROM business_conversions \n                WHERE business_id = ${decoded.businessId}\n                ORDER BY timestamp DESC\n                LIMIT 100\n            `;\n            \n            res.json({ success: true, conversions: conversionsResult });\n        } catch (error) {\n            console.error(\"Error getting business conversions:\", error);\n            res.status(500).json({ success: false, error: \"Failed to get business conversions\" });\n        }\n    });\n\n    app.get(\"/api/business/activity/events\", async (req, res) => {\n        try {\n            // Check for business authentication\n            let token = req.cookies.business_token;\n            \n            if (!token) {\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    token = authHeader.substring(7);\n                }\n            }\n\n            if (!token) {\n                return res.status(401).json({ \n                    success: false, \n                    error: \"Not authenticated\" \n                });\n            }\n\n            const decoded = verifyBusinessToken(token);\n            if (!decoded || decoded.type !== \"business\") {\n                return res.status(401).json({ \n                    success: false, \n                    error: \"Invalid token\" \n                });\n            }\n\n            // Get tracking events for this business\n            const eventsResult = await sql`\n                SELECT id, event_type as \"eventType\", platform, session_id as \"sessionId\",\n                       user_agent as \"userAgent\", referrer, timestamp, url, event_data as \"eventData\",\n                       ip_address as \"ipAddress\"\n                FROM tracking_event \n                WHERE business_id = ${decoded.businessId}\n                ORDER BY timestamp DESC\n                LIMIT 100\n            `;\n            \n            res.json({ success: true, events: eventsResult });\n        } catch (error) {\n            console.error(\"Error getting business events:\", error);\n            res.status(500).json({ success: false, error: \"Failed to get business events\" });\n        }\n    });\n\n    // Track event endpoint\n    app.post(\"/api/track-event\", async (req, res) => {\n        try {\n            const {\n                event_type,\n                business_id,\n                affiliate_id,\n                platform,\n                session_id,\n                user_agent,\n                referrer,\n                timestamp,\n                url,\n                data\n            } = req.body;\n\n            console.log('Track event request:', { event_type, business_id, affiliate_id, platform });\n\n            // Validate required fields\n            if (!event_type || !business_id || !affiliate_id) {\n                console.log('Missing required fields:', { event_type, business_id, affiliate_id });\n                return res.status(400).json({\n                    success: false,\n                    error: \"Missing requiredd fields: event_type, business_id, affiliate_id\"\n                });\n            }\n\n            // Test database connection first\n            console.log('Testing database connection...');\n            const dbConnected = await testDatabaseConnection();\n\n            if (dbConnected) {\n                // Database is available - try to save the event\n                try {\n                    console.log('Creating tracking event in database...');\n                    const result = await sql`\n                        INSERT INTO tracking_event (\n                            event_type, business_id, affiliate_id, platform, session_id, \n                            user_agent, referrer, timestamp, url, event_data, ip_address\n                        ) VALUES (\n                            ${event_type}, ${parseInt(business_id)}, ${affiliate_id}, \n                            ${platform || 'universal'}, ${session_id}, ${user_agent}, \n                            ${referrer}, ${new Date(timestamp)}, ${url}, ${JSON.stringify(data || {})}, \n                            ${req.ip || req.connection.remoteAddress || 'unknown'}\n                        ) RETURNING id\n                    `;\n                    \n                    const trackingEvent = result[0];\n                    console.log('Tracking event created:', trackingEvent.id);\n\n                    res.json({\n                        success: true,\n                        message: \"Event tracked successfully\",\n                        event_id: trackingEvent.id\n                    });\n                } catch (dbError) {\n                    console.error('Database operation failed:', dbError);\n                    res.json({\n                        success: true,\n                        message: \"Event tracked successfully (logged only)\",\n                        event_id: Date.now(),\n                        note: \"Database operation failed, but event was logged\"\n                    });\n                }\n            } else {\n                // Database not available - just log the event\n                console.log('Event received (no database):', {\n                    event_type,\n                    business_id,\n                    affiliate_id,\n                    platform,\n                    session_id,\n                    user_agent,\n                    referrer,\n                    timestamp,\n                    url,\n                    data\n                });\n\n                res.json({\n                    success: true,\n                    message: \"Event tracked successfully (logged only)\",\n                    event_id: Date.now(),\n                    note: \"Database not available - check NETLIFY_DATABASE_URL environment variable\"\n                });\n            }\n\n        } catch (error) {\n            console.error(\"Error tracking event:\", error);\n            res.status(500).json({\n                success: false,\n                error: \"Failed to track event\",\n                details: error instanceof Error ? error.message : String(error)\n            });\n        }\n    });\n\n    return app;\n} "],"names":["dbConnected"],"mappings":"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"}