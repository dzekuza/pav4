generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("NETLIFY_DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String
  isAdmin              Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  affiliateClicks      AffiliateClick[]
  affiliateConversions AffiliateConversion[]
  commissions          Commission[]
  favorites            favorites[]
  sales                Sale[]
  searchHistory        SearchHistory[]

  @@map("users")
}

model SearchHistory {
  id        Int      @id @default(autoincrement())
  url       String
  title     String
  requestId String
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([timestamp])
  @@index([userId])
  @@index([userId, timestamp])
  @@map("search_history")
}

model LegacySearchHistory {
  id        Int      @id @default(autoincrement())
  userKey   String
  url       String
  timestamp DateTime @default(now())

  @@index([timestamp])
  @@index([userKey])
  @@map("legacy_search_history")
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model Business {
  id                  Int                  @id @default(autoincrement())
  name                String
  domain              String               @unique
  website             String
  description         String?
  logo                String?
  isActive            Boolean              @default(true)
  isVerified          Boolean              @default(false)
  contactEmail        String?
  contactPhone        String?
  address             String?
  country             String?
  category            String?
  commission          Float                @default(0)
  email               String               @unique
  password            String
  totalVisits         Int                  @default(0)
  totalPurchases      Int                  @default(0)
  totalRevenue        Float                @default(0)
  adminCommissionRate Float                @default(5.0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  affiliateId         String               @unique
  trackingVerified    Boolean              @default(false)
  shopifyAccessToken  String?
  shopifyShop         String?
  shopifyScopes       String?
  shopifyConnectedAt  DateTime?
  shopifyStatus       String?              @default("disconnected")
  clicks              BusinessClick[]
  conversions         BusinessConversion[]
  commissionRates     CommissionRate[]
  sales               Sale[]
  trackingEvents      TrackingEvent[]
  webhooks            Webhook[]
  domainVerifications DomainVerification[]
  products            Product[]

  @@map("businesses")
}

model DomainVerification {
  id                Int       @id @default(autoincrement())
  businessId        Int
  domain            String
  verificationToken String    @unique
  status            String    @default("pending") // pending, verified, expired
  expiresAt         DateTime
  verifiedAt        DateTime?
  createdAt         DateTime  @default(now())
  business          Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([domain])
  @@index([verificationToken])
  @@index([status])
  @@map("domain_verifications")
}

model ClickLog {
  id          Int      @id @default(autoincrement())
  affiliateId String
  productId   String
  userId      Int?
  timestamp   DateTime @default(now())
  userAgent   String?
  referrer    String?
  ip          String?
}

model Conversion {
  id         Int      @id @default(autoincrement())
  orderId    String
  amount     Float
  domain     String
  timestamp  DateTime @default(now())
  businessId String
  customerId String?

  @@index([businessId])
  @@index([timestamp])
}

model admins {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model affiliate_urls {
  id          Int      @id @default(autoincrement())
  name        String
  url         String
  description String?
  isActive    Boolean  @default(true)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  revenue     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model favorites {
  id            Int      @id @default(autoincrement())
  userId        Int
  title         String
  price         String?
  currency      String?
  url           String
  image         String?
  store         String?
  merchant      String?
  stock         String?
  rating        Float?
  reviewsCount  Int?
  deliveryPrice String?
  details       String?
  returnPolicy  String?
  condition     String   @default("New")
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  users         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId])
  @@index([userId, createdAt])
}

model AffiliateClick {
  id           Int      @id @default(autoincrement())
  productUrl   String
  productTitle String?
  productPrice String?
  retailer     String?
  userId       Int?
  sessionId    String?
  referrer     String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])

  @@map("affiliate_clicks")
}

model AffiliateConversion {
  id           Int      @id @default(autoincrement())
  productUrl   String
  productTitle String?
  productPrice String?
  retailer     String?
  userId       Int?
  sessionId    String?
  referrer     String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])

  @@map("affiliate_conversions")
}

model BusinessClick {
  id           Int      @id @default(autoincrement())
  businessId   Int
  productUrl   String
  productTitle String?
  productPrice String?
  retailer     String?
  sessionId    String?
  referrer     String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime @default(now())
  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_clicks")
}

model BusinessConversion {
  id           Int      @id @default(autoincrement())
  businessId   Int
  productUrl   String
  productTitle String?
  productPrice String?
  retailer     String?
  sessionId    String?
  referrer     String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime @default(now())
  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_conversions")
}

model Sale {
  id               Int          @id @default(autoincrement())
  orderId          String       @unique
  businessId       Int
  userId           Int?
  productUrl       String
  productTitle     String?
  productPrice     Float
  currency         String       @default("USD")
  retailer         String
  sessionId        String?
  referrer         String?
  utmSource        String?
  utmMedium        String?
  utmCampaign      String?
  ipAddress        String?
  userAgent        String?
  status           SaleStatus   @default(PENDING)
  commissionAmount Float?
  commissionRate   Float?
  commissionPaid   Boolean      @default(false)
  commissionPaidAt DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  commissions      Commission[]
  business         Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user             User?        @relation(fields: [userId], references: [id])

  @@index([businessId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([businessId, status])
  @@index([createdAt, status])
  @@index([userId, createdAt])
  @@map("sales")
}

model Commission {
  id        Int              @id @default(autoincrement())
  saleId    Int
  userId    Int
  amount    Float
  rate      Float
  status    CommissionStatus @default(PENDING)
  paidAt    DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  sale      Sale             @relation(fields: [saleId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([status, paidAt])
  @@index([userId, status])
  @@map("commissions")
}

model CommissionRate {
  id         Int      @id @default(autoincrement())
  businessId Int
  retailer   String
  rate       Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, retailer])
  @@map("commission_rates")
}

model Webhook {
  id            Int            @id @default(autoincrement())
  businessId    Int
  url           String
  secret        String
  events        String[]
  isActive      Boolean        @default(true)
  lastTriggered DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  webhookEvents WebhookEvent[]
  business      Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model WebhookEvent {
  id           Int           @id @default(autoincrement())
  webhookId    Int
  eventType    String
  payload      String
  status       WebhookStatus @default(PENDING)
  responseCode Int?
  responseBody String?
  retryCount   Int           @default(0)
  nextRetryAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  webhook      Webhook       @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([status])
  @@index([status, createdAt])
  @@index([webhookId, status])
  @@map("webhook_events")
}

model TrackingEvent {
  id          Int      @id @default(autoincrement())
  eventType   String
  businessId  Int
  affiliateId String
  platform    String   @default("universal")
  sessionId   String?
  userAgent   String?
  referrer    String?
  timestamp   DateTime @default(now())
  url         String?
  eventData   Json     @default("{}")
  ipAddress   String?
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([eventType])
  @@index([timestamp])
  @@index([affiliateId])
  @@index([affiliateId, timestamp])
  @@index([businessId, timestamp])
  @@index([eventType, timestamp])
  @@map("tracking_events")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model oauth_connections {
  id           Int       @id @default(autoincrement())
  userId       Int
  provider     String
  providerId   String
  accessToken  String?
  refreshToken String?
  tokenExpires DateTime?
  profile      Json?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime

  @@unique([userId, provider])
  @@index([provider])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model oauth_states {
  id          Int      @id @default(autoincrement())
  state       String   @unique
  oauthToken  String?
  oauthSecret String?
  provider    String
  userId      Int?
  redirectUri String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  @@index([provider])
  @@index([state])
  @@index([userId])
}

enum SaleStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum WebhookStatus {
  PENDING
  SENT
  FAILED
  RETRY
}

model Product {
  id          Int      @id @default(autoincrement())
  businessId  Int
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  url         String
  title       String
  description String?
  imageUrl    String?
  price       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model ShopifyEvent {
  id           Int      @id @default(autoincrement())
  event_id     String   @unique
  shop_domain  String
  topic        String
  triggered_at DateTime
  processed_at DateTime
  event_type   String
  resource_id  String
  payload      Json
  metadata     Json     @default("{}")

  @@index([event_id])
  @@index([shop_domain])
  @@index([topic])
  @@index([event_type])
  @@index([triggered_at])
  @@index([processed_at])
  @@index([shop_domain, topic])
  @@index([event_type, triggered_at])
  @@map("shopify_events")
}
