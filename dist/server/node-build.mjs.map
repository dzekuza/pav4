{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/services/database.ts","../../server/routes/n8n-scrape.ts","../../server/routes/auth.ts","../../server/middleware/auth.ts","../../server/routes/favorites.ts","../../server/routes/search-history.ts","../../server/routes/health.ts","../../server/services/location.ts","../../server/routes/affiliate.ts","../../server/routes/business.ts","../../server/routes/business-auth.ts","../../server/middleware/security.ts","../../server/middleware/business-auth.ts","../../server/routes/redirect.ts","../../server/routes/track-sale.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { PrismaClient } from \"@prisma/client\";\n\n// Global instance to prevent multiple Prisma Client instances in development\ndeclare global {\n  var __prisma: PrismaClient | undefined;\n}\n\n// Create a single Prisma Client instance\nconst createPrismaClient = () => {\n  return new PrismaClient({\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });\n};\n\nexport const prisma = globalThis.__prisma || createPrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.__prisma = prisma;\n}\n\n// User operations\nexport const userService = {\n  async createUser(data: {\n    email: string;\n    password: string;\n    isAdmin?: boolean;\n  }) {\n    return prisma.user.create({\n      data: {\n        email: data.email,\n        password: data.password,\n        isAdmin: data.isAdmin || false,\n      },\n    });\n  },\n\n  async findUserByEmail(email: string) {\n    return prisma.user.findUnique({\n      where: { email },\n    });\n  },\n\n  async findUserById(id: number) {\n    return prisma.user.findUnique({\n      where: { id },\n    });\n  },\n\n  async getAllUsers() {\n    return prisma.user.findMany({\n      select: {\n        id: true,\n        email: true,\n        isAdmin: true,\n        createdAt: true,\n        _count: {\n          select: {\n            searchHistory: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  },\n\n  async updateUser(\n    id: number,\n    data: Partial<{\n      email: string;\n      password: string;\n      isAdmin: boolean;\n    }>,\n  ) {\n    return prisma.user.update({\n      where: { id },\n      data,\n    });\n  },\n\n  async deleteUser(id: number) {\n    return prisma.user.delete({\n      where: { id },\n    });\n  },\n};\n\n// Admin operations\nexport const adminService = {\n  async createAdmin(data: {\n    email: string;\n    password: string;\n    name?: string;\n    role?: string;\n  }) {\n    return prisma.admin.create({\n      data: {\n        email: data.email,\n        password: data.password,\n        name: data.name,\n        role: data.role || \"admin\",\n      },\n    });\n  },\n\n  async findAdminByEmail(email: string) {\n    return prisma.admin.findUnique({\n      where: { email },\n    });\n  },\n\n  async findAdminById(id: number) {\n    return prisma.admin.findUnique({\n      where: { id },\n    });\n  },\n\n  async getAllAdmins() {\n    return prisma.admin.findMany({\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        role: true,\n        isActive: true,\n        createdAt: true,\n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  },\n\n  async updateAdmin(\n    id: number,\n    data: Partial<{\n      email: string;\n      password: string;\n      name: string;\n      role: string;\n      isActive: boolean;\n    }>,\n  ) {\n    return prisma.admin.update({\n      where: { id },\n      data,\n    });\n  },\n\n  async deleteAdmin(id: number) {\n    return prisma.admin.delete({\n      where: { id },\n    });\n  },\n};\n\n// Search history operations\nexport const searchHistoryService = {\n  async addSearch(\n    userId: number,\n    data: {\n      url: string;\n      title: string;\n      requestId: string;\n    },\n  ) {\n    return prisma.searchHistory.create({\n      data: {\n        userId,\n        url: data.url,\n        title: data.title,\n        requestId: data.requestId,\n      },\n    });\n  },\n\n  async getUserSearchHistory(userId: number, limit: number = 20) {\n    return prisma.searchHistory.findMany({\n      where: { userId },\n      orderBy: { timestamp: \"desc\" },\n      take: limit,\n    });\n  },\n\n  async deleteUserSearch(userId: number, searchId: number) {\n    return prisma.searchHistory.delete({\n      where: {\n        id: searchId,\n        userId, // Ensure user can only delete their own searches\n      },\n    });\n  },\n\n  async clearUserSearchHistory(userId: number) {\n    return prisma.searchHistory.deleteMany({\n      where: { userId },\n    });\n  },\n\n  // Clean up old search history (older than X days)\n  async cleanupOldSearches(daysToKeep: number = 90) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n    return prisma.searchHistory.deleteMany({\n      where: {\n        timestamp: {\n          lt: cutoffDate,\n        },\n      },\n    });\n  },\n};\n\n// Legacy search history for non-authenticated users\nexport const legacySearchHistoryService = {\n  async addSearch(userKey: string, url: string) {\n    return prisma.legacySearchHistory.create({\n      data: {\n        userKey,\n        url,\n      },\n    });\n  },\n\n  async getUserSearchHistory(userKey: string, limit: number = 10) {\n    return prisma.legacySearchHistory.findMany({\n      where: { userKey },\n      orderBy: { timestamp: \"desc\" },\n      take: limit,\n    });\n  },\n\n  async cleanupOldLegacySearches(daysToKeep: number = 30) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n    return prisma.legacySearchHistory.deleteMany({\n      where: {\n        timestamp: {\n          lt: cutoffDate,\n        },\n      },\n    });\n  },\n};\n\n// Database health check\nexport const healthCheck = {\n  async checkConnection() {\n    try {\n      await prisma.$queryRaw`SELECT 1`;\n      return { status: \"healthy\", message: \"Database connection successful\" };\n    } catch (error) {\n      return {\n        status: \"unhealthy\",\n        message: \"Database connection failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  },\n\n  async getStats() {\n    const [userCount, searchCount, legacySearchCount] = await Promise.all([\n      prisma.user.count(),\n      prisma.searchHistory.count(),\n      prisma.legacySearchHistory.count(),\n    ]);\n\n    return {\n      users: userCount,\n      searches: searchCount,\n      legacySearches: legacySearchCount,\n    };\n  },\n};\n\n// Affiliate URL operations\nexport const affiliateService = {\n  async createAffiliateUrl(data: {\n    name: string;\n    url: string;\n    description?: string;\n    isActive?: boolean;\n  }) {\n    return prisma.affiliateUrl.create({\n      data: {\n        name: data.name,\n        url: data.url,\n        description: data.description,\n        isActive: data.isActive ?? true,\n      },\n    });\n  },\n\n  async getAllAffiliateUrls() {\n    return prisma.affiliateUrl.findMany({\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  },\n\n  async getAffiliateUrlById(id: number) {\n    return prisma.affiliateUrl.findUnique({\n      where: { id },\n    });\n  },\n\n  async updateAffiliateUrl(\n    id: number,\n    data: Partial<{\n      name: string;\n      url: string;\n      description: string;\n      isActive: boolean;\n    }>,\n  ) {\n    return prisma.affiliateUrl.update({\n      where: { id },\n      data,\n    });\n  },\n\n  async deleteAffiliateUrl(id: number) {\n    return prisma.affiliateUrl.delete({\n      where: { id },\n    });\n  },\n\n  async incrementClicks(id: number) {\n    return prisma.affiliateUrl.update({\n      where: { id },\n      data: {\n        clicks: {\n          increment: 1,\n        },\n      },\n    });\n  },\n\n  async addConversion(id: number, revenue: number = 0) {\n    return prisma.affiliateUrl.update({\n      where: { id },\n      data: {\n        conversions: {\n          increment: 1,\n        },\n        revenue: {\n          increment: revenue,\n        },\n      },\n    });\n  },\n\n  async getAffiliateStats() {\n    const [totalUrls, activeUrls, totalClicks, totalConversions, totalRevenue] = await Promise.all([\n      prisma.affiliateUrl.count(),\n      prisma.affiliateUrl.count({ where: { isActive: true } }),\n      prisma.affiliateUrl.aggregate({\n        _sum: { clicks: true },\n      }),\n      prisma.affiliateUrl.aggregate({\n        _sum: { conversions: true },\n      }),\n      prisma.affiliateUrl.aggregate({\n        _sum: { revenue: true },\n      }),\n    ]);\n\n    return {\n      totalUrls,\n      activeUrls,\n      totalClicks: totalClicks._sum.clicks || 0,\n      totalConversions: totalConversions._sum.conversions || 0,\n      totalRevenue: totalRevenue._sum.revenue || 0,\n    };\n  },\n};\n\n// Business operations\nexport const businessService = {\n  async createBusiness(data: {\n    name: string;\n    domain: string;\n    website: string;\n    description?: string;\n    logo?: string;\n    contactEmail?: string;\n    contactPhone?: string;\n    address?: string;\n    country?: string;\n    category?: string;\n    commission?: number;\n    email: string;\n    password: string;\n  }) {\n    return prisma.business.create({\n      data: {\n        name: data.name,\n        domain: data.domain.toLowerCase(),\n        website: data.website,\n        description: data.description,\n        logo: data.logo,\n        contactEmail: data.contactEmail,\n        contactPhone: data.contactPhone,\n        address: data.address,\n        country: data.country,\n        category: data.category,\n        commission: data.commission || 0,\n        email: data.email,\n        password: data.password,\n      },\n    });\n  },\n\n  async findBusinessByDomain(domain: string) {\n    return prisma.business.findUnique({\n      where: { domain: domain.toLowerCase() },\n    });\n  },\n\n  async getAllBusinesses() {\n    return prisma.business.findMany({\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  },\n\n  async getActiveBusinesses() {\n    return prisma.business.findMany({\n      where: { isActive: true },\n      orderBy: {\n        name: \"asc\",\n      },\n    });\n  },\n\n  async updateBusiness(\n    id: number,\n    data: Partial<{\n      name: string;\n      domain: string;\n      website: string;\n      description: string;\n      logo: string;\n      isActive: boolean;\n      isVerified: boolean;\n      contactEmail: string;\n      contactPhone: string;\n      address: string;\n      country: string;\n      category: string;\n      commission: number;\n    }>,\n  ) {\n    return prisma.business.update({\n      where: { id },\n      data,\n    });\n  },\n\n  async deleteBusiness(id: number) {\n    return prisma.business.delete({\n      where: { id },\n    });\n  },\n\n  async verifyBusiness(id: number) {\n    return prisma.business.update({\n      where: { id },\n      data: { isVerified: true },\n    });\n  },\n\n  async getBusinessStats() {\n    const [totalBusinesses, activeBusinesses, verifiedBusinesses] = await Promise.all([\n      prisma.business.count(),\n      prisma.business.count({ where: { isActive: true } }),\n      prisma.business.count({ where: { isVerified: true } }),\n    ]);\n\n    return {\n      totalBusinesses,\n      activeBusinesses,\n      verifiedBusinesses,\n    };\n  },\n\n  // Business authentication\n  async findBusinessByEmail(email: string) {\n    return prisma.business.findUnique({\n      where: { email: email.toLowerCase() },\n    });\n  },\n\n  async findBusinessById(id: number) {\n    return prisma.business.findUnique({\n      where: { id },\n    });\n  },\n\n  // Business statistics\n  async updateBusinessStats(businessId: number, data: {\n    totalVisits?: number;\n    totalPurchases?: number;\n    totalRevenue?: number;\n  }) {\n    return prisma.business.update({\n      where: { id: businessId },\n      data,\n    });\n  },\n\n  async incrementBusinessVisits(businessId: number) {\n    return prisma.business.update({\n      where: { id: businessId },\n      data: {\n        totalVisits: {\n          increment: 1,\n        },\n      },\n    });\n  },\n\n  async incrementBusinessPurchases(businessId: number, revenue: number) {\n    return prisma.business.update({\n      where: { id: businessId },\n      data: {\n        totalPurchases: {\n          increment: 1,\n        },\n        totalRevenue: {\n          increment: revenue,\n        },\n      },\n    });\n  },\n\n  async getBusinessStatistics(businessId: number) {\n    const business = await prisma.business.findUnique({\n      where: { id: businessId },\n      select: {\n        id: true,\n        name: true,\n        domain: true,\n        totalVisits: true,\n        totalPurchases: true,\n        totalRevenue: true,\n        adminCommissionRate: true,\n      },\n    });\n\n    if (!business) return null;\n\n    const projectedFee = (business.totalRevenue * business.adminCommissionRate) / 100;\n    const averageOrderValue = business.totalPurchases > 0 ? business.totalRevenue / business.totalPurchases : 0;\n\n    return {\n      ...business,\n      projectedFee,\n      averageOrderValue,\n      conversionRate: business.totalVisits > 0 ? (business.totalPurchases / business.totalVisits) * 100 : 0,\n    };\n  },\n\n  async updateAdminCommissionRate(businessId: number, commissionRate: number) {\n    return prisma.business.update({\n      where: { id: businessId },\n      data: { adminCommissionRate: commissionRate },\n    });\n  },\n\n  async updateBusinessPassword(businessId: number, password: string) {\n    const bcrypt = require('bcryptjs');\n    const hashedPassword = await bcrypt.hash(password, 10);\n    \n    return prisma.business.update({\n      where: { id: businessId },\n      data: { password: hashedPassword },\n    });\n  },\n\n  async getBusinessClickLogs(businessId: number) {\n    // Get the business and its domain(s)\n    const business = await prisma.business.findUnique({ where: { id: businessId } });\n    if (!business || !business.domain) return [];\n    const domains = [business.domain.toLowerCase().replace(/^www\\./, \"\")];\n    // Find all ClickLog entries where the url domain matches the business domain\n    const logs = await prisma.clickLog.findMany();\n    return logs.filter(log => {\n      if (!log.productId) return false;\n      try {\n        const url = new URL(log.productId);\n        const domain = url.hostname.toLowerCase().replace(/^www\\./, \"\");\n        return domains.includes(domain);\n      } catch {\n        return false;\n      }\n    });\n  },\n};\n\n// Click log operations\nexport const clickLogService = {\n  async logClick(data: {\n    affiliateId: string;\n    productId: string;\n    userId?: number;\n    userAgent?: string;\n    referrer?: string;\n    ip?: string;\n  }) {\n    return prisma.clickLog.create({\n      data: {\n        affiliateId: data.affiliateId,\n        productId: data.productId,\n        userId: data.userId,\n        userAgent: data.userAgent,\n        referrer: data.referrer,\n        ip: data.ip,\n      },\n    });\n  },\n\n  // TODO: Implement real product/business lookup\n  async getProductUrlByAffiliateAndProductId(affiliateId: string, productId: string): Promise<string | null> {\n    // Try to find the affiliate by id (as int) or name\n    let affiliate: any = null;\n    const idNum = parseInt(affiliateId, 10);\n    if (!isNaN(idNum)) {\n      affiliate = await prisma.affiliateUrl.findUnique({ where: { id: idNum } });\n    }\n    if (!affiliate) {\n      affiliate = await prisma.affiliateUrl.findFirst({ where: { name: affiliateId } });\n    }\n    if (!affiliate) return null;\n    // If the affiliate url contains a placeholder for productId, replace it\n    if (affiliate.url.includes('{productId}')) {\n      return affiliate.url.replace('{productId}', productId);\n    }\n    // Otherwise, append productId as a slug or query param\n    if (affiliate.url.endsWith('/')) {\n      return affiliate.url + productId;\n    }\n    if (affiliate.url.includes('?')) {\n      return affiliate.url + '&product=' + productId;\n    }\n    return affiliate.url + '/' + productId;\n  },\n};\n\n// Settings operations\nexport const settingsService = {\n  async getSuggestionFilterEnabled(): Promise<boolean> {\n    const setting = await prisma.settings.findUnique({ where: { key: 'suggestionFilterEnabled' } });\n    return setting ? setting.value === 'true' : true; // Default: enabled\n  },\n  async setSuggestionFilterEnabled(enabled: boolean): Promise<void> {\n    await prisma.settings.upsert({\n      where: { key: 'suggestionFilterEnabled' },\n      update: { value: enabled ? 'true' : 'false' },\n      create: { key: 'suggestionFilterEnabled', value: enabled ? 'true' : 'false' },\n    });\n  },\n};\n\n// Graceful shutdown\nexport const gracefulShutdown = async () => {\n  try {\n    await prisma.$disconnect();\n    console.log('Database connection closed gracefully');\n  } catch (error) {\n    console.error('Error during database shutdown:', error);\n  }\n};\n\n// Health check for database connection\nexport const checkDatabaseConnection = async () => {\n  try {\n    await prisma.$queryRaw`SELECT 1`;\n    return { status: 'connected', message: 'Database connection successful' };\n  } catch (error) {\n    return { \n      status: 'error', \n      message: 'Database connection failed',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n};\n","// Main app scraping route - uses the same workflow logic as N8N but implemented directly\n// This route provides real product URLs from search results instead of generated URLs\n\nimport express from \"express\";\nimport axios from \"axios\";\nimport { ProductData, PriceComparison } from \"../../shared/api\";\nimport { Request, Response } from \"express\";\nimport { searchHistoryService, businessService, settingsService } from \"../services/database\";\nimport { requireAuth } from \"../middleware/auth\";\n\n// --- Product patterns for better product parsing ---\nconst productPatterns = [\n  { pattern: /sonos-ace/i, brand: 'sonos', model: 'ace', category: 'headphones' },\n  { pattern: /sonos-era/i, brand: 'sonos', model: 'era', category: 'speakers' },\n  { pattern: /sonos-beam/i, brand: 'sonos', model: 'beam', category: 'soundbar' },\n  { pattern: /sonos-arc/i, brand: 'sonos', model: 'arc', category: 'soundbar' },\n  { pattern: /sonos-sub/i, brand: 'sonos', model: 'sub', category: 'subwoofer' },\n  { pattern: /sonos-one/i, brand: 'sonos', model: 'one', category: 'speakers' },\n  { pattern: /sonos-five/i, brand: 'sonos', model: 'five', category: 'speakers' },\n  { pattern: /sonos-move/i, brand: 'sonos', model: 'move', category: 'portable-speaker' },\n  { pattern: /sonos-roam/i, brand: 'sonos', model: 'roam', category: 'portable-speaker' },\n  { pattern: /bose-quietcomfort/i, brand: 'bose', model: 'quietcomfort', category: 'headphones' },\n  { pattern: /bose-soundlink/i, brand: 'bose', model: 'soundlink', category: 'speakers' },\n  { pattern: /bose-home-speaker/i, brand: 'bose', model: 'home-speaker', category: 'speakers' },\n  { pattern: /bose-sport/i, brand: 'bose', model: 'sport', category: 'headphones' },\n  { pattern: /jbl-charge/i, brand: 'jbl', model: 'charge', category: 'speakers' }\n];\n\n// --- Utility functions ---\n// Use countryCode variable instead of getCountryCode function.\n\n// Utility: Extract price as number from string.\nfunction extractPrice(text: string): number | null {\n  const match = text.match(/(\\d{1,4}[.,]?\\d{2})/);\n  return match ? parseFloat(match[1].replace(',', '.')) : null;\n}\n\nfunction extractDirectRetailerUrl(link: string): string {\n  if (!link) return '';\n  \n  // Handle Google Shopping links\n  if (link.includes('google.com/shopping/product/')) {\n    // For Google Shopping links, we'll keep them as they are valid product pages\n    return link;\n  }\n  \n  try {\n    const url = new URL(link);\n    return `${url.origin}${url.pathname}`;\n  } catch {\n    return link;\n  }\n}\n\nfunction extractStoreName(link: string): string {\n  if (!link) return 'unknown';\n  \n  // Handle Google Shopping links\n  if (link.includes('google.com/shopping/product/')) {\n    return 'Google Shopping';\n  }\n  \n  try {\n    return new URL(link).hostname.replace('www.', '');\n  } catch {\n    return 'unknown';\n  }\n}\n\nconst router = express.Router();\n\n// Remove authentication middleware from router - make search public\n// Authentication will only be applied when saving search history\n\n// SearchAPI configuration (Google Search API)\nconst SEARCH_API_KEY = process.env.SEARCH_API_KEY || process.env.SERP_API_KEY;\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n\n// Debug logging\nconsole.log(\"SearchAPI Key loaded:\", SEARCH_API_KEY ? \"Yes\" : \"No\");\n\n// Test Gemini API key on startup\nasync function testGeminiAPIKey(): Promise<boolean> {\n  if (!GEMINI_API_KEY) return false;\n  \n  try {\n    const response = await axios.post(\n      'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent',\n      {\n        contents: [{ parts: [{ text: \"Hello\" }] }]\n      },\n      {\n        params: { key: GEMINI_API_KEY },\n        headers: { 'Content-Type': 'application/json' },\n        timeout: 10000\n      }\n    );\n    \n    if (response.status === 200) {\n      console.log(\"✅ Gemini API key is valid\");\n      return true;\n    } else {\n      console.error(\"❌ Gemini API test failed with status:\", response.status);\n      return false;\n    }\n  } catch (error) {\n    console.error(\"❌ Gemini API test failed:\", error);\n    if (axios.isAxiosError(error)) {\n      console.error('Response status:', error.response?.status);\n      console.error('Response data:', error.response?.data);\n    }\n    return false;\n  }\n}\n\n// Test the API key on startup\ntestGeminiAPIKey().then(isValid => {\n  if (!isValid) {\n    console.warn(\"⚠️ Gemini API key appears to be invalid, will use fallback methods\");\n    geminiFailureCount = MAX_GEMINI_FAILURES; // Disable Gemini immediately\n  }\n});\n\n// Track Gemini API failures to disable it if it's consistently failing\nlet geminiFailureCount = 0;\nconst MAX_GEMINI_FAILURES = 3;\n\n// Helper function to safely parse JSON from Gemini responses\nfunction safeParseGeminiJSON(text: string, fallback: any[]): any[] {\n  try {\n    // Extract JSON from markdown code blocks if present\n    let jsonText = text;\n    if (text.includes('```json')) {\n      const jsonMatch = text.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n      if (jsonMatch) {\n        jsonText = jsonMatch[1].trim();\n      }\n    } else if (text.includes('```')) {\n      // Handle other code blocks\n      const codeMatch = text.match(/```\\s*([\\s\\S]*?)\\s*```/);\n      if (codeMatch) {\n        jsonText = codeMatch[1].trim();\n      }\n    }\n    \n    const parsed = JSON.parse(jsonText);\n    if (Array.isArray(parsed)) {\n      return parsed;\n    } else {\n      console.error('Gemini returned non-array response:', parsed);\n      return fallback;\n    }\n  } catch (parseError) {\n    console.error('Failed to parse Gemini response as JSON:', parseError);\n    console.error('Raw response text:', text);\n    return fallback;\n  }\n}\n\n// Use Gemini to clean up product titles for better search results\nasync function cleanProductTitleWithGemini(productTitle: string): Promise<string> {\n  if (!GEMINI_API_KEY || geminiFailureCount >= MAX_GEMINI_FAILURES) {\n    console.log(\"Gemini API key not available or too many failures, using fallback title cleaning\");\n    return cleanProductTitleFallback(productTitle);\n  }\n\n  try {\n    const prompt = `Clean this product title for better search results. Remove SEO words, marketing terms, and keep only the essential product information (brand, model, type). Return only the cleaned title, nothing else.\n\nOriginal title: \"${productTitle}\"\n\nExamples:\n- \"Sonos Ace: Wireless Over Ear Headphones with Noise Cancellation\" → \"Sonos Ace Wireless Headphones\"\n- \"Samsung BESPOKE Jet Bot AI+ Robot Vacuum Cleaner with Clean Station\" → \"Samsung BESPOKE Jet Bot Vacuum\"\n- \"Apple iPhone 15 Pro Max 256GB Titanium - Latest Model with Advanced Camera\" → \"Apple iPhone 15 Pro Max\"\n\nCleaned title:`;\n\n    const response = await axios.post(\n      'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent',\n      {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      },\n      {\n        params: { key: GEMINI_API_KEY },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        timeout: 30000, // 30 second timeout\n        maxRedirects: 5\n      }\n    );\n\n    const data = response.data;\n    const cleanedTitle = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();\n    \n    if (cleanedTitle && cleanedTitle.length > 0) {\n      console.log(`Gemini cleaned title: \"${productTitle}\" → \"${cleanedTitle}\"`);\n      return cleanedTitle;\n    } else {\n      console.log(\"Gemini returned empty response, using fallback\");\n      return cleanProductTitleFallback(productTitle);\n    }\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n    if (axios.isAxiosError(error)) {\n      console.error('Response status:', error.response?.status);\n      console.error('Response data:', error.response?.data);\n    }\n    geminiFailureCount++;\n    console.log(`Gemini failure count: ${geminiFailureCount}/${MAX_GEMINI_FAILURES}`);\n    console.log(\"Using fallback title cleaning\");\n    return cleanProductTitleFallback(productTitle);\n  }\n}\n\n// Fallback function to clean product titles without Gemini\nfunction cleanProductTitleFallback(productTitle: string): string {\n  if (!productTitle) return \"\";\n  \n  // Remove common SEO words and marketing terms\n  const seoWords = [\n    'with', 'and', 'the', 'latest', 'new', 'best', 'top', 'premium', 'advanced',\n    'professional', 'pro', 'plus', 'max', 'ultra', 'extreme', 'ultimate',\n    'wireless', 'bluetooth', 'smart', 'intelligent', 'automatic', 'automatic',\n    'noise', 'cancelling', 'cancellation', 'active', 'passive', 'hybrid',\n    'over-ear', 'on-ear', 'in-ear', 'true', 'wireless', 'earbuds', 'headphones',\n    'speakers', 'sound', 'audio', 'music', 'bass', 'treble', 'clarity',\n    'crystal', 'clear', 'sharp', 'vivid', 'brilliant', 'stunning', 'amazing',\n    'incredible', 'fantastic', 'excellent', 'perfect', 'ideal', 'optimal',\n    'superior', 'premium', 'high-quality', 'high', 'quality', 'durable',\n    'long-lasting', 'reliable', 'trusted', 'popular', 'favorite', 'choice',\n    'recommended', 'award-winning', 'award', 'winning', 'best-selling',\n    'best', 'selling', 'trending', 'viral', 'hot', 'cool', 'awesome',\n    'great', 'good', 'nice', 'beautiful', 'elegant', 'stylish', 'modern',\n    'contemporary', 'classic', 'traditional', 'vintage', 'retro', 'unique',\n    'special', 'exclusive', 'limited', 'edition', 'collector', 'series',\n    'collection', 'set', 'bundle', 'package', 'kit', 'combo', 'deal',\n    'offer', 'discount', 'sale', 'clearance', 'outlet', 'refurbished',\n    'used', 'pre-owned', 'second-hand', 'like-new', 'mint', 'condition',\n    'warranty', 'guarantee', 'certified', 'authentic', 'genuine', 'original',\n    'official', 'licensed', 'authorized', 'dealer', 'reseller', 'distributor',\n    'manufacturer', 'brand', 'company', 'corporation', 'inc', 'ltd', 'llc',\n    'co', 'corp', 'international', 'global', 'worldwide', 'imported',\n    'domestic', 'local', 'regional', 'national', 'federal', 'state',\n    'provincial', 'municipal', 'city', 'town', 'village', 'community',\n    'neighborhood', 'district', 'area', 'zone', 'region', 'territory',\n    'country', 'nation', 'continent', 'hemisphere', 'planet', 'earth',\n    'world', 'universe', 'galaxy', 'solar', 'system', 'space', 'cosmos',\n    'nature', 'natural', 'organic', 'biological', 'chemical', 'physical',\n    'mechanical', 'electrical', 'electronic', 'digital', 'analog', 'hybrid',\n    'mixed', 'combined', 'integrated', 'unified', 'consolidated', 'merged',\n    'fused', 'blended', 'mixed', 'combined', 'integrated', 'unified',\n    'consolidated', 'merged', 'fused', 'blended', 'mixed', 'combined'\n  ];\n  \n  let cleanedTitle = productTitle;\n  \n  // Remove SEO words (case insensitive)\n  const seoWordsRegex = new RegExp(`\\\\b(${seoWords.join('|')})\\\\b`, 'gi');\n  cleanedTitle = cleanedTitle.replace(seoWordsRegex, '');\n  \n  // Remove extra spaces and punctuation\n  cleanedTitle = cleanedTitle.replace(/\\s+/g, ' ').trim();\n  cleanedTitle = cleanedTitle.replace(/^[:\\-\\s]+|[:\\-\\s]+$/g, '');\n  \n  // Remove common marketing phrases\n  const marketingPhrases = [\n    /with\\s+[a-z\\s]+$/i,\n    /featuring\\s+[a-z\\s]+$/i,\n    /including\\s+[a-z\\s]+$/i,\n    /comes\\s+with\\s+[a-z\\s]+$/i,\n    /includes\\s+[a-z\\s]+$/i,\n    /packaged\\s+with\\s+[a-z\\s]+$/i,\n    /bundle\\s+with\\s+[a-z\\s]+$/i,\n    /set\\s+with\\s+[a-z\\s]+$/i,\n    /kit\\s+with\\s+[a-z\\s]+$/i,\n    /combo\\s+with\\s+[a-z\\s]+$/i,\n    /deal\\s+with\\s+[a-z\\s]+$/i,\n    /offer\\s+with\\s+[a-z\\s]+$/i,\n    /discount\\s+with\\s+[a-z\\s]+$/i,\n    /sale\\s+with\\s+[a-z\\s]+$/i,\n    /clearance\\s+with\\s+[a-z\\s]+$/i,\n    /outlet\\s+with\\s+[a-z\\s]+$/i,\n    /refurbished\\s+with\\s+[a-z\\s]+$/i,\n    /used\\s+with\\s+[a-z\\s]+$/i,\n    /pre-owned\\s+with\\s+[a-z\\s]+$/i,\n    /second-hand\\s+with\\s+[a-z\\s]+$/i,\n    /like-new\\s+with\\s+[a-z\\s]+$/i,\n    /mint\\s+with\\s+[a-z\\s]+$/i,\n    /condition\\s+with\\s+[a-z\\s]+$/i,\n    /warranty\\s+with\\s+[a-z\\s]+$/i,\n    /guarantee\\s+with\\s+[a-z\\s]+$/i,\n    /certified\\s+with\\s+[a-z\\s]+$/i,\n    /authentic\\s+with\\s+[a-z\\s]+$/i,\n    /genuine\\s+with\\s+[a-z\\s]+$/i,\n    /original\\s+with\\s+[a-z\\s]+$/i,\n    /official\\s+with\\s+[a-z\\s]+$/i,\n    /licensed\\s+with\\s+[a-z\\s]+$/i,\n    /authorized\\s+with\\s+[a-z\\s]+$/i,\n    /dealer\\s+with\\s+[a-z\\s]+$/i,\n    /reseller\\s+with\\s+[a-z\\s]+$/i,\n    /distributor\\s+with\\s+[a-z\\s]+$/i,\n    /manufacturer\\s+with\\s+[a-z\\s]+$/i,\n    /brand\\s+with\\s+[a-z\\s]+$/i,\n    /company\\s+with\\s+[a-z\\s]+$/i,\n    /corporation\\s+with\\s+[a-z\\s]+$/i,\n    /inc\\s+with\\s+[a-z\\s]+$/i,\n    /ltd\\s+with\\s+[a-z\\s]+$/i,\n    /llc\\s+with\\s+[a-z\\s]+$/i,\n    /co\\s+with\\s+[a-z\\s]+$/i,\n    /corp\\s+with\\s+[a-z\\s]+$/i,\n    /international\\s+with\\s+[a-z\\s]+$/i,\n    /global\\s+with\\s+[a-z\\s]+$/i,\n    /worldwide\\s+with\\s+[a-z\\s]+$/i,\n    /imported\\s+with\\s+[a-z\\s]+$/i,\n    /domestic\\s+with\\s+[a-z\\s]+$/i,\n    /local\\s+with\\s+[a-z\\s]+$/i,\n    /regional\\s+with\\s+[a-z\\s]+$/i,\n    /national\\s+with\\s+[a-z\\s]+$/i,\n    /federal\\s+with\\s+[a-z\\s]+$/i,\n    /state\\s+with\\s+[a-z\\s]+$/i,\n    /provincial\\s+with\\s+[a-z\\s]+$/i,\n    /municipal\\s+with\\s+[a-z\\s]+$/i,\n    /city\\s+with\\s+[a-z\\s]+$/i,\n    /town\\s+with\\s+[a-z\\s]+$/i,\n    /village\\s+with\\s+[a-z\\s]+$/i,\n    /community\\s+with\\s+[a-z\\s]+$/i,\n    /neighborhood\\s+with\\s+[a-z\\s]+$/i,\n    /district\\s+with\\s+[a-z\\s]+$/i,\n    /area\\s+with\\s+[a-z\\s]+$/i,\n    /zone\\s+with\\s+[a-z\\s]+$/i,\n    /region\\s+with\\s+[a-z\\s]+$/i,\n    /territory\\s+with\\s+[a-z\\s]+$/i,\n    /country\\s+with\\s+[a-z\\s]+$/i,\n    /nation\\s+with\\s+[a-z\\s]+$/i,\n    /continent\\s+with\\s+[a-z\\s]+$/i,\n    /hemisphere\\s+with\\s+[a-z\\s]+$/i,\n    /planet\\s+with\\s+[a-z\\s]+$/i,\n    /earth\\s+with\\s+[a-z\\s]+$/i,\n    /world\\s+with\\s+[a-z\\s]+$/i,\n    /universe\\s+with\\s+[a-z\\s]+$/i,\n    /galaxy\\s+with\\s+[a-z\\s]+$/i,\n    /solar\\s+with\\s+[a-z\\s]+$/i,\n    /system\\s+with\\s+[a-z\\s]+$/i,\n    /space\\s+with\\s+[a-z\\s]+$/i,\n    /cosmos\\s+with\\s+[a-z\\s]+$/i,\n    /nature\\s+with\\s+[a-z\\s]+$/i,\n    /natural\\s+with\\s+[a-z\\s]+$/i,\n    /organic\\s+with\\s+[a-z\\s]+$/i,\n    /biological\\s+with\\s+[a-z\\s]+$/i,\n    /chemical\\s+with\\s+[a-z\\s]+$/i,\n    /physical\\s+with\\s+[a-z\\s]+$/i,\n    /mechanical\\s+with\\s+[a-z\\s]+$/i,\n    /electrical\\s+with\\s+[a-z\\s]+$/i,\n    /electronic\\s+with\\s+[a-z\\s]+$/i,\n    /digital\\s+with\\s+[a-z\\s]+$/i,\n    /analog\\s+with\\s+[a-z\\s]+$/i,\n    /hybrid\\s+with\\s+[a-z\\s]+$/i,\n    /mixed\\s+with\\s+[a-z\\s]+$/i,\n    /combined\\s+with\\s+[a-z\\s]+$/i,\n    /integrated\\s+with\\s+[a-z\\s]+$/i,\n    /unified\\s+with\\s+[a-z\\s]+$/i,\n    /consolidated\\s+with\\s+[a-z\\s]+$/i,\n    /merged\\s+with\\s+[a-z\\s]+$/i,\n    /fused\\s+with\\s+[a-z\\s]+$/i,\n    /blended\\s+with\\s+[a-z\\s]+$/i\n  ];\n  \n  for (const phrase of marketingPhrases) {\n    cleanedTitle = cleanedTitle.replace(phrase, '');\n  }\n  \n  // Remove extra spaces and punctuation again\n  cleanedTitle = cleanedTitle.replace(/\\s+/g, ' ').trim();\n  cleanedTitle = cleanedTitle.replace(/^[:\\-\\s]+|[:\\-\\s]+$/g, '');\n  \n  console.log(`Fallback cleaned title: \"${productTitle}\" → \"${cleanedTitle}\"`);\n  return cleanedTitle;\n}\n\n// Add rate limiting utility\nlet lastSearchApiCall = 0;\nconst SEARCH_API_RATE_LIMIT = 1000; // 1 second between calls\nlet isRateLimited = false;\nlet rateLimitResetTime = 0;\n\nasync function makeSearchApiRequest(url: string): Promise<any> {\n  const now = Date.now();\n  \n  // Check if we're currently rate limited\n  if (isRateLimited && now < rateLimitResetTime) {\n    const remainingTime = rateLimitResetTime - now;\n    console.log(`Rate limited, waiting ${remainingTime}ms before retry`);\n    await new Promise(resolve => setTimeout(resolve, remainingTime));\n    isRateLimited = false;\n  }\n  \n  const timeSinceLastCall = now - lastSearchApiCall;\n  \n  if (timeSinceLastCall < SEARCH_API_RATE_LIMIT) {\n    const delay = SEARCH_API_RATE_LIMIT - timeSinceLastCall;\n    console.log(`Rate limiting: waiting ${delay}ms before next SearchAPI call`);\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n  \n  lastSearchApiCall = Date.now();\n  \n  try {\n    const response = await axios.get(url, {\n      timeout: 15000, // 15 second timeout\n      maxRedirects: 5,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; PriceComparisonBot/1.0)'\n      }\n    });\n    \n    if (response.status === 429) {\n      console.warn(\"SearchAPI rate limit exceeded, setting global rate limit for 30 seconds\");\n      isRateLimited = true;\n      rateLimitResetTime = now + 30000; // 30 seconds\n      return null; // Signal to try fallback\n    }\n    \n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 429) {\n        console.warn(\"SearchAPI rate limit exceeded, setting global rate limit for 30 seconds\");\n        isRateLimited = true;\n        rateLimitResetTime = now + 30000; // 30 seconds\n        return null; // Signal to try fallback\n      }\n      console.error(`SearchAPI request failed: ${error.response?.status} ${error.response?.statusText}`);\n    } else {\n      console.error(\"SearchAPI request error:\", error);\n    }\n    return null;\n  }\n}\n\nasync function testSearchAPIKey(): Promise<boolean> {\n  if (!SEARCH_API_KEY) return false;\n  \n  try {\n    const testUrl = `https://www.searchapi.io/api/v1/search?engine=google&q=test&api_key=${SEARCH_API_KEY}`;\n    const response = await axios.get(testUrl, {\n      timeout: 10000, // 10 second timeout\n      maxRedirects: 3\n    });\n    \n    if (response.status === 200) {\n      console.log(\"✅ SearchAPI key is valid\");\n      return true;\n    } else if (response.status === 401) {\n      console.error(\"❌ SearchAPI key is invalid or expired\");\n      return false;\n    } else if (response.status === 429) {\n      console.warn(\"⚠️ SearchAPI rate limit exceeded during test\");\n      return false;\n    } else {\n      console.warn(`⚠️ SearchAPI test returned status: ${response.status}`);\n      return false;\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 401) {\n        console.error(\"❌ SearchAPI key is invalid or expired\");\n        return false;\n      } else if (error.response?.status === 429) {\n        console.warn(\"⚠️ SearchAPI rate limit exceeded during test\");\n        return false;\n      } else {\n        console.error(`❌ SearchAPI test failed: ${error.response?.status} ${error.response?.statusText}`);\n        return false;\n      }\n    } else {\n      console.error(\"❌ SearchAPI test failed:\", error);\n      return false;\n    }\n  }\n}\n\n// Extract product model from URL (e.g., BDFS26040XQ from Lithuanian dishwasher URL)\nfunction extractProductModel(url: string): string | null {\n  try {\n    const urlObj = new URL(url);\n    const pathname = urlObj.pathname;\n    \n    // Look for product model patterns in the URL path\n    const modelPatterns = [\n      /[A-Z]{2,3}\\d{6,8}[A-Z]?/g, // Pattern like BDFS26040XQ\n      /\\d{8,12}/g, // Long numeric codes\n      /[A-Z]{2,4}\\d{4,6}[A-Z]?/g, // Shorter patterns\n    ];\n    \n    for (const pattern of modelPatterns) {\n      const matches = pathname.match(pattern);\n      if (matches && matches.length > 0) {\n        console.log(`Found model in Lithuanian URL path: ${matches[0]}`);\n        return matches[0];\n      }\n    }\n    \n    // Also check the full URL for patterns\n    const fullUrlMatches = url.match(/[A-Z]{2,3}\\d{6,8}[A-Z]?/);\n    if (fullUrlMatches) {\n      console.log(`Found model in full URL: ${fullUrlMatches[0]}`);\n      return fullUrlMatches[0];\n    }\n    \n    return null;\n  } catch (error) {\n    console.error(\"Error extracting product model:\", error);\n    return null;\n  }\n}\n\n// Extract brand name from product title\nfunction extractBrandFromTitle(productTitle: string): string {\n  if (!productTitle) return \"\";\n  \n  // Common brand names to look for\n  const brands = [\n    'Samsung', 'LG', 'Bosch', 'Siemens', 'Beko', 'Whirlpool', 'Electrolux',\n    'Panasonic', 'Sharp', 'Toshiba', 'Hitachi', 'Daewoo', 'Haier',\n    'Apple', 'Sony', 'Philips', 'Braun', 'KitchenAid', 'Kenmore',\n    'Maytag', 'Frigidaire', 'GE', 'Hotpoint', 'Zanussi', 'AEG',\n    'Miele', 'Gorenje', 'Vestel', 'Arçelik', 'Blaupunkt', 'Grundig',\n    // Audio/Electronics brands\n    'Sonos', 'Bose', 'JBL', 'Sennheiser', 'Audio-Technica', 'Shure',\n    'Beyerdynamic', 'AKG', 'Denon', 'Marantz', 'Pioneer', 'Onkyo',\n    'Yamaha', 'Harman Kardon', 'Klipsch', 'Bowers & Wilkins', 'B&W',\n    'Focal', 'KEF', 'Monitor Audio', 'Dynaudio', 'Elac', 'Wharfedale',\n    'Cambridge Audio', 'Rega', 'Naim', 'Linn', 'McIntosh', 'Krell',\n    'Paradigm', 'Martin Logan', 'Definitive Technology', 'Polk Audio',\n    'Infinity', 'Cerwin Vega', 'Jamo', 'Dali', 'Q Acoustics', 'Monitor',\n    'M-Audio', 'Focusrite', 'Presonus', 'Behringer', 'Rode', 'Blue',\n    'Audio Technica', 'Sennheiser', 'Beyerdynamic', 'AKG', 'Shure',\n    'Sony', 'Panasonic', 'Sharp', 'Toshiba', 'Hitachi', 'Daewoo',\n    'LG', 'Samsung', 'Philips', 'Braun', 'KitchenAid', 'Kenmore',\n    'Maytag', 'Frigidaire', 'GE', 'Hotpoint', 'Zanussi', 'AEG',\n    'Miele', 'Gorenje', 'Vestel', 'Arçelik', 'Blaupunkt', 'Grundig',\n    // Computer/Electronics brands\n    'Apple', 'Dell', 'HP', 'Lenovo', 'Asus', 'Acer', 'MSI', 'Gigabyte',\n    'Intel', 'AMD', 'NVIDIA', 'Corsair', 'EVGA', 'Thermaltake',\n    'Cooler Master', 'Noctua', 'be quiet!', 'Fractal Design', 'Phanteks',\n    'Lian Li', 'NZXT', 'Silverstone', 'Antec', 'Seasonic', 'EVGA',\n    'Corsair', 'G.Skill', 'Crucial', 'Samsung', 'Western Digital',\n    'Seagate', 'Kingston', 'ADATA', 'Team Group', 'Patriot', 'PNY',\n    'Logitech', 'Razer', 'SteelSeries', 'HyperX', 'Corsair', 'ROCCAT',\n    'Mad Catz', 'Saitek', 'Thrustmaster', 'Fanatec', 'Logitech G',\n    // Gaming brands\n    'Nintendo', 'Sony', 'Microsoft', 'Xbox', 'PlayStation', 'Steam',\n    'Valve', 'Blizzard', 'EA', 'Ubisoft', 'Activision', 'Bethesda',\n    'Rockstar', 'Take-Two', '2K', 'Capcom', 'Konami', 'Sega',\n    'Bandai Namco', 'Square Enix', 'Atlus', 'NIS America', 'Xseed',\n    'Aksys', 'Idea Factory', 'Compile Heart', 'Gust', 'Falcom',\n    'Nihon Falcom', 'Falcom', 'Nihon', 'Falcom', 'Nihon', 'Falcom'\n  ];\n  \n  const titleLower = productTitle.toLowerCase();\n  for (const brand of brands) {\n    if (titleLower.includes(brand.toLowerCase())) {\n      return brand;\n    }\n  }\n  \n  // If no known brand found, try to extract from the beginning of the title\n  const words = productTitle.split(' ');\n  if (words.length > 0) {\n    const firstWord = words[0];\n    // Check if first word looks like a brand (starts with capital letter and is reasonable length)\n    if (firstWord.length > 2 && firstWord.length < 15 && /^[A-Z]/.test(firstWord)) {\n      return firstWord;\n    }\n  }\n  \n  return \"\";\n}\n\n// Extract product type from product title\nfunction extractProductType(productTitle: string): string {\n  if (!productTitle) return \"\";\n  \n  const titleLower = productTitle.toLowerCase();\n  \n  // Common product types\n  const productTypes = [\n    // Kitchen appliances\n    'dishwasher', 'washing machine', 'dryer', 'refrigerator', 'freezer',\n    'oven', 'microwave', 'stove', 'cooker', 'range', 'hood', 'extractor',\n    'blender', 'mixer', 'food processor', 'coffee maker', 'toaster',\n    'kettle', 'iron', 'vacuum cleaner', 'air conditioner', 'heater',\n    'fan', 'dehumidifier', 'humidifier', 'purifier', 'filter',\n    \n    // Electronics\n    'laptop', 'computer', 'desktop', 'tablet', 'phone', 'smartphone',\n    'tv', 'television', 'monitor', 'speaker', 'headphone', 'camera',\n    'printer', 'scanner', 'router', 'modem', 'keyboard', 'mouse',\n    \n    // Audio equipment\n    'headphones', 'headphone', 'earbuds', 'earbud', 'earphones', 'earphone',\n    'speakers', 'speaker', 'subwoofer', 'woofer', 'tweeter', 'tweeters',\n    'amplifier', 'amp', 'receiver', 'preamp', 'preamplifier', 'power amp',\n    'power amplifier', 'integrated amp', 'integrated amplifier', 'mono block',\n    'monoblock', 'stereo amp', 'stereo amplifier', 'tube amp', 'tube amplifier',\n    'solid state', 'solid-state', 'class a', 'class b', 'class ab', 'class d',\n    'turntable', 'record player', 'vinyl player', 'cd player', 'cdp',\n    'dvd player', 'blu-ray player', 'streamer', 'streaming', 'dac',\n    'digital to analog converter', 'digital-to-analog converter', 'adc',\n    'analog to digital converter', 'analog-to-digital converter', 'phono',\n    'phono stage', 'phono preamp', 'phono preamplifier', 'mc', 'mm',\n    'moving coil', 'moving magnet', 'cartridge', 'stylus', 'needle',\n    'tonearm', 'platter', 'belt drive', 'direct drive', 'idler wheel',\n    'motor', 'bearing', 'spindle', 'mat', 'clamp', 'weight', 'stabilizer',\n    'isolation', 'feet', 'spikes', 'cones', 'balls', 'pads', 'sorbothane',\n    'cable', 'wire', 'interconnect', 'speaker cable', 'speaker wire',\n    'power cord', 'power cable', 'mains cable', 'mains cord', 'iec',\n    'power strip', 'surge protector', 'ups', 'uninterruptible power supply',\n    'battery', 'batteries', 'rechargeable', 'lithium', 'li-ion', 'li-poly',\n    'nickel', 'ni-mh', 'ni-cd', 'alkaline', 'zinc', 'carbon'\n  ];\n  \n  for (const type of productTypes) {\n    if (titleLower.includes(type)) {\n      return type;\n    }\n  }\n  \n  return \"\";\n}\n\n// Filter search results to only include exact product matches\nfunction filterExactProductMatches(results: any[], productModel: string | null, productTitle: string): any[] {\n  if (!results || results.length === 0) return [];\n  \n  const titleLower = productTitle.toLowerCase();\n  const modelLower = productModel?.toLowerCase() || \"\";\n  \n  return results.filter((result) => {\n    const resultTitle = (result.title || \"\").toLowerCase();\n    \n    // If we have a product model, check if it's in the result title\n    if (productModel && modelLower) {\n      if (resultTitle.includes(modelLower)) {\n        console.log(`Exact model match found: ${productModel} in \"${result.title}\"`);\n        return true;\n      }\n    }\n    \n    // Check for significant word matches (at least 3 words)\n    const titleWords = titleLower.split(/\\s+/).filter(word => word.length > 2);\n    const resultWords = resultTitle.split(/\\s+/).filter(word => word.length > 2);\n    \n    let matchCount = 0;\n    for (const word of titleWords) {\n      if (resultWords.some(resultWord => resultWord.includes(word) || word.includes(resultWord))) {\n        matchCount++;\n      }\n    }\n    \n    // Require at least 3 matching words or 60% match rate for longer titles\n    const minMatches = Math.max(3, Math.floor(titleWords.length * 0.6));\n    const isMatch = matchCount >= minMatches;\n    \n    if (isMatch) {\n      console.log(`Title match found: ${matchCount}/${titleWords.length} words match in \"${result.title}\"`);\n    }\n    \n    return isMatch;\n  });\n}\n\n// Remove duplicate results based on URL and title similarity\nfunction removeDuplicateResults(results: any[]): any[] {\n  if (!results || results.length === 0) return [];\n  \n  const seen = new Set<string>();\n  const uniqueResults: any[] = [];\n  \n  for (const result of results) {\n    // Create a unique key based on URL and title\n    const url = result.link || result.product_link || result.source_url || \"\";\n    const title = result.title || \"\";\n    const key = `${url}|${title}`;\n    \n    if (!seen.has(key)) {\n      seen.add(key);\n      uniqueResults.push(result);\n    }\n  }\n  \n  console.log(`Removed ${results.length - uniqueResults.length} duplicate results`);\n  return uniqueResults;\n}\n\n// Search for exact product model using SearchAPI (Google Search API)\nasync function searchExactProductModel(productModel: string, productTitle: string, userCountry: string, actualPrice?: number): Promise<PriceComparison[]> {\n  if (!SEARCH_API_KEY) {\n    console.warn(\"SearchAPI key not configured\");\n    return [];\n  }\n\n  try {\n    console.log(`Searching for exact product model: ${productModel}`);\n    console.log(`Original product title: ${productTitle}`);\n    console.log(`User country: ${userCountry}`);\n    console.log(`Actual price: ${actualPrice || 'Not available'}`);\n    console.log(`SearchAPI Key available: ${SEARCH_API_KEY ? \"Yes\" : \"No\"}`);\n    \n    // Test SearchAPI key first\n    const isKeyValid = await testSearchAPIKey();\n    if (!isKeyValid) {\n      console.warn(\"SearchAPI key is invalid, skipping search\");\n      return [];\n    }\n    \n    // Clean the product title for better search results\n    const cleanedProductTitle = await cleanProductTitleWithGemini(productTitle);\n    console.log(`Cleaned product title: \"${cleanedProductTitle}\"`);\n    \n    // Get country code for SearchAPI - convert to ISO format\n    const countryCode = getCountryCode(userCountry);\n    console.log(`Using country code: ${countryCode} for SearchAPI search`);\n\n    // Helper function to convert country names to ISO codes\n    function getCountryCode(country: string): string {\n      // Import the supported countries from location service\n      const { SEARCH_API_SUPPORTED_COUNTRIES } = require(\"../services/location\");\n      \n      // Find the country in supported countries by name\n      const supportedCountry = Object.values(SEARCH_API_SUPPORTED_COUNTRIES).find(\n        (c: any) => c.country.toLowerCase() === country.toLowerCase()\n      ) as any;\n      \n      if (supportedCountry) {\n        // Return the gl code (lowercase country code)\n        return supportedCountry.countryCode;\n      }\n      \n      // If not found, default to US\n      console.warn(`Country \"${country}\" not found in supported countries, defaulting to US`);\n      return 'us';\n    }\n    \n    // Create more flexible search queries for better matching\n    let searchQueries: string[] = [];\n    \n    if (productModel) {\n      // Try exact model number first\n      searchQueries.push(`\"${productModel}\"`);\n      // Try model with brand name\n      const brand = extractBrandFromTitle(cleanedProductTitle);\n      if (brand) {\n        searchQueries.push(`\"${productModel}\" ${brand}`);\n      }\n      // Try model with product type\n      const productType = extractProductType(cleanedProductTitle);\n      if (productType) {\n        searchQueries.push(`\"${productModel}\" ${productType}`);\n      }\n    }\n    \n    // Add cleaned product title queries\n    if (cleanedProductTitle) {\n      // Try exact cleaned title\n      searchQueries.push(`\"${cleanedProductTitle}\"`);\n      \n      // Try without quotes for broader matching\n      searchQueries.push(cleanedProductTitle);\n      \n      // Try with just brand and model\n      const brand = extractBrandFromTitle(cleanedProductTitle);\n      const words = cleanedProductTitle.split(' ').filter(word => word.length > 2);\n      if (brand && words.length > 1) {\n        const modelWords = words.slice(1, 3).join(' '); // Take 2-3 words after brand\n        if (modelWords) {\n          searchQueries.push(`${brand} ${modelWords}`);\n        }\n      }\n    }\n    \n    // If no model found, try with original product title as fallback\n    if (searchQueries.length === 0) {\n      searchQueries.push(`\"${productTitle}\"`);\n      searchQueries.push(productTitle);\n    }\n    \n    console.log(`Search queries to try: ${JSON.stringify(searchQueries)}`);\n    \n    let allResults: any[] = [];\n    let searchApiFailed = false;\n    let rateLimited = false;\n    \n    // Try each search query with rate limiting\n    for (const searchQuery of searchQueries) {\n      console.log(`Trying search query: ${searchQuery}`);\n      \n      // Build SearchAPI URL with shopping results\n      const searchApiUrl = `https://www.searchapi.io/api/v1/search?engine=google_shopping&q=${encodeURIComponent(searchQuery)}&gl=${countryCode}&api_key=${SEARCH_API_KEY}`;\n      console.log(`SearchAPI URL: ${searchApiUrl}`);\n      \n      // Make the actual SearchAPI request with rate limiting\n      const searchData = await makeSearchApiRequest(searchApiUrl);\n      \n      if (!searchData) {\n        console.warn(`SearchAPI failed for query \"${searchQuery}\", trying next query or fallback`);\n        searchApiFailed = true;\n        \n        // Check if it was rate limited\n        if (searchData === null) {\n          rateLimited = true;\n          console.warn(\"Rate limit detected, stopping further searches\");\n          break; // Stop trying more queries if rate limited\n        }\n        \n        continue; // Try next query\n      }\n      \n      console.log(`Raw SearchAPI response for \"${searchQuery}\":`, JSON.stringify(searchData, null, 2));\n      \n      // Extract shopping results from SearchAPI response\n      let shoppingResults = searchData.shopping_ads || searchData.shopping_results || searchData.inline_shopping || [];\n      console.log(`Found ${shoppingResults.length} shopping results for query \"${searchQuery}\"`);\n      \n      // Also check for knowledge graph shopping offers\n      const knowledgeGraph = searchData.knowledge_graph;\n      if (knowledgeGraph && knowledgeGraph.offers) {\n        console.log(`Found ${knowledgeGraph.offers.length} knowledge graph offers for query \"${searchQuery}\"`);\n        shoppingResults.push(...knowledgeGraph.offers);\n      }\n      \n      // Use more flexible matching instead of exact matches\n      const relevantMatches = filterRelevantProductMatches(shoppingResults, productModel, cleanedProductTitle, productTitle);\n      console.log(`Found ${relevantMatches.length} relevant matches for query \"${searchQuery}\"`);\n      \n      allResults.push(...relevantMatches);\n      \n      // If we found good results, we can stop trying more queries\n      if (relevantMatches.length >= 3) {\n        console.log(\"Found sufficient results, stopping search\");\n        break;\n      }\n    }\n    \n    // If SearchAPI failed completely or was rate limited, use fallback\n    if ((searchApiFailed && allResults.length === 0) || rateLimited) {\n      console.log(\"SearchAPI failed completely or was rate limited, using fallback comparisons\");\n      return generateFallbackComparisons(productTitle, actualPrice || 0, userCountry);\n    }\n    \n    // Remove duplicates and limit results\n    const uniqueResults = removeDuplicateResults(allResults);\n    console.log(`Total unique relevant matches found: ${uniqueResults.length}`);\n    \n    // Validate, sanitize, and convert SearchAPI results to PriceComparison format\n    const validationPromises = uniqueResults.map((result: any) => \n      validateAndSanitizeResult(result, productTitle, actualPrice)\n    );\n    \n    // Add timeout and rate limiting for URL validation\n    const validatedResults = await Promise.allSettled(validationPromises);\n    const comparisons: PriceComparison[] = validatedResults\n      .filter((result): result is PromiseFulfilledResult<PriceComparison | null> => \n        result.status === 'fulfilled' && result.value !== null\n      )\n      .map(result => result.value)\n      .slice(0, 10);\n    \n    console.log(`Converted ${comparisons.length} relevant SearchAPI results to PriceComparison format`);\n    \n    // Apply price filtering to remove unrelated parts/accessories\n    const priceFilteredComparisons = filterByPriceRange(comparisons, actualPrice || 0);\n    \n    console.log(\"Final price-filtered comparisons:\", JSON.stringify(priceFilteredComparisons, null, 2));\n    \n    // Return all valid SearchAPI results, even if they're from known retailers\n    if (priceFilteredComparisons.length > 0) {\n      console.log(`Returning ${priceFilteredComparisons.length} SearchAPI results with actual product URLs`);\n      return priceFilteredComparisons;\n    } else {\n      console.log(\"No SearchAPI results found, using fallback\");\n      return generateFallbackComparisons(productTitle, actualPrice || 0, userCountry);\n    }\n    \n  } catch (error) {\n    console.error(\"SearchAPI search error:\", error);\n    console.log(\"Using fallback comparisons due to error\");\n    return generateFallbackComparisons(productTitle, actualPrice || 0, userCountry);\n  }\n}\n\n// Generate fallback comparisons when SearchAPI fails\nfunction generateFallbackComparisons(productTitle: string, actualPrice: number, userCountry: string): PriceComparison[] {\n  console.log(\"No real product comparisons available - SearchAPI failed or returned no results\");\n  console.log(\"Returning empty array to avoid fake URLs\");\n  \n  // Return empty array instead of generating fake URLs\n  return [];\n}\n\n// Filter search results to include relevant product matches (more flexible than exact)\nfunction filterRelevantProductMatches(results: any[], productModel: string | null, cleanedTitle: string, originalTitle: string): any[] {\n  if (!results || results.length === 0) return [];\n  \n  const cleanedTitleLower = cleanedTitle.toLowerCase();\n  const originalTitleLower = originalTitle.toLowerCase();\n  const modelLower = productModel?.toLowerCase() || \"\";\n  \n  return results.filter((result) => {\n    const resultTitle = (result.title || \"\").toLowerCase();\n    \n    // If we have a product model, check if it's in the result title\n    if (productModel && modelLower) {\n      if (resultTitle.includes(modelLower)) {\n        console.log(`Model match found: ${productModel} in \"${result.title}\"`);\n        return true;\n      }\n    }\n    \n    // Check for brand match\n    const brand = extractBrandFromTitle(cleanedTitle);\n    if (brand) {\n      const brandLower = brand.toLowerCase();\n      if (resultTitle.includes(brandLower)) {\n        console.log(`Brand match found: ${brand} in \"${result.title}\"`);\n        return true;\n      }\n    }\n    \n    // Check for significant word matches (more flexible than exact)\n    const titleWords = cleanedTitleLower.split(/\\s+/).filter(word => word.length > 2);\n    const resultWords = resultTitle.split(/\\s+/).filter(word => word.length > 2);\n    \n    let matchCount = 0;\n    for (const word of titleWords) {\n      if (resultWords.some(resultWord => resultWord.includes(word) || word.includes(resultWord))) {\n        matchCount++;\n      }\n    }\n    \n    // More flexible matching: require at least 2 matching words or 40% match rate\n    const minMatches = Math.max(2, Math.floor(titleWords.length * 0.4));\n    const isMatch = matchCount >= minMatches;\n    \n    if (isMatch) {\n      console.log(`Relevant match found: ${matchCount}/${titleWords.length} words match in \"${result.title}\"`);\n    }\n    \n    return isMatch;\n  });\n}\n\n// These functions are no longer needed since we're using real SerpAPI data\n\n// Generate assessment based on price and retailer\nfunction generateAssessment(price: number, basePrice: number, retailer: string): any {\n  let cost = 2; // Medium by default\n  if (price < basePrice * 0.9) cost = 1; // Low cost\n  else if (price > basePrice * 1.1) cost = 3; // High cost\n  \n  return {\n    cost,\n    value: Math.floor(Math.random() * 3) + 1, // 1-3\n    quality: Math.floor(Math.random() * 3) + 1, // 1-3\n    description: `Found on ${retailer}`\n  };\n}\n\n// Extract price from SearchAPI extensions\nconst extractPriceFromExtensions = (extensions: string[] = []): string | null => {\n  const priceRegex = /€\\s?\\d{1,3}(?:[.,]\\d{2})?/; // Matches €437.00 or € 437,00\n  for (const el of extensions) {\n    const match = el.match(priceRegex);\n    if (match) {\n      return match[0].trim();\n    }\n  }\n  return null;\n};\n\n// Validate and sanitize SearchAPI result to ensure it has a valid price and URL\nasync function validateAndSanitizeResult(result: any, productTitle: string, actualPrice?: number): Promise<PriceComparison | null> {\n  // Try to extract price from extensions first, then fallback to other fields\n  const priceFromExtensions = extractPriceFromExtensions(result.rich_snippet?.extensions);\n  const price = priceFromExtensions ? extractPrice(priceFromExtensions) : extractPrice(result.price || result.priceText || result.price_string || result.extracted_price || '');\n  const rawUrl = result.link || result.product_link || result.source_url || result.url || result.offers_link || '';\n  const url = extractDirectRetailerUrl(rawUrl);\n  \n  if (price == null || !url) {\n    console.log(`Skipping invalid result: ${result.title} (no price or URL)`);\n    return null;\n  }\n  \n  // Check if this is a real product URL (not just a domain)\n  const isRealProductUrl = url && \n    url.length > 20 && // Real product URLs are longer\n    !url.match(/^https?:\\/\\/[^\\/]+\\/?$/) && // Not just a domain\n    (url.includes('/product/') || url.includes('/p/') || url.includes('/dp/') || url.includes('/item/') || url.includes('/shop/') || url.includes('google.com/shopping/product/'));\n  \n  if (!isRealProductUrl) {\n    console.log(`Skipping result with non-product URL: ${result.title} (URL: ${url})`);\n    return null;\n  }\n  \n  // Skip HTML validation for Google Shopping URLs since they return 404 when accessed directly\n  if (url.includes('google.com/shopping/product/')) {\n    console.log(`Skipping HTML validation for Google Shopping URL: ${url}`);\n    const finalTitle = result.title || 'Unknown Product';\n    const finalPrice = price || 0;\n    const finalImage = result.thumbnail || result.image || '';\n    \n    // Generate assessment based on price comparison\n    const assessment = generateAssessment(finalPrice, actualPrice || 0, result.seller || result.source || \"\");\n    return {\n      title: finalTitle,\n      store: extractStoreName(result.seller || result.source || \"\"),\n      price: finalPrice,\n      currency: result.currency || \"€\",\n      url,\n      image: finalImage,\n      condition: \"New\",\n      assessment\n    };\n  }\n  \n  // Validate URL by fetching HTML and checking for product content\n  try {\n    console.log(`Validating URL: ${url}`);\n    const response = await axios.get(url, {\n      timeout: 10000,\n      maxRedirects: 5,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; PriceComparisonBot/1.0)'\n      }\n    });\n    \n    const html = response.data;\n    const isValidProductPage = validateProductPage(html, productTitle);\n    \n    if (!isValidProductPage) {\n      console.log(`URL validation failed: ${result.title} (URL: ${url}) - No valid product content found`);\n      return null;\n    }\n    \n    console.log(`URL validation successful: ${result.title} (URL: ${url})`);\n    \n    // Extract real product information from HTML\n    const extractedInfo = extractProductInfoFromHTML(html, url);\n    console.log(`Extracted product info:`, extractedInfo);\n    \n    // Use extracted information if available, otherwise use original data\n    const finalTitle = extractedInfo.title || result.title || productTitle;\n    const finalPrice = extractedInfo.price || price;\n    const finalImage = extractedInfo.image || result.thumbnail || result.image || \"\";\n    \n    // Generate assessment based on price comparison\n    const assessment = generateAssessment(finalPrice, actualPrice || 0, result.seller || result.source || \"\");\n    return {\n      title: finalTitle,\n      store: extractStoreName(result.seller || result.source || \"\"),\n      price: finalPrice,\n      currency: result.currency || \"€\",\n      url,\n      image: finalImage,\n      condition: \"New\",\n      assessment\n    };\n  } catch (error) {\n    console.log(`URL validation failed: ${result.title} (URL: ${url}) - HTTP error: ${error}`);\n    return null;\n  }\n}\n\n// Validate HTML content to check if it's a real product page\nfunction validateProductPage(html: string, productTitle: string): boolean {\n  const htmlLower = html.toLowerCase();\n  const titleLower = productTitle.toLowerCase();\n  \n  // Check for common error indicators\n  const errorIndicators = [\n    'page not found',\n    '404',\n    'not found',\n    'error',\n    'sorry',\n    'unavailable',\n    'out of stock',\n    'discontinued',\n    'click the button below to continue shopping'\n  ];\n  \n  for (const indicator of errorIndicators) {\n    if (htmlLower.includes(indicator)) {\n      console.log(`Found error indicator: ${indicator}`);\n      return false;\n    }\n  }\n  \n  // Check for product-specific content\n  const productIndicators = [\n    'add to cart',\n    'buy now',\n    'add to basket',\n    'purchase',\n    'price',\n    '€',\n    '$',\n    'product',\n    'item',\n    'shipping',\n    'delivery',\n    'stock',\n    'availability'\n  ];\n  \n  let productIndicatorCount = 0;\n  for (const indicator of productIndicators) {\n    if (htmlLower.includes(indicator)) {\n      productIndicatorCount++;\n    }\n  }\n  \n  // Check if title keywords are present in the page\n  const titleWords = titleLower.split(' ').filter(word => word.length > 2);\n  let titleMatchCount = 0;\n  for (const word of titleWords) {\n    if (htmlLower.includes(word)) {\n      titleMatchCount++;\n    }\n  }\n  \n  // Require at least 3 product indicators and some title matches\n  const hasProductContent = productIndicatorCount >= 3;\n  const hasTitleMatches = titleMatchCount >= Math.max(1, titleWords.length * 0.3);\n  \n  console.log(`Product validation: ${productIndicatorCount} product indicators, ${titleMatchCount}/${titleWords.length} title matches`);\n  \n  return hasProductContent && hasTitleMatches;\n}\n\n// Extract product information from HTML\nfunction extractProductInfoFromHTML(html: string, url: string): { title?: string; price?: number; image?: string } {\n  const htmlLower = html.toLowerCase();\n  \n  // Extract title from meta tags or page title\n  let title = '';\n  const titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i);\n  if (titleMatch) {\n    title = titleMatch[1].trim();\n  }\n  \n  // Extract price from various patterns\n  let price = 0;\n  const pricePatterns = [\n    /€\\s*(\\d+[.,]\\d{2})/i,\n    /\\$(\\d+[.,]\\d{2})/i,\n    /(\\d+[.,]\\d{2})\\s*€/i,\n    /(\\d+[.,]\\d{2})\\s*\\$/i,\n    /price[^>]*>.*?(\\d+[.,]\\d{2})/i,\n    /cost[^>]*>.*?(\\d+[.,]\\d{2})/i\n  ];\n  \n  for (const pattern of pricePatterns) {\n    const match = html.match(pattern);\n    if (match) {\n      price = parseFloat(match[1].replace(',', '.'));\n      break;\n    }\n  }\n  \n  // Extract image from meta tags or img tags\n  let image = '';\n  const imagePatterns = [\n    /<meta[^>]*property=\"og:image\"[^>]*content=\"([^\"]+)\"/i,\n    /<meta[^>]*name=\"twitter:image\"[^>]*content=\"([^\"]+)\"/i,\n    /<img[^>]*src=\"([^\"]*product[^\"]*)\"[^>]*>/i,\n    /<img[^>]*src=\"([^\"]*\\.(?:jpg|jpeg|png|webp))\"[^>]*>/i\n  ];\n  \n  for (const pattern of imagePatterns) {\n    const match = html.match(pattern);\n    if (match && match[1]) {\n      image = match[1];\n      if (image.startsWith('//')) {\n        image = 'https:' + image;\n      } else if (image.startsWith('/')) {\n        const urlObj = new URL(url);\n        image = urlObj.origin + image;\n      }\n      break;\n    }\n  }\n  \n  return { title, price, image };\n}\n\n// Filter comparisons by price range to remove unrelated parts/accessories\nfunction filterByPriceRange(comparisons: PriceComparison[], originalPrice: number): PriceComparison[] {\n  if (originalPrice <= 0) {\n    console.log(\"No original price available, skipping price filtering\");\n    return comparisons;\n  }\n  \n  // For Google Shopping results, be more lenient with price filtering\n  const isGoogleShopping = comparisons.some(comp => comp.url.includes('google.com/shopping/product/'));\n  \n  let minPrice, maxPrice;\n  if (isGoogleShopping) {\n    // More lenient for Google Shopping - allow wider range\n    minPrice = originalPrice * 0.1; // 10% of original price\n    maxPrice = originalPrice * 3.0; // 300% of original price\n    console.log(`Google Shopping detected - using lenient price range: €${minPrice.toFixed(2)} - €${maxPrice.toFixed(2)}`);\n  } else {\n    // Standard filtering for direct retailer URLs\n    minPrice = originalPrice * 0.4; // 40% of original price\n    maxPrice = originalPrice * 2.0; // 200% of original price\n    console.log(`Price range: €${minPrice.toFixed(2)} - €${maxPrice.toFixed(2)}`);\n  }\n  \n  const filtered = comparisons.filter(comparison => {\n    const isInRange = comparison.price >= minPrice && comparison.price <= maxPrice;\n    if (isInRange) {\n      console.log(`✓ ${comparison.store}: €${comparison.price} (within range)`);\n    } else {\n      console.log(`Filtered out ${comparison.store}: €${comparison.price} (${comparison.price < minPrice ? 'too cheap' : 'too expensive'})`);\n    }\n    return isInRange;\n  });\n  \n  console.log(`Price filtering: ${comparisons.length} → ${filtered.length} results`);\n  return filtered;\n}\n\n// Get local retailers for a specific country\nfunction getLocalRetailers(country: string): string[] {\n  const retailerMap: { [key: string]: string[] } = {\n    'Germany': [\n      'amazon.de', 'mediamarkt.de', 'saturn.de', 'otto.de', 'idealo.de',\n      'geizhals.de', 'preisvergleich.de', 'galaxus.de', 'coolblue.de',\n      'cyberport.de', 'alternate.de', 'mindfactory.de', 'caseking.de',\n      'hardwareversand.de', 'computeruniverse.net', 'notebooksbilliger.de',\n      'redcoon.de', 'arlt.com', 'hifi-schluderbacher.de', 'premiumhifi.de'\n    ],\n    'United States': [\n      'amazon.com', 'walmart.com', 'target.com', 'bestbuy.com', 'newegg.com',\n      'bhphotovideo.com', 'adorama.com', 'microcenter.com', 'ebay.com',\n      'costco.com', 'samsclub.com'\n    ],\n    'United Kingdom': [\n      'amazon.co.uk', 'currys.co.uk', 'argos.co.uk', 'johnlewis.com',\n      'very.co.uk', 'ao.com', 'ebay.co.uk', 'scan.co.uk', 'overclockers.co.uk'\n    ],\n    'France': [\n      'amazon.fr', 'fnac.com', 'darty.com', 'boulanger.com', 'ldlc.com',\n      'materiel.net', 'rue-du-commerce.fr', 'cdiscount.com'\n    ],\n    'Italy': [\n      'amazon.it', 'unieuro.it', 'mediaworld.it', 'trony.it', 'euronics.it'\n    ],\n    'Spain': [\n      'amazon.es', 'pccomponentes.com', 'mediamarkt.es', 'elcorteingles.es'\n    ],\n    'Netherlands': [\n      'amazon.nl', 'bol.com', 'coolblue.nl', 'mediamarkt.nl', 'saturn.nl'\n    ],\n    'Belgium': [\n      'amazon.be', 'bol.com', 'coolblue.be', 'mediamarkt.be', 'saturn.be'\n    ],\n    'Austria': [\n      'amazon.at', 'mediamarkt.at', 'saturn.at', 'otto.at', 'idealo.at'\n    ],\n    'Switzerland': [\n      'amazon.ch', 'digitec.ch', 'galaxus.ch', 'mediamarkt.ch', 'saturn.ch'\n    ]\n  };\n  \n  return retailerMap[country] || retailerMap['United States'];\n}\n\n// Sort comparisons by local retailers first\nfunction sortByLocalRetailers(comparisons: PriceComparison[], userCountry: string): PriceComparison[] {\n  const localRetailers = getLocalRetailers(userCountry);\n  \n  return comparisons.sort((a, b) => {\n    const aIsLocal = localRetailers.some(retailer => \n      a.store.toLowerCase().includes(retailer.toLowerCase())\n    );\n    const bIsLocal = localRetailers.some(retailer => \n      b.store.toLowerCase().includes(retailer.toLowerCase())\n    );\n    \n    // Local retailers first\n    if (aIsLocal && !bIsLocal) return -1;\n    if (!aIsLocal && bIsLocal) return 1;\n    \n    // Then by price (lowest first)\n    return a.price - b.price;\n  });\n}\n\n// Detect product information from URL\nasync function detectProductFromUrl(url: string): Promise<{\n  brand: string;\n  model: string;\n  title: string;\n  category: string;\n  price?: number;\n} | null> {\n  try {\n    console.log(`Detecting product from URL: ${url}`);\n    \n    const urlObj = new URL(url);\n    const hostname = urlObj.hostname;\n    const pathname = urlObj.pathname;\n    \n    // Extract brand from hostname\n    const brandFromHostname = extractBrandFromHostname(hostname);\n    \n    // Extract product information from pathname\n    const pathInfo = extractProductFromPathname(pathname);\n    \n    // Combine information\n    const detectedProduct = {\n      brand: brandFromHostname || pathInfo.brand || \"\",\n      model: pathInfo.model || \"\",\n      title: pathInfo.title || \"\",\n      category: pathInfo.category || \"\",\n      price: pathInfo.price\n    };\n    \n    console.log(`Detected product:`, detectedProduct);\n    return detectedProduct;\n    \n  } catch (error) {\n    console.error(\"Error detecting product from URL:\", error);\n    return null;\n  }\n}\n\n// Extract brand from hostname\nfunction extractBrandFromHostname(hostname: string): string {\n  const brandPatterns = [\n    /^www\\.(sonos|bose|jbl|sennheiser|beyerdynamic|akg|shure|denon|marantz|yamaha|pioneer|onkyo|harman|klipsch|bowerswilkins|focal|kef|monitor|dynaudio|elac|wharfedale|cambridge|rega|naim|linn|mcintosh|krell|paradigm|martinlogan|definitive|polk|infinity|cerwinvega|jamo|dali|qacoustics|m-audio|focusrite|presonus|behringer|rode|blue|audiotechnica|raycon|anker|soundcore|houseofmarley)\\./i,\n    /^www\\.(samsung|lg|bosch|siemens|beko|whirlpool|electrolux|panasonic|sharp|toshiba|hitachi|daewoo|haier|apple|sony|philips|braun|kitchenaid|kenmore|maytag|frigidaire|ge|hotpoint|zanussi|aeg|miele|gorenje|vestel|arçelik|blaupunkt|grundig)\\./i,\n    /^www\\.(dell|hp|lenovo|asus|acer|msi|gigabyte|intel|amd|nvidia|corsair|evga|thermaltake|coolermaster|noctua|bequiet|fractal|phanteks|lianli|nzxt|silverstone|antec|seasonic|gskill|crucial|western|seagate|kingston|adata|teamgroup|patriot|pny|logitech|razer|steelseries|hyperx|roccat|madcatz|saitek|thrustmaster|fanatec)\\./i\n  ];\n  \n  for (const pattern of brandPatterns) {\n    const match = hostname.match(pattern);\n    if (match) {\n      return match[1].toLowerCase();\n    }\n  }\n  \n  return \"\";\n}\n\n// Extract product information from URL pathname\nfunction extractProductFromPathname(pathname: string): {\n  brand: string;\n  model: string;\n  title: string;\n  category: string;\n  price?: number;\n} {\n  const pathParts = pathname.split('/').filter(part => part.length > 0);\n  \n  // Common product patterns\n  const productPatterns = [\n    // Sonos patterns\n    { pattern: /sonos-ace/i, brand: 'sonos', model: 'ace', category: 'headphones' },\n    { pattern: /sonos-era/i, brand: 'sonos', model: 'era', category: 'speakers' },\n    { pattern: /sonos-beam/i, brand: 'sonos', model: 'beam', category: 'soundbar' },\n    { pattern: /sonos-arc/i, brand: 'sonos', model: 'arc', category: 'soundbar' },\n    { pattern: /sonos-sub/i, brand: 'sonos', model: 'sub', category: 'subwoofer' },\n    { pattern: /sonos-one/i, brand: 'sonos', model: 'one', category: 'speakers' },\n    { pattern: /sonos-five/i, brand: 'sonos', model: 'five', category: 'speakers' },\n    { pattern: /sonos-move/i, brand: 'sonos', model: 'move', category: 'portable-speaker' },\n    { pattern: /sonos-roam/i, brand: 'sonos', model: 'roam', category: 'portable-speaker' },\n    \n    // Bose patterns\n    { pattern: /bose-quietcomfort/i, brand: 'bose', model: 'quietcomfort', category: 'headphones' },\n    { pattern: /bose-soundlink/i, brand: 'bose', model: 'soundlink', category: 'speakers' },\n    { pattern: /bose-home-speaker/i, brand: 'bose', model: 'home-speaker', category: 'speakers' },\n    { pattern: /bose-sport/i, brand: 'bose', model: 'sport', category: 'headphones' },\n    \n    // JBL patterns\n    { pattern: /jbl-charge/i, brand: 'jbl', model: 'charge', category: 'portable-speaker' },\n    { pattern: /jbl-flip/i, brand: 'jbl', model: 'flip', category: 'portable-speaker' },\n    { pattern: /jbl-pulse/i, brand: 'jbl', model: 'pulse', category: 'portable-speaker' },\n    { pattern: /jbl-partybox/i, brand: 'jbl', model: 'partybox', category: 'portable-speaker' },\n    \n    // Sennheiser patterns\n    { pattern: /sennheiser-momentum/i, brand: 'sennheiser', model: 'momentum', category: 'headphones' },\n    { pattern: /sennheiser-hd/i, brand: 'sennheiser', model: 'hd', category: 'headphones' },\n    { pattern: /sennheiser-ie/i, brand: 'sennheiser', model: 'ie', category: 'earphones' },\n    \n    // Audio-Technica patterns\n    { pattern: /audio-technica-ath/i, brand: 'audio-technica', model: 'ath', category: 'headphones' },\n    { pattern: /audio-technica-at/i, brand: 'audio-technica', model: 'at', category: 'microphones' },\n    \n    // Shure patterns\n    { pattern: /shure-se/i, brand: 'shure', model: 'se', category: 'earphones' },\n    { pattern: /shure-srh/i, brand: 'shure', model: 'srh', category: 'headphones' },\n    { pattern: /shure-sm/i, brand: 'shure', model: 'sm', category: 'microphones' },\n    \n    // Beyerdynamic patterns\n    { pattern: /beyerdynamic-dt/i, brand: 'beyerdynamic', model: 'dt', category: 'headphones' },\n    { pattern: /beyerdynamic-t/i, brand: 'beyerdynamic', model: 't', category: 'microphones' },\n    \n    // AKG patterns\n    { pattern: /akg-k/i, brand: 'akg', model: 'k', category: 'headphones' },\n    { pattern: /akg-p/i, brand: 'akg', model: 'p', category: 'microphones' },\n    \n    // Denon patterns\n    { pattern: /denon-avr/i, brand: 'denon', model: 'avr', category: 'receiver' },\n    { pattern: /denon-dm/i, brand: 'denon', model: 'dm', category: 'micro-system' },\n    \n    // Marantz patterns\n    { pattern: /marantz-sr/i, brand: 'marantz', model: 'sr', category: 'receiver' },\n    { pattern: /marantz-pm/i, brand: 'marantz', model: 'pm', category: 'amplifier' },\n    \n    // Yamaha patterns\n    { pattern: /yamaha-rx/i, brand: 'yamaha', model: 'rx', category: 'receiver' },\n    { pattern: /yamaha-ax/i, brand: 'yamaha', model: 'ax', category: 'amplifier' },\n    { pattern: /yamaha-ns/i, brand: 'yamaha', model: 'ns', category: 'speakers' },\n    \n    // Pioneer patterns\n    { pattern: /pioneer-vsx/i, brand: 'pioneer', model: 'vsx', category: 'receiver' },\n    { pattern: /pioneer-a/i, brand: 'pioneer', model: 'a', category: 'amplifier' },\n    \n    // Onkyo patterns\n    { pattern: /onkyo-tx/i, brand: 'onkyo', model: 'tx', category: 'receiver' },\n    { pattern: /onkyo-a/i, brand: 'onkyo', model: 'a', category: 'amplifier' },\n    \n    // Klipsch patterns\n    { pattern: /klipsch-rp/i, brand: 'klipsch', model: 'rp', category: 'speakers' },\n    { pattern: /klipsch-reference/i, brand: 'klipsch', model: 'reference', category: 'speakers' },\n    { pattern: /klipsch-synergy/i, brand: 'klipsch', model: 'synergy', category: 'speakers' },\n    \n    // Bowers & Wilkins patterns\n    { pattern: /bowers-wilkins-600/i, brand: 'bowers & wilkins', model: '600', category: 'speakers' },\n    { pattern: /bowers-wilkins-700/i, brand: 'bowers & wilkins', model: '700', category: 'speakers' },\n    { pattern: /bowers-wilkins-800/i, brand: 'bowers & wilkins', model: '800', category: 'speakers' },\n    { pattern: /bowers-wilkins-px/i, brand: 'bowers & wilkins', model: 'px', category: 'headphones' },\n    { pattern: /bowers-wilkins-pi/i, brand: 'bowers & wilkins', model: 'pi', category: 'earphones' },\n    \n    // Focal patterns\n    { pattern: /focal-aria/i, brand: 'focal', model: 'aria', category: 'speakers' },\n    { pattern: /focal-chora/i, brand: 'focal', model: 'chora', category: 'speakers' },\n    { pattern: /focal-utopia/i, brand: 'focal', model: 'utopia', category: 'speakers' },\n    { pattern: /focal-elegia/i, brand: 'focal', model: 'elegia', category: 'headphones' },\n    { pattern: /focal-clear/i, brand: 'focal', model: 'clear', category: 'headphones' },\n    \n    // KEF patterns\n    { pattern: /kef-q/i, brand: 'kef', model: 'q', category: 'speakers' },\n    { pattern: /kef-r/i, brand: 'kef', model: 'r', category: 'speakers' },\n    { pattern: /kef-reference/i, brand: 'kef', model: 'reference', category: 'speakers' },\n    { pattern: /kef-ls50/i, brand: 'kef', model: 'ls50', category: 'speakers' },\n    \n    // Monitor Audio patterns\n    { pattern: /monitor-audio-bronze/i, brand: 'monitor audio', model: 'bronze', category: 'speakers' },\n    { pattern: /monitor-audio-silver/i, brand: 'monitor audio', model: 'silver', category: 'speakers' },\n    { pattern: /monitor-audio-gold/i, brand: 'monitor audio', model: 'gold', category: 'speakers' },\n    { pattern: /monitor-audio-platinum/i, brand: 'monitor audio', model: 'platinum', category: 'speakers' }\n  ];\n  \n  const pathString = pathname.toLowerCase();\n  \n  for (const pattern of productPatterns) {\n    if (pattern.pattern.test(pathString)) {\n      return {\n        brand: pattern.brand,\n        model: pattern.model,\n        title: `${pattern.brand} ${pattern.model}`.toLowerCase(),\n        category: pattern.category\n      };\n    }\n  }\n  \n  // Fallback: try to extract from path parts\n  const lastPart = pathParts[pathParts.length - 1];\n  if (lastPart) {\n    // Look for model numbers in the last part\n    const modelMatch = lastPart.match(/([a-z]{2,4}\\d{2,4}[a-z]?)/i);\n    if (modelMatch) {\n      return {\n        brand: \"\",\n        model: modelMatch[1],\n        title: lastPart,\n        category: \"electronics\"\n      };\n    }\n  }\n  \n  return {\n    brand: \"\",\n    model: \"\",\n    title: pathParts.join(' '),\n    category: \"electronics\"\n  };\n}\n\n// Generate price comparisons for a product\nfunction generatePriceComparisons(mainProduct: ProductData): PriceComparison[] {\n  console.log(`Generating price comparisons for: ${mainProduct.title}`);\n  \n  // Get user location (default to Germany for now)\n  const userLocation = { country: 'Germany' };\n  console.log(`User location: ${JSON.stringify(userLocation)}`);\n  \n  // Don't generate fake URLs - return empty array\n  console.log(\"Not generating fake URLs - returning empty array\");\n  return [];\n}\n\n// Convert scraped data to standard format\nfunction convertToStandardFormat(scrapedData: any): {\n  product: ProductData;\n  comparisons: PriceComparison[];\n} {\n  const product: ProductData = {\n    title: scrapedData.originalProduct?.title || \"Product\",\n    price: scrapedData.originalProduct?.price || 0,\n    currency: scrapedData.originalProduct?.currency || \"€\",\n    url: scrapedData.originalProduct?.url || \"\",\n    image: scrapedData.originalProduct?.image || \"/placeholder.svg\",\n    store: scrapedData.originalProduct?.store || \"Unknown\"\n  };\n  \n  const comparisons: PriceComparison[] = scrapedData.comparisons || [];\n  \n  return { product, comparisons };\n}\n\n// Gemini validation function\nasync function runGeminiValidation(originalProduct: any, comparisons: any[]) {\n  // Skip Gemini validation if too many failures\n  if (geminiFailureCount >= MAX_GEMINI_FAILURES) {\n    console.log(\"Skipping Gemini validation due to previous failures\");\n    return comparisons;\n  }\n\n  const prompt = `You are a product comparison filter. Given an original product and a list of product comparisons from different stores, return only the ones that truly match the original product (same model and condition). Also clean up image URLs and standardize pricing.\n\nIMPORTANT: Return ONLY a valid JSON array, no markdown formatting, no explanations, no code blocks. Just the raw JSON array.\n\nOriginal Product:\n${JSON.stringify(originalProduct)}\n\nComparisons:\n${JSON.stringify(comparisons)}\n\nReturn ONLY a JSON array of cleaned and validated comparison products:`;\n\n  try {\n    const response = await axios.post(\n      'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent',\n      {\n        contents: [{ parts: [{ text: prompt }] }]\n      },\n      {\n        params: { key: process.env.GEMINI_API_KEY },\n        headers: { 'Content-Type': 'application/json' },\n        timeout: 30000, // 30 second timeout\n        maxRedirects: 5\n      }\n    );\n\n    const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || '{}';\n    return safeParseGeminiJSON(text, comparisons);\n  } catch (error) {\n    console.error('Gemini API error:', error);\n    if (axios.isAxiosError(error)) {\n      console.error('Response status:', error.response?.status);\n      console.error('Response data:', error.response?.data);\n    }\n    geminiFailureCount++;\n    console.log(`Gemini validation failure count: ${geminiFailureCount}/${MAX_GEMINI_FAILURES}`);\n    throw new Error(`Gemini API request failed: ${error}`);\n  }\n}\n\nrouter.post(\"/scrape-enhanced\", async (req, res) => {\n  try {\n    const { url } = req.body;\n\n    if (!url) {\n      return res.status(400).json({ error: \"URL is required\" });\n    }\n\n    console.log(`Backend scraping request for: ${url}`);\n\n    // Enhanced product detection (like Dupe.com)\n    const detectedProduct = await detectProductFromUrl(url);\n    console.log(`Enhanced product detection result:`, detectedProduct);\n\n    // Extract product model from URL (fallback method)\n    const productModel = extractProductModel(url);\n    console.log(`Extracted product model: ${productModel || \"Not found\"}`);\n\n    // Get user country from request or default to United States\n    const userCountry = req.body.userLocation?.country || \"United States\";\n    console.log(`User country detected: ${userCountry}`);\n\n    // Extract product data directly without calling the old scraping function\n    let capturedData: any = null;\n    \n    try {\n      // Use the enhanced product detection\n      const detectedProduct = await detectProductFromUrl(url);\n      console.log(\"Detected product:\", detectedProduct);\n      \n      // Create basic product data structure\n      capturedData = {\n        originalProduct: {\n          title: detectedProduct?.title || \"Product\",\n          price: detectedProduct?.price || 0,\n          currency: \"€\",\n          url,\n          image: \"/placeholder.svg\",\n          store: new URL(url).hostname.replace(/^www\\./, \"\"),\n        },\n        comparisons: [],\n      };\n    } catch (error) {\n      console.error(\"Error detecting product:\", error);\n      capturedData = {\n        originalProduct: {\n          title: \"Product\",\n          price: 0,\n          currency: \"€\",\n          url,\n          image: \"/placeholder.svg\",\n          store: new URL(url).hostname.replace(/^www\\./, \"\"),\n        },\n        comparisons: [],\n      };\n    }\n\n    // Debug: Log what the original scraping returned\n    console.log(\"Original scraping result:\", JSON.stringify(capturedData, null, 2));\n\n    // ALWAYS try to get real URLs from SearchAPI first, regardless of scraping success\n    let comparisons: PriceComparison[] = [];\n    let searchApiUsed = false;\n    \n    try {\n      // Consolidate search logic to avoid duplicate calls\n      let searchAttempted = false;\n      \n      // Use enhanced product detection for better search queries\n      if (detectedProduct && detectedProduct.brand && detectedProduct.model && !searchAttempted) {\n        console.log(`Using enhanced product detection: ${detectedProduct.brand} ${detectedProduct.model}`);\n        const searchTitle = `${detectedProduct.brand} ${detectedProduct.model}`;\n        comparisons = await searchExactProductModel(\n          detectedProduct.model, \n          searchTitle, \n          userCountry, \n          capturedData?.originalProduct?.price\n        );\n        searchApiUsed = true;\n        searchAttempted = true;\n      }\n      \n      // If no results and we have a product model, try with that\n      if (comparisons.length === 0 && productModel && !searchAttempted) {\n        console.log(`Using extracted product model: ${productModel}`);\n        comparisons = await searchExactProductModel(\n          productModel, \n          capturedData?.originalProduct?.title || \"Product\", \n          userCountry, \n          capturedData?.originalProduct?.price\n        );\n        searchApiUsed = true;\n        searchAttempted = true;\n      }\n\n      // If still no results, try with just the product title (only once)\n      if (comparisons.length === 0 && capturedData?.originalProduct?.title && !searchAttempted) {\n        console.log(\"No results with product model, trying with product title\");\n        comparisons = await searchExactProductModel(\n          \"\", \n          capturedData.originalProduct.title, \n          userCountry, \n          capturedData.originalProduct.price\n        );\n        searchApiUsed = true;\n        searchAttempted = true;\n      }\n    } catch (searchError) {\n      console.error(\"SearchAPI error:\", searchError);\n      console.log(\"SearchAPI failed, will use fallback comparisons\");\n    }\n\n    // Check if we got real SearchAPI results with actual product URLs\n    const hasRealUrls = comparisons.length > 0 && searchApiUsed && \n      comparisons.some(comp => comp.url && comp.url.length > 20 && \n        !comp.url.match(/^https?:\\/\\/[^\\/]+\\/?$/));\n    \n    if (hasRealUrls) {\n      console.log(`Found ${comparisons.length} real SearchAPI results with actual product URLs, using them`);\n      // Sort by price (lowest first) and then by local retailers\n      comparisons = sortByLocalRetailers(comparisons, userCountry);\n      if (capturedData) {\n        capturedData.comparisons = comparisons;\n      } else {\n        // Create basic product data if scraping failed\n        capturedData = {\n          originalProduct: {\n            title: detectedProduct?.title || \"Product\",\n            price: 0,\n            currency: \"€\",\n            url,\n            image: \"/placeholder.svg\",\n            store: new URL(url).hostname.replace(/^www\\./, \"\"),\n          },\n          comparisons,\n        };\n      }\n    } else {\n      console.log(\"No real SearchAPI results with valid URLs found, using empty comparisons\");\n      // Don't use fake URLs - return empty comparisons\n      if (!capturedData || !capturedData.originalProduct || capturedData.originalProduct.price === 0) {\n        console.log(\"Original scraping failed or returned no price\");\n        \n        // Create a basic product data structure\n        const product: ProductData = {\n          title: detectedProduct?.title || \"Product\",\n          price: 0,\n          currency: \"€\",\n          url,\n          image: \"/placeholder.svg\",\n          store: new URL(url).hostname.replace(/^www\\./, \"\"),\n        };\n\n        capturedData = {\n          originalProduct: product,\n          comparisons: [], // Empty array instead of fake URLs\n        };\n      } else {\n        // Original scraping succeeded, but no SearchAPI results\n        console.log(\"Using empty comparisons - no real URLs available\");\n        capturedData.comparisons = []; // Empty array instead of fake URLs\n      }\n    }\n\n    if (!capturedData) {\n      throw new Error(\"Failed to scrape product data\");\n    }\n\n    // Convert to standard format\n    const result = convertToStandardFormat(capturedData);\n\n    // Gemini validation step\n    let validatedComparisons = result.comparisons;\n    try {\n      validatedComparisons = await runGeminiValidation(result.product, result.comparisons);\n      console.log(`Gemini validation successful, filtered to ${validatedComparisons.length} comparisons`);\n    } catch (geminiErr) {\n      console.error(\"Gemini validation failed, using unfiltered comparisons:\", geminiErr);\n      // Keep original comparisons if Gemini fails\n      validatedComparisons = result.comparisons;\n    }\n\n    // Generate a unique request ID\n    const requestId = Date.now().toString();\n\n    res.json({\n      product: result.product,\n      comparisons: validatedComparisons,\n      requestId,\n    });\n  } catch (error) {\n    console.error(\"Scraping error:\", error);\n    \n    // Even if everything fails, provide a basic response\n    try {\n      const url = req.body.url;\n      const userCountry = req.body.userLocation?.country || \"United States\";\n      \n      console.log(\"Providing fallback response due to error\");\n      \n  const fallbackProduct: ProductData = {\n    title: \"Product\",\n    price: 0,\n    currency: \"€\",\n    url,\n    image: \"/placeholder.svg\",\n    store: new URL(url).hostname.replace(/^www\\./, \"\"),\n  };\n      \n      // Don't generate fake URLs in error fallback\n      res.json({\n        product: fallbackProduct,\n        comparisons: [], // Empty array instead of fake URLs\n        requestId: Date.now().toString(),\n      });\n    } catch (fallbackError) {\n      console.error(\"Fallback also failed:\", fallbackError);\n      res.json({ \n        product: {\n          title: \"Product\",\n          price: 0,\n          currency: \"€\",\n          url: req.body.url || \"\",\n          image: \"/placeholder.svg\",\n          store: \"unknown\"\n        },\n        comparisons: [],\n        requestId: Date.now().toString(),\n        error: \"Failed to scrape product data\"\n      });\n    }\n  }\n});\n\n// New n8n webhook scraping function\nasync function scrapeWithN8nWebhook(url: string, gl?: string): Promise<any> {\n  try {\n    console.log(\"Calling n8n webhook for URL:\", url, \"GL:\", gl);\n    \n    const n8nWebhookUrl = process.env.N8N_WEBHOOK_URL || 'https://n8n.srv824584.hstgr.cloud/webhook/new-test';\n    \n    console.log(\"Using n8n webhook URL:\", n8nWebhookUrl);\n    \n    const params: any = { url };\n    if (gl) {\n      params.gl = gl;\n    }\n    \n    console.log(\"Full URL being called:\", `${n8nWebhookUrl}?${new URLSearchParams(params).toString()}`);\n    \n    const response = await axios.get(n8nWebhookUrl, {\n      params: params,\n      timeout: 60000, // 60 second timeout (increased from 30)\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n\n    console.log(\"n8n webhook response status:\", response.status);\n    console.log(\"n8n webhook response data:\", JSON.stringify(response.data, null, 2));\n\n    if (response.status !== 200) {\n      throw new Error(`n8n webhook returned status ${response.status}`);\n    }\n\n    const data = response.data;\n    \n    // Handle the n8n response format\n    if (data && data.mainProduct && Array.isArray(data.suggestions)) {\n      // Convert suggestions to PriceComparison format\n      const comparisons: PriceComparison[] = data.suggestions.map((suggestion: any) => ({\n        title: suggestion.title,\n        store: suggestion.site || 'unknown',\n        price: extractPrice(suggestion.standardPrice || suggestion.discountPrice || '0'),\n        currency: extractCurrency(suggestion.standardPrice || suggestion.discountPrice || ''),\n        url: addUtmToUrl(suggestion.link),\n        image: suggestion.image,\n        condition: \"New\",\n        assessment: {\n          cost: 3,\n          value: 3,\n          quality: 3,\n          description: `Found on ${suggestion.site || 'unknown'}`\n        }\n      }));\n      // Also update suggestions array\n      data.suggestions = data.suggestions.map((s: any) => ({ ...s, link: addUtmToUrl(s.link) }));\n\n      return {\n        mainProduct: {\n          title: data.mainProduct.title,\n          price: data.mainProduct.price,\n          image: data.mainProduct.image,\n          url: addUtmToUrl(data.mainProduct.url)\n        },\n        suggestions: data.suggestions,\n        comparisons: comparisons\n      };\n    }\n\n    // Handle new n8n response format (array with single object containing mainProduct and suggestions)\n    if (Array.isArray(data) && data.length > 0 && data[0].mainProduct && Array.isArray(data[0].suggestions)) {\n      console.log(\"Handling new n8n response format (array with mainProduct and suggestions)\");\n      \n      const firstItem = data[0];\n      const mainProduct = firstItem.mainProduct;\n      \n      // Convert suggestions to PriceComparison format\n      const comparisons: PriceComparison[] = firstItem.suggestions.map((suggestion: any) => ({\n        title: suggestion.title,\n        store: suggestion.site || 'unknown',\n        price: extractPrice(suggestion.standardPrice || suggestion.discountPrice || '0'),\n        currency: extractCurrency(suggestion.standardPrice || suggestion.discountPrice || ''),\n        url: addUtmToUrl(suggestion.link),\n        image: suggestion.image,\n        condition: \"New\",\n        // New fields\n        merchant: suggestion.merchant,\n        stock: suggestion.stock,\n        reviewsCount: suggestion.reviewsCount,\n        deliveryPrice: suggestion.deliveryPrice,\n        details: suggestion.details,\n        returnPolicy: suggestion.returnPolicy,\n        rating: suggestion.rating ? parseFloat(suggestion.rating) : undefined,\n        assessment: {\n          cost: 3,\n          value: 3,\n          quality: 3,\n          description: `Found on ${suggestion.site || 'unknown'}`\n        }\n      }));\n      // Also update suggestions array\n      firstItem.suggestions = firstItem.suggestions.map((s: any) => ({ ...s, link: addUtmToUrl(s.link) }));\n\n      return {\n        mainProduct: {\n          title: mainProduct.title,\n          price: mainProduct.price,\n          image: mainProduct.image,\n          url: addUtmToUrl(mainProduct.url)\n        },\n        suggestions: firstItem.suggestions,\n        comparisons: comparisons\n      };\n    }\n\n    // Handle new n8n response format (single object with all fields)\n    if (data && data.title && (data.standardPrice || data.discountPrice)) {\n      console.log(\"Handling new n8n response format (single object)\");\n      \n      // Convert single object to the expected format\n      const mainProduct = {\n        title: data.title,\n        price: data.standardPrice || data.discountPrice || \"Price not available\",\n        image: data.image,\n        url: addUtmToUrl(data.link)\n      };\n\n      const suggestion = {\n        title: data.title,\n        standardPrice: data.standardPrice,\n        discountPrice: data.discountPrice,\n        site: data.site,\n        link: addUtmToUrl(data.link),\n        image: data.image,\n        // New fields\n        merchant: data.merchant,\n        stock: data.stock,\n        reviewsCount: data.reviewsCount,\n        deliveryPrice: data.deliveryPrice,\n        details: data.details,\n        returnPolicy: data.returnPolicy,\n        rating: data.rating\n      };\n\n      const comparison: PriceComparison = {\n        title: data.title,\n        store: data.site || 'unknown',\n        price: extractPrice(data.standardPrice || data.discountPrice || '0'),\n        currency: extractCurrency(data.standardPrice || data.discountPrice || ''),\n        url: addUtmToUrl(data.link),\n        image: data.image,\n        condition: \"New\",\n        // New fields\n        merchant: data.merchant,\n        stock: data.stock,\n        reviewsCount: data.reviewsCount,\n        deliveryPrice: data.deliveryPrice,\n        details: data.details,\n        returnPolicy: data.returnPolicy,\n        rating: data.rating ? parseFloat(data.rating) : undefined,\n        assessment: {\n          cost: 3,\n          value: 3,\n          quality: 3,\n          description: `Found on ${data.site || 'unknown'}`\n        }\n      };\n\n      return {\n        mainProduct: mainProduct,\n        suggestions: [suggestion],\n        comparisons: [comparison]\n      };\n    }\n\n    // Handle new n8n response format (single object with all fields, keyword search)\n    if (data && typeof data === 'object' && !Array.isArray(data) && !data.mainProduct && data.title && data.link) {\n      // Wrap single object in array for keyword search\n      return [data];\n    }\n\n    // If response is an array, return as is\n    if (Array.isArray(data)) {\n      return data;\n    }\n\n    // If response is empty or invalid, throw an error instead of providing fallback data\n    if (!data || Object.keys(data).length === 0) {\n      console.log(\"n8n webhook returned empty data\");\n      throw new Error(\"No product data received from webhook\");\n    }\n\n    throw new Error(\"Invalid n8n webhook response format\");\n  } catch (error) {\n    console.error(\"n8n webhook error:\", error);\n    \n    // If it's an axios error, log more details\n    if (axios.isAxiosError(error)) {\n      console.error(\"Axios error details:\", {\n        status: error.response?.status,\n        statusText: error.response?.statusText,\n        data: error.response?.data,\n        url: error.config?.url,\n        method: error.config?.method,\n        params: error.config?.params,\n        fullUrl: error.config?.url + '?' + new URLSearchParams(error.config?.params || {}).toString()\n      });\n    }\n    \n    throw error;\n  }\n}\n\n// Helper function to extract currency from price string\nfunction extractCurrency(priceString: string): string {\n  if (priceString.includes('€')) return '€';\n  if (priceString.includes('$')) return '$';\n  if (priceString.includes('£')) return '£';\n  return '€'; // Default to Euro\n}\n\n// Filter suggestions based on registered businesses\nasync function filterSuggestionsByRegisteredBusinesses(suggestions: any[]): Promise<any[]> {\n  try {\n    // Check if the filter is enabled\n    const filterEnabled = await settingsService.getSuggestionFilterEnabled();\n    if (!filterEnabled) {\n      // If filter is disabled, return all suggestions\n      return suggestions;\n    }\n    // Get all active registered businesses\n    const registeredBusinesses = await businessService.getActiveBusinesses();\n    \n    if (registeredBusinesses.length === 0) {\n      // If no businesses are registered, return all suggestions\n      return suggestions;\n    }\n\n    // Create a set of registered domains for faster lookup\n    const registeredDomains = new Set(\n      registeredBusinesses.map(business => business.domain.toLowerCase())\n    );\n\n    // Filter suggestions to only include registered businesses\n    const filteredSuggestions = suggestions.filter(suggestion => {\n      if (!suggestion.url) return false;\n      \n      try {\n        const url = new URL(suggestion.url);\n        const domain = url.hostname.toLowerCase().replace('www.', '');\n        return registeredDomains.has(domain);\n      } catch {\n        return false;\n      }\n    });\n\n    // If no suggestions match registered businesses, return empty array\n    if (filteredSuggestions.length === 0) {\n      console.log(\"No suggestions match registered businesses\");\n      return [];\n    }\n\n    console.log(`Filtered ${suggestions.length} suggestions to ${filteredSuggestions.length} from registered businesses`);\n    return filteredSuggestions;\n  } catch (error) {\n    console.error(\"Error filtering suggestions by registered businesses:\", error);\n    // Return original suggestions if filtering fails\n    return suggestions;\n  }\n}\n\n// Track visits for businesses that appear in suggestions\nasync function trackBusinessVisits(suggestions: any[]): Promise<void> {\n  try {\n    const visitedDomains = new Set<string>();\n    \n    // Extract unique domains from suggestions\n    for (const suggestion of suggestions) {\n      if (suggestion.url) {\n        try {\n          const url = new URL(suggestion.url);\n          const domain = url.hostname.toLowerCase().replace('www.', '');\n          visitedDomains.add(domain);\n        } catch {\n          // Skip invalid URLs\n        }\n      }\n    }\n    \n    // Increment visit count for each business\n    for (const domain of visitedDomains) {\n      const business = await businessService.findBusinessByDomain(domain);\n      if (business) {\n        await businessService.incrementBusinessVisits(business.id);\n        console.log(`Tracked visit for business: ${business.name} (${domain})`);\n      }\n    }\n  } catch (error) {\n    console.error(\"Error tracking business visits:\", error);\n  }\n}\n\n// New route for n8n webhook scraping\nrouter.post(\"/n8n-scrape\", async (req, res) => {\n  console.log(\"=== n8n-scrape route called ===\");\n  console.log(\"Request body:\", req.body);\n  try {\n    const { url, keywords, requestId, gl, userCountry, findSimilar } = req.body;\n    if (!url && !keywords) {\n      return res.status(400).json({ error: \"URL or keywords is required\" });\n    }\n    let result;\n    if (url) {\n      console.log(`n8n webhook scraping request for URL: ${url}, GL: ${gl}`);\n      result = await scrapeWithN8nWebhook(url, gl);\n    } else if (keywords) {\n      console.log(`n8n webhook scraping request for keywords: ${keywords}, GL: ${gl}`);\n      result = await scrapeWithN8nWebhook(keywords, gl);\n    }\n    // If result is an array (keyword search), send directly\n    if (Array.isArray(result)) {\n      return res.json(result);\n    }\n\n    // If result is a single object with a single suggestion, wrap it in an array for consistency\n    if (result && result.suggestions && !Array.isArray(result.suggestions)) {\n      result.suggestions = [result.suggestions];\n    }\n\n    console.log(\"n8n webhook scraping successful\");\n    console.log(\"Main product:\", result.mainProduct);\n    console.log(\"Original suggestions count:\", result.suggestions?.length || 0);\n\n    // Filter suggestions based on registered businesses and track visits\n    if (result.suggestions && result.suggestions.length > 0) {\n      result.suggestions = await filterSuggestionsByRegisteredBusinesses(result.suggestions);\n      console.log(\"Filtered suggestions count:\", result.suggestions.length);\n      \n      // Track visits for each business that appears in suggestions\n      await trackBusinessVisits(result.suggestions);\n    }\n\n    // If findSimilar is true, modify the search to focus on similar products\n    if (findSimilar && result.mainProduct) {\n      console.log(\"Processing similar products search...\");\n      \n      // Extract product information for similar search\n      const productTitle = result.mainProduct.title;\n      const productBrand = extractBrandFromTitle(productTitle);\n      const productType = extractProductType(productTitle);\n      \n      // Create a search query for similar products\n      const similarSearchQuery = `${productBrand} ${productType}`;\n      console.log(`Similar products search query: ${similarSearchQuery}`);\n      \n      // For now, we'll use the same suggestions but mark them as similar products\n      // In a full implementation, you might want to make additional API calls\n      // to find truly similar products from different brands or categories\n      \n      if (result.suggestions && result.suggestions.length > 0) {\n        // Filter and enhance suggestions for similar products\n        result.suggestions = result.suggestions.map(suggestion => ({\n          ...suggestion,\n          isSimilar: true,\n          similarityReason: `Similar ${productType} from ${suggestion.merchant || suggestion.site || 'other retailers'}`\n        }));\n        \n        console.log(`Enhanced ${result.suggestions.length} suggestions for similar products`);\n      }\n    }\n\n    // Save to search history if user is authenticated\n    try {\n      // Check if user is authenticated by looking for user info in request\n      const userId = (req as any).user?.id;\n      if (userId && result.mainProduct?.title) {\n        await searchHistoryService.addSearch(userId, {\n          url: addUtmToUrl(url),\n          title: result.mainProduct.title,\n          requestId: requestId || `search_${Date.now()}`,\n        });\n        console.log(`Search history saved for user ${userId} (type: ${findSimilar ? 'similar' : 'price_comparison'})`);\n      } else {\n        console.log(\"No user authentication found, skipping search history save\");\n      }\n    } catch (historyError) {\n      console.error(\"Failed to save search history:\", historyError);\n      // Don't fail the main request if history saving fails\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error(\"n8n webhook scraping error:\", error);\n    \n    // Return a proper error response instead of mock data\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n    console.log(\"Returning error response:\", errorMessage);\n    \n    res.status(500).json({ \n      error: \"Failed to fetch product information\",\n      message: errorMessage,\n      mainProduct: null,\n      suggestions: []\n    });\n  }\n});\n\n// Helper to add UTM params to a URL\nfunction addUtmToUrl(url: string): string {\n  try {\n    const u = new URL(url);\n    u.searchParams.set('utm_source', 'pavlo4');\n    u.searchParams.set('utm_medium', 'suggestion');\n    u.searchParams.set('utm_campaign', 'business_tracking');\n    return u.toString();\n  } catch {\n    return url;\n  }\n}\n\nexport default router; ","import { RequestHandler } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { userService, searchHistoryService } from \"../services/database\";\n\nconst JWT_SECRET =\n  process.env.JWT_SECRET || \"your-secret-key-change-in-production\";\n\n// Helper function to generate JWT token\nfunction generateToken(userId: number): string {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"7d\" });\n}\n\n// Helper function to verify JWT token\nexport function verifyToken(token: string): { userId: number } | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n    return decoded;\n  } catch {\n    return null;\n  }\n}\n\n// Register new user\nexport const register: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ error: \"Email and password are required\" });\n    }\n\n    if (password.length < 6) {\n      return res\n        .status(400)\n        .json({ error: \"Password must be at least 6 characters long\" });\n    }\n\n    // Check if user already exists\n    const existingUser = await userService.findUserByEmail(email);\n    if (existingUser) {\n      return res\n        .status(400)\n        .json({ error: \"User with this email already exists\" });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // Create new user\n    const user = await userService.createUser({\n      email,\n      password: hashedPassword,\n      isAdmin: false, // First user can be made admin manually\n    });\n\n    // Generate token\n    const token = generateToken(user.id);\n\n    res.cookie(\"auth_token\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    });\n\n    res.status(201).json({\n      success: true,\n      token: token,\n      accessToken: token,\n      user: {\n        id: user.id,\n        email: user.email,\n        isAdmin: user.isAdmin,\n      },\n    });\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    res.status(500).json({ error: \"Failed to register user\" });\n  }\n};\n\n// Login user\nexport const login: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ error: \"Email and password are required\" });\n    }\n\n    // Find user by email\n    const user = await userService.findUserByEmail(email);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid email or password\" });\n    }\n\n    // Check password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      return res.status(401).json({ error: \"Invalid email or password\" });\n    }\n\n    // Generate token\n    const token = generateToken(user.id);\n\n    res.cookie(\"auth_token\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    });\n\n    res.json({\n      success: true,\n      token: token,\n      accessToken: token,\n      user: {\n        id: user.id,\n        email: user.email,\n        isAdmin: user.isAdmin,\n      },\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.status(500).json({ error: \"Failed to login\" });\n  }\n};\n\n// Logout user\nexport const logout: RequestHandler = (req, res) => {\n  res.clearCookie(\"auth_token\");\n  res.json({ success: true });\n};\n\n// Get current user info\nexport const getCurrentUser: RequestHandler = async (req, res) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      // Return null user instead of 401 for unauthenticated requests\n      return res.json({\n        user: null,\n        authenticated: false\n      });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.json({\n        user: null,\n        authenticated: false\n      });\n    }\n\n    // Handle both string and number user IDs\n    const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n    \n    if (isNaN(userId)) {\n      return res.json({\n        user: null,\n        authenticated: false\n      });\n    }\n\n    const user = await userService.findUserById(userId);\n    if (!user) {\n      return res.json({\n        user: null,\n        authenticated: false\n      });\n    }\n\n    res.json({\n      user: {\n        id: user.id,\n        email: user.email,\n        isAdmin: user.isAdmin,\n      },\n      authenticated: true\n    });\n  } catch (error) {\n    console.error(\"Get current user error:\", error);\n    // Return null user instead of 500 error\n    res.json({\n      user: null,\n      authenticated: false\n    });\n  }\n};\n\n// Add search to user history\nexport const addToSearchHistory: RequestHandler = async (req, res) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ error: \"Invalid token\" });\n    }\n\n    // Handle both string and number user IDs\n    const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n    \n    if (isNaN(userId)) {\n      return res.status(401).json({ error: \"Invalid user ID in token\" });\n    }\n\n    const user = await userService.findUserById(userId);\n    if (!user) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n\n    const { url, title, requestId } = req.body;\n\n    if (!url || !title || !requestId) {\n      return res.status(400).json({ error: \"Missing required fields\" });\n    }\n\n    // Add to search history\n    await searchHistoryService.addSearch(user.id, {\n      url,\n      title,\n      requestId,\n    });\n\n    res.status(201).json({ success: true });\n  } catch (error) {\n    console.error(\"Error adding to search history:\", error);\n    res.status(500).json({ error: \"Failed to add to search history\" });\n  }\n};\n\n// Get user search history\nexport const getUserSearchHistory: RequestHandler = async (req, res) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ error: \"Invalid token\" });\n    }\n\n    // Handle both string and number user IDs\n    const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n    \n    if (isNaN(userId)) {\n      return res.status(401).json({ error: \"Invalid user ID in token\" });\n    }\n\n    const user = await userService.findUserById(userId);\n    if (!user) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n\n    const history = await searchHistoryService.getUserSearchHistory(\n      user.id,\n      20,\n    );\n\n    res.json({\n      history: history.map((h) => ({\n        url: h.url,\n        title: h.title,\n        requestId: h.requestId,\n        timestamp: h.timestamp,\n      })),\n    });\n  } catch (error) {\n    console.error(\"Error getting search history:\", error);\n    res.status(500).json({ error: \"Failed to get search history\" });\n  }\n};\n\n// Get all users (admin only)\nexport const getAllUsers: RequestHandler = async (req, res) => {\n  try {\n    // This function is now called with admin authentication middleware\n    // The admin authentication is handled by requireAdminAuth middleware\n    const users = await userService.getAllUsers();\n\n    res.json({\n      users: users.map((u) => ({\n        id: u.id,\n        email: u.email,\n        isAdmin: u.isAdmin,\n        createdAt: u.createdAt,\n        searchCount: u._count.searchHistory,\n      })),\n    });\n  } catch (error) {\n    console.error(\"Error getting all users:\", error);\n    res.json({ \n      users: [],\n      error: \"Failed to get users\"\n    });\n  }\n};\n\n// Export database services for other modules to access\nexport { userService, searchHistoryService };\n","import { RequestHandler } from \"express\";\nimport { verifyToken, userService } from \"../routes/auth\";\n\n// Extend Express Request type to include user info\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: number;\n        email: string;\n        isAdmin: boolean;\n      };\n    }\n  }\n}\n\n// Middleware to check if user is authenticated\nexport const requireAuth: RequestHandler = async (req, res, next) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ error: \"Invalid authentication token\" });\n    }\n\n    try {\n      // Handle both string and number user IDs\n      const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n      \n      if (isNaN(userId)) {\n        return res.status(401).json({ error: \"Invalid user ID in token\" });\n      }\n\n      const user = await userService.findUserById(userId);\n      if (!user) {\n        return res.status(401).json({ error: \"User not found\" });\n      }\n\n      // Attach user info to request\n      req.user = {\n        id: user.id,\n        email: user.email,\n        isAdmin: user.isAdmin,\n      };\n\n      next();\n    } catch (dbError) {\n      console.error(\"Database error in requireAuth:\", dbError);\n      return res.status(500).json({ error: \"Database error during authentication\" });\n    }\n  } catch (error) {\n    console.error(\"Auth middleware error:\", error);\n    return res.status(500).json({ error: \"Authentication error\" });\n  }\n};\n\n// Middleware to check if user is admin\nexport const requireAdmin: RequestHandler = (req, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n\n  if (!req.user.isAdmin) {\n    return res.status(403).json({ error: \"Admin privileges required\" });\n  }\n\n  next();\n};\n\n// Optional auth middleware - sets user if authenticated but doesn't require it\nexport const optionalAuth: RequestHandler = async (req, res, next) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (token) {\n      const decoded = verifyToken(token);\n      if (decoded) {\n        try {\n          // Handle both string and number user IDs\n          const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n          \n          if (!isNaN(userId)) {\n            const user = await userService.findUserById(userId);\n            if (user) {\n              req.user = {\n                id: user.id,\n                email: user.email,\n                isAdmin: user.isAdmin,\n              };\n            }\n          }\n        } catch (dbError) {\n          // Log the error but don't break the request\n          console.warn(\"Database error in optionalAuth:\", dbError);\n          // Continue without setting user\n        }\n      }\n    }\n\n    next();\n  } catch (error) {\n    // Continue without authentication if there's an error\n    console.warn(\"Optional auth error:\", error);\n    next();\n  }\n};\n","import express from 'express';\nimport { prisma } from '../services/database';\nimport { requireAuth } from '../middleware/auth';\n\nconst router = express.Router();\n\n// Get user's favorites\nrouter.get('/', requireAuth, async (req: any, res) => {\n  try {\n    const userId = req.user.id;\n    \n    const favorites = await prisma.favorite.findMany({\n      where: { userId },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    res.json(favorites);\n  } catch (error) {\n    console.error('Error fetching favorites:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch favorites',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Add a favorite\nrouter.post('/', requireAuth, async (req: any, res) => {\n  try {\n    const userId = req.user.id;\n    const {\n      title,\n      price,\n      currency,\n      url,\n      image,\n      store,\n      merchant,\n      stock,\n      rating,\n      reviewsCount,\n      deliveryPrice,\n      details,\n      returnPolicy,\n      condition = 'New'\n    } = req.body;\n\n    if (!title || !url) {\n      return res.status(400).json({ error: 'Title and URL are required' });\n    }\n\n    // Check if already favorited\n    const existingFavorite = await prisma.favorite.findFirst({\n      where: {\n        userId,\n        url\n      }\n    });\n\n    if (existingFavorite) {\n      return res.status(400).json({ error: 'Product already in favorites' });\n    }\n\n    const favorite = await prisma.favorite.create({\n      data: {\n        userId,\n        title,\n        price,\n        currency,\n        url,\n        image,\n        store,\n        merchant,\n        stock,\n        rating: rating ? parseFloat(rating) : null,\n        reviewsCount: reviewsCount ? parseInt(reviewsCount) : null,\n        deliveryPrice,\n        details,\n        returnPolicy,\n        condition\n      }\n    });\n\n    res.json(favorite);\n  } catch (error) {\n    console.error('Error adding favorite:', error);\n    res.status(500).json({ error: 'Failed to add favorite' });\n  }\n});\n\n// Remove a favorite\nrouter.delete('/:id', requireAuth, async (req: any, res) => {\n  try {\n    const userId = req.user.id;\n    const favoriteId = parseInt(req.params.id);\n\n    const favorite = await prisma.favorite.findFirst({\n      where: {\n        id: favoriteId,\n        userId\n      }\n    });\n\n    if (!favorite) {\n      return res.status(404).json({ error: 'Favorite not found' });\n    }\n\n    await prisma.favorite.delete({\n      where: { id: favoriteId }\n    });\n\n    res.json({ message: 'Favorite removed successfully' });\n  } catch (error) {\n    console.error('Error removing favorite:', error);\n    res.status(500).json({ error: 'Failed to remove favorite' });\n  }\n});\n\n// Check if a product is favorited\nrouter.get('/check', requireAuth, async (req: any, res) => {\n  try {\n    const userId = req.user.id;\n    const { url } = req.query;\n\n    if (!url) {\n      return res.status(400).json({ error: 'URL is required' });\n    }\n\n    const favorite = await prisma.favorite.findFirst({\n      where: {\n        userId,\n        url: url as string\n      }\n    });\n\n    res.json({ isFavorited: !!favorite, favoriteId: favorite?.id });\n  } catch (error) {\n    console.error('Error checking favorite status:', error);\n    res.status(500).json({ error: 'Failed to check favorite status' });\n  }\n});\n\nexport default router; ","import { RequestHandler } from \"express\";\nimport { legacySearchHistoryService } from \"../services/database\";\n\ninterface SearchHistoryRequest {\n  url: string;\n  userKey: string; // IP address or session ID\n}\n\nexport const saveSearchHistory: RequestHandler = async (req, res) => {\n  try {\n    const { url, userKey }: SearchHistoryRequest = req.body;\n\n    if (!url || !userKey) {\n      return res.status(400).json({ error: \"Missing url or userKey\" });\n    }\n\n    // Add to legacy search history\n    await legacySearchHistoryService.addSearch(userKey, url);\n\n    res.json({ success: true });\n  } catch (error) {\n    console.error(\"Error saving search history:\", error);\n    res.status(500).json({ error: \"Failed to save search history\" });\n  }\n};\n\nexport const getSearchHistory: RequestHandler = async (req, res) => {\n  try {\n    const userKey = req.query.userKey as string;\n\n    if (!userKey) {\n      return res.status(400).json({ error: \"Missing userKey\" });\n    }\n\n    const historyRecords =\n      await legacySearchHistoryService.getUserSearchHistory(userKey, 10);\n    const history = historyRecords.map((record) => record.url);\n\n    res.json({ history });\n  } catch (error) {\n    console.error(\"Error getting search history:\", error);\n    res.status(500).json({ error: \"Failed to get search history\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { healthCheck } from \"../services/database\";\n\n// Basic health check\nexport const healthCheckHandler: RequestHandler = async (req, res) => {\n  try {\n    const dbHealth = await healthCheck.checkConnection();\n    const stats = await healthCheck.getStats();\n\n    res.json({\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      database: dbHealth,\n      stats: stats,\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: \"unhealthy\",\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n};\n","import { RequestHandler } from \"express\";\n\nexport interface LocationInfo {\n  country: string;\n  countryCode: string;\n  region: string;\n  city?: string;\n  currency: string;\n  timeZone: string;\n}\n\nexport interface LocalDealer {\n  name: string;\n  url: string;\n  country: string;\n  region: string;\n  searchUrlPattern: string;\n  currency: string;\n  priority: number; // Lower = higher priority\n}\n\n// SearchAPI supported countries with their gl codes (Google Shopping API)\nexport const SEARCH_API_SUPPORTED_COUNTRIES: { [key: string]: LocationInfo } = {\n  // Middle East\n  AE: {\n    country: \"United Arab Emirates\",\n    countryCode: \"ae\",\n    region: \"Middle East\",\n    currency: \"AED\",\n    timeZone: \"Asia/Dubai\",\n  },\n  // Americas\n  AI: {\n    country: \"Anguilla\",\n    countryCode: \"ai\",\n    region: \"Caribbean\",\n    currency: \"XCD\",\n    timeZone: \"America/Anguilla\",\n  },\n  AR: {\n    country: \"Argentina\",\n    countryCode: \"ar\",\n    region: \"South America\",\n    currency: \"ARS\",\n    timeZone: \"America/Argentina/Buenos_Aires\",\n  },\n  AU: {\n    country: \"Australia\",\n    countryCode: \"au\",\n    region: \"Asia Pacific\",\n    currency: \"AUD\",\n    timeZone: \"Australia/Sydney\",\n  },\n  BM: {\n    country: \"Bermuda\",\n    countryCode: \"bm\",\n    region: \"North America\",\n    currency: \"BMD\",\n    timeZone: \"Atlantic/Bermuda\",\n  },\n  BR: {\n    country: \"Brazil\",\n    countryCode: \"br\",\n    region: \"South America\",\n    currency: \"BRL\",\n    timeZone: \"America/Sao_Paulo\",\n  },\n  CA: {\n    country: \"Canada\",\n    countryCode: \"ca\",\n    region: \"North America\",\n    currency: \"CAD\",\n    timeZone: \"America/Toronto\",\n  },\n  CL: {\n    country: \"Chile\",\n    countryCode: \"cl\",\n    region: \"South America\",\n    currency: \"CLP\",\n    timeZone: \"America/Santiago\",\n  },\n  CO: {\n    country: \"Colombia\",\n    countryCode: \"co\",\n    region: \"South America\",\n    currency: \"COP\",\n    timeZone: \"America/Bogota\",\n  },\n  MX: {\n    country: \"Mexico\",\n    countryCode: \"mx\",\n    region: \"North America\",\n    currency: \"MXN\",\n    timeZone: \"America/Mexico_City\",\n  },\n  PE: {\n    country: \"Peru\",\n    countryCode: \"pe\",\n    region: \"South America\",\n    currency: \"PEN\",\n    timeZone: \"America/Lima\",\n  },\n  US: {\n    country: \"United States\",\n    countryCode: \"us\",\n    region: \"North America\",\n    currency: \"$\",\n    timeZone: \"America/New_York\",\n  },\n  VE: {\n    country: \"Venezuela\",\n    countryCode: \"ve\",\n    region: \"South America\",\n    currency: \"VES\",\n    timeZone: \"America/Caracas\",\n  },\n  // Europe\n  AT: {\n    country: \"Austria\",\n    countryCode: \"at\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Vienna\",\n  },\n  BE: {\n    country: \"Belgium\",\n    countryCode: \"be\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Brussels\",\n  },\n  BG: {\n    country: \"Bulgaria\",\n    countryCode: \"bg\",\n    region: \"Eastern Europe\",\n    currency: \"BGN\",\n    timeZone: \"Europe/Sofia\",\n  },\n  CH: {\n    country: \"Switzerland\",\n    countryCode: \"ch\",\n    region: \"Western Europe\",\n    currency: \"CHF\",\n    timeZone: \"Europe/Zurich\",\n  },\n  CZ: {\n    country: \"Czech Republic\",\n    countryCode: \"cz\",\n    region: \"Eastern Europe\",\n    currency: \"CZK\",\n    timeZone: \"Europe/Prague\",\n  },\n  DE: {\n    country: \"Germany\",\n    countryCode: \"de\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Berlin\",\n  },\n  DK: {\n    country: \"Denmark\",\n    countryCode: \"dk\",\n    region: \"Nordic\",\n    currency: \"DKK\",\n    timeZone: \"Europe/Copenhagen\",\n  },\n  EE: {\n    country: \"Estonia\",\n    countryCode: \"ee\",\n    region: \"Baltic\",\n    currency: \"€\",\n    timeZone: \"Europe/Tallinn\",\n  },\n  ES: {\n    country: \"Spain\",\n    countryCode: \"es\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Madrid\",\n  },\n  FI: {\n    country: \"Finland\",\n    countryCode: \"fi\",\n    region: \"Nordic\",\n    currency: \"€\",\n    timeZone: \"Europe/Helsinki\",\n  },\n  FR: {\n    country: \"France\",\n    countryCode: \"fr\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Paris\",\n  },\n  GB: {\n    country: \"United Kingdom\",\n    countryCode: \"gb\",\n    region: \"Western Europe\",\n    currency: \"£\",\n    timeZone: \"Europe/London\",\n  },\n  GR: {\n    country: \"Greece\",\n    countryCode: \"gr\",\n    region: \"Southern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Athens\",\n  },\n  HR: {\n    country: \"Croatia\",\n    countryCode: \"hr\",\n    region: \"Eastern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Zagreb\",\n  },\n  HU: {\n    country: \"Hungary\",\n    countryCode: \"hu\",\n    region: \"Eastern Europe\",\n    currency: \"HUF\",\n    timeZone: \"Europe/Budapest\",\n  },\n  IE: {\n    country: \"Ireland\",\n    countryCode: \"ie\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Dublin\",\n  },\n  IT: {\n    country: \"Italy\",\n    countryCode: \"it\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Rome\",\n  },\n  LT: {\n    country: \"Lithuania\",\n    countryCode: \"lt\",\n    region: \"Baltic\",\n    currency: \"€\",\n    timeZone: \"Europe/Vilnius\",\n  },\n  LV: {\n    country: \"Latvia\",\n    countryCode: \"lv\",\n    region: \"Baltic\",\n    currency: \"€\",\n    timeZone: \"Europe/Riga\",\n  },\n  LU: {\n    country: \"Luxembourg\",\n    countryCode: \"lu\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Luxembourg\",\n  },\n  MT: {\n    country: \"Malta\",\n    countryCode: \"mt\",\n    region: \"Southern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Malta\",\n  },\n  NL: {\n    country: \"Netherlands\",\n    countryCode: \"nl\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Amsterdam\",\n  },\n  NO: {\n    country: \"Norway\",\n    countryCode: \"no\",\n    region: \"Nordic\",\n    currency: \"NOK\",\n    timeZone: \"Europe/Oslo\",\n  },\n  PL: {\n    country: \"Poland\",\n    countryCode: \"pl\",\n    region: \"Eastern Europe\",\n    currency: \"PLN\",\n    timeZone: \"Europe/Warsaw\",\n  },\n  PT: {\n    country: \"Portugal\",\n    countryCode: \"pt\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Lisbon\",\n  },\n  RO: {\n    country: \"Romania\",\n    countryCode: \"ro\",\n    region: \"Eastern Europe\",\n    currency: \"RON\",\n    timeZone: \"Europe/Bucharest\",\n  },\n  SE: {\n    country: \"Sweden\",\n    countryCode: \"se\",\n    region: \"Nordic\",\n    currency: \"SEK\",\n    timeZone: \"Europe/Stockholm\",\n  },\n  SI: {\n    country: \"Slovenia\",\n    countryCode: \"si\",\n    region: \"Eastern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Ljubljana\",\n  },\n  SK: {\n    country: \"Slovakia\",\n    countryCode: \"sk\",\n    region: \"Eastern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Bratislava\",\n  },\n  // Asia Pacific\n  HK: {\n    country: \"Hong Kong\",\n    countryCode: \"hk\",\n    region: \"Asia Pacific\",\n    currency: \"HKD\",\n    timeZone: \"Asia/Hong_Kong\",\n  },\n  ID: {\n    country: \"Indonesia\",\n    countryCode: \"id\",\n    region: \"Asia Pacific\",\n    currency: \"IDR\",\n    timeZone: \"Asia/Jakarta\",\n  },\n  IN: {\n    country: \"India\",\n    countryCode: \"in\",\n    region: \"Asia Pacific\",\n    currency: \"₹\",\n    timeZone: \"Asia/Kolkata\",\n  },\n  JP: {\n    country: \"Japan\",\n    countryCode: \"jp\",\n    region: \"Asia Pacific\",\n    currency: \"¥\",\n    timeZone: \"Asia/Tokyo\",\n  },\n  KR: {\n    country: \"South Korea\",\n    countryCode: \"kr\",\n    region: \"Asia Pacific\",\n    currency: \"₩\",\n    timeZone: \"Asia/Seoul\",\n  },\n  MY: {\n    country: \"Malaysia\",\n    countryCode: \"my\",\n    region: \"Asia Pacific\",\n    currency: \"MYR\",\n    timeZone: \"Asia/Kuala_Lumpur\",\n  },\n  NZ: {\n    country: \"New Zealand\",\n    countryCode: \"nz\",\n    region: \"Asia Pacific\",\n    currency: \"NZD\",\n    timeZone: \"Pacific/Auckland\",\n  },\n  PH: {\n    country: \"Philippines\",\n    countryCode: \"ph\",\n    region: \"Asia Pacific\",\n    currency: \"PHP\",\n    timeZone: \"Asia/Manila\",\n  },\n  SG: {\n    country: \"Singapore\",\n    countryCode: \"sg\",\n    region: \"Asia Pacific\",\n    currency: \"SGD\",\n    timeZone: \"Asia/Singapore\",\n  },\n  TH: {\n    country: \"Thailand\",\n    countryCode: \"th\",\n    region: \"Asia Pacific\",\n    currency: \"THB\",\n    timeZone: \"Asia/Bangkok\",\n  },\n  TW: {\n    country: \"Taiwan\",\n    countryCode: \"tw\",\n    region: \"Asia Pacific\",\n    currency: \"TWD\",\n    timeZone: \"Asia/Taipei\",\n  },\n  VN: {\n    country: \"Vietnam\",\n    countryCode: \"vn\",\n    region: \"Asia Pacific\",\n    currency: \"VND\",\n    timeZone: \"Asia/Ho_Chi_Minh\",\n  },\n  // Africa\n  EG: {\n    country: \"Egypt\",\n    countryCode: \"eg\",\n    region: \"Africa\",\n    currency: \"EGP\",\n    timeZone: \"Africa/Cairo\",\n  },\n  GH: {\n    country: \"Ghana\",\n    countryCode: \"gh\",\n    region: \"Africa\",\n    currency: \"GHS\",\n    timeZone: \"Africa/Accra\",\n  },\n  KE: {\n    country: \"Kenya\",\n    countryCode: \"ke\",\n    region: \"Africa\",\n    currency: \"KES\",\n    timeZone: \"Africa/Nairobi\",\n  },\n  NG: {\n    country: \"Nigeria\",\n    countryCode: \"ng\",\n    region: \"Africa\",\n    currency: \"NGN\",\n    timeZone: \"Africa/Lagos\",\n  },\n  ZA: {\n    country: \"South Africa\",\n    countryCode: \"za\",\n    region: \"Africa\",\n    currency: \"ZAR\",\n    timeZone: \"Africa/Johannesburg\",\n  },\n  // Middle East\n  IL: {\n    country: \"Israel\",\n    countryCode: \"il\",\n    region: \"Middle East\",\n    currency: \"ILS\",\n    timeZone: \"Asia/Jerusalem\",\n  },\n  SA: {\n    country: \"Saudi Arabia\",\n    countryCode: \"sa\",\n    region: \"Middle East\",\n    currency: \"SAR\",\n    timeZone: \"Asia/Riyadh\",\n  },\n  TR: {\n    country: \"Turkey\",\n    countryCode: \"tr\",\n    region: \"Middle East\",\n    currency: \"TRY\",\n    timeZone: \"Europe/Istanbul\",\n  },\n};\n\n// Database of local dealers by region\nexport const localDealers: LocalDealer[] = [\n  // Lithuania\n  {\n    name: \"pigu.lt\",\n    url: \"https://pigu.lt\",\n    country: \"Lithuania\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://pigu.lt/search?q={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n  {\n    name: \"varle.lt\",\n    url: \"https://varle.lt\",\n    country: \"Lithuania\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://varle.lt/search?q={query}\",\n    currency: \"€\",\n    priority: 2,\n  },\n  {\n    name: \"kilobaitas.lt\",\n    url: \"https://kilobaitas.lt\",\n    country: \"Lithuania\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://kilobaitas.lt/search?q={query}\",\n    currency: \"€\",\n    priority: 3,\n  },\n\n  // Latvia\n  {\n    name: \"1a.lv\",\n    url: \"https://1a.lv\",\n    country: \"Latvia\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://1a.lv/search?q={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n  {\n    name: \"220.lv\",\n    url: \"https://220.lv\",\n    country: \"Latvia\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://220.lv/search?q={query}\",\n    currency: \"€\",\n    priority: 2,\n  },\n\n  // Estonia\n  {\n    name: \"kaup24.ee\",\n    url: \"https://kaup24.ee\",\n    country: \"Estonia\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://kaup24.ee/search?q={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n\n  // Germany\n  {\n    name: \"amazon.de\",\n    url: \"https://amazon.de\",\n    country: \"Germany\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://amazon.de/s?k={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n  {\n    name: \"mediamarkt.de\",\n    url: \"https://mediamarkt.de\",\n    country: \"Germany\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://mediamarkt.de/search?query={query}\",\n    currency: \"€\",\n    priority: 2,\n  },\n\n  // France\n  {\n    name: \"amazon.fr\",\n    url: \"https://amazon.fr\",\n    country: \"France\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://amazon.fr/s?k={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n  {\n    name: \"fnac.com\",\n    url: \"https://fnac.com\",\n    country: \"France\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://fnac.com/search?query={query}\",\n    currency: \"€\",\n    priority: 2,\n  },\n\n  // UK\n  {\n    name: \"amazon.co.uk\",\n    url: \"https://amazon.co.uk\",\n    country: \"United Kingdom\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://amazon.co.uk/s?k={query}\",\n    currency: \"£\",\n    priority: 1,\n  },\n  {\n    name: \"currys.co.uk\",\n    url: \"https://currys.co.uk\",\n    country: \"United Kingdom\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://currys.co.uk/search?q={query}\",\n    currency: \"£\",\n    priority: 2,\n  },\n\n  // Poland\n  {\n    name: \"allegro.pl\",\n    url: \"https://allegro.pl\",\n    country: \"Poland\",\n    region: \"Eastern Europe\",\n    searchUrlPattern: \"https://allegro.pl/listing?string={query}\",\n    currency: \"PLN\",\n    priority: 1,\n  },\n  {\n    name: \"x-kom.pl\",\n    url: \"https://x-kom.pl\",\n    country: \"Poland\",\n    region: \"Eastern Europe\",\n    searchUrlPattern: \"https://x-kom.pl/search?q={query}\",\n    currency: \"PLN\",\n    priority: 2,\n  },\n\n  // Nordic countries\n  {\n    name: \"elgiganten.dk\",\n    url: \"https://elgiganten.dk\",\n    country: \"Denmark\",\n    region: \"Nordic\",\n    searchUrlPattern: \"https://elgiganten.dk/search?SearchTerm={query}\",\n    currency: \"DKK\",\n    priority: 1,\n  },\n  {\n    name: \"elkjop.no\",\n    url: \"https://elkjop.no\",\n    country: \"Norway\",\n    region: \"Nordic\",\n    searchUrlPattern: \"https://elkjop.no/search?SearchTerm={query}\",\n    currency: \"NOK\",\n    priority: 1,\n  },\n  {\n    name: \"power.fi\",\n    url: \"https://power.fi\",\n    country: \"Finland\",\n    region: \"Nordic\",\n    searchUrlPattern: \"https://power.fi/search?SearchTerm={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n];\n\n// Detect user location from IP (in production, use a proper IP geolocation service)\nexport function detectLocationFromIP(ip: string): LocationInfo {\n  // This is a simplified implementation\n  // In production, you would use services like:\n  // - MaxMind GeoIP2\n  // - ipapi.co\n  // - ip-api.com\n  // - CloudFlare's CF-IPCountry header\n\n  // For now, return default based on common patterns\n  if (\n    ip.includes(\"192.168\") ||\n    ip.includes(\"127.0\") ||\n    ip.includes(\"10.\") ||\n    ip.includes(\"172.\")\n  ) {\n    // Local development - default to Lithuania since that's where pigu.lt is popular\n    return {\n      country: \"Lithuania\",\n      countryCode: \"LT\",\n      region: \"Baltic\",\n      city: \"Vilnius\",\n      currency: \"€\",\n      timeZone: \"Europe/Vilnius\",\n    };\n  }\n\n  // Default to US for unknown IPs\n  return {\n    country: \"United States\",\n    countryCode: \"US\",\n    region: \"North America\",\n    currency: \"$\",\n    timeZone: \"America/New_York\",\n  };\n}\n\n// Detect location from browser headers\nexport function detectLocationFromHeaders(headers: any): LocationInfo | null {\n  // Check CloudFlare country header\n  if (headers[\"cf-ipcountry\"]) {\n    const countryCode = headers[\"cf-ipcountry\"].toUpperCase();\n    return getLocationByCountryCode(countryCode);\n  }\n\n  // Check Accept-Language header for hints\n  const acceptLanguage = headers[\"accept-language\"];\n  if (acceptLanguage) {\n    if (acceptLanguage.includes(\"lt\")) {\n      return {\n        country: \"Lithuania\",\n        countryCode: \"LT\",\n        region: \"Baltic\",\n        currency: \"€\",\n        timeZone: \"Europe/Vilnius\",\n      };\n    }\n    if (acceptLanguage.includes(\"lv\")) {\n      return {\n        country: \"Latvia\",\n        countryCode: \"LV\",\n        region: \"Baltic\",\n        currency: \"€\",\n        timeZone: \"Europe/Riga\",\n      };\n    }\n    if (acceptLanguage.includes(\"et\")) {\n      return {\n        country: \"Estonia\",\n        countryCode: \"EE\",\n        region: \"Baltic\",\n        currency: \"€\",\n        timeZone: \"Europe/Tallinn\",\n      };\n    }\n    if (acceptLanguage.includes(\"de\")) {\n      return {\n        country: \"Germany\",\n        countryCode: \"DE\",\n        region: \"Western Europe\",\n        currency: \"€\",\n        timeZone: \"Europe/Berlin\",\n      };\n    }\n  }\n\n  return null;\n}\n\n// Get location info by country code\nfunction getLocationByCountryCode(countryCode: string): LocationInfo {\n  // Only return supported countries\n  const supportedCountry = SEARCH_API_SUPPORTED_COUNTRIES[countryCode];\n  if (supportedCountry) {\n    return supportedCountry;\n  }\n  \n  // Fallback to US if country is not supported\n  return SEARCH_API_SUPPORTED_COUNTRIES[\"US\"];\n}\n\n// Get list of all supported countries\nexport function getSupportedCountries(): LocationInfo[] {\n  return Object.values(SEARCH_API_SUPPORTED_COUNTRIES).sort((a, b) => \n    a.country.localeCompare(b.country)\n  );\n}\n\n// Validate if a country is supported by SearchAPI\nexport function isCountrySupported(countryCode: string): boolean {\n  // Convert to lowercase for comparison since gl codes are lowercase\n  const normalizedCode = countryCode.toLowerCase();\n  return Object.values(SEARCH_API_SUPPORTED_COUNTRIES).some(\n    (country: any) => country.countryCode === normalizedCode\n  );\n}\n\n// Get local dealers for a specific location\nexport function getLocalDealers(location: LocationInfo): LocalDealer[] {\n  return localDealers\n    .filter(\n      (dealer) =>\n        dealer.country === location.country ||\n        dealer.region === location.region,\n    )\n    .sort((a, b) => a.priority - b.priority);\n}\n\n// Get location detection handler\nexport const getLocationHandler: RequestHandler = async (req, res) => {\n  try {\n    // If it's a POST request with location data, validate and use that\n    if (req.method === 'POST' && req.body && req.body.location) {\n      const userLocation = req.body.location as LocationInfo;\n      \n      // Validate that the country is supported\n      if (!isCountrySupported(userLocation.countryCode)) {\n        return res.status(400).json({ \n          error: \"Country not supported by SearchAPI\",\n          message: `Country code '${userLocation.countryCode}' is not supported. Please choose from the supported countries list.`\n        });\n      }\n      \n      const dealers = getLocalDealers(userLocation);\n      \n      res.json({\n        location: userLocation,\n        localDealers: dealers.slice(0, 5), // Return top 5 local dealers\n      });\n      return;\n    }\n\n    // For GET requests, detect location automatically\n    const clientIP = req.ip || req.socket.remoteAddress || \"127.0.0.1\";\n\n    // Try to detect from headers first\n    let location = detectLocationFromHeaders(req.headers);\n\n    // Fallback to IP detection\n    if (!location) {\n      location = detectLocationFromIP(clientIP);\n    }\n\n    // Ensure the detected location is supported\n    if (!isCountrySupported(location.countryCode)) {\n      // Fallback to US if detected country is not supported\n      location = SEARCH_API_SUPPORTED_COUNTRIES[\"US\"];\n    }\n\n    // Get local dealers\n    const dealers = getLocalDealers(location);\n\n    res.json({\n      location,\n      localDealers: dealers.slice(0, 5), // Return top 5 local dealers\n    });\n  } catch (error) {\n    console.error(\"Location detection error:\", error);\n    // Return a fallback response instead of 500 error\n    res.json({\n      location: SEARCH_API_SUPPORTED_COUNTRIES[\"US\"],\n      localDealers: [],\n      error: \"Failed to detect location\"\n    });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { affiliateService } from \"../services/database\";\nimport { requireAdminAuth } from \"../middleware/admin-auth\";\n\n// Get all affiliate URLs\nexport const getAllAffiliateUrls: RequestHandler = async (req, res) => {\n  try {\n    const urls = await affiliateService.getAllAffiliateUrls();\n    res.json({ success: true, urls });\n  } catch (error) {\n    console.error(\"Error fetching affiliate URLs:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch affiliate URLs\" });\n  }\n};\n\n// Get affiliate statistics\nexport const getAffiliateStats: RequestHandler = async (req, res) => {\n  try {\n    const stats = await affiliateService.getAffiliateStats();\n    res.json({ success: true, stats });\n  } catch (error) {\n    console.error(\"Error fetching affiliate stats:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch affiliate stats\" });\n  }\n};\n\n// Create new affiliate URL\nexport const createAffiliateUrl: RequestHandler = async (req, res) => {\n  try {\n    const { name, url, description, isActive } = req.body;\n\n    if (!name || !url) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Name and URL are required\" \n      });\n    }\n\n    // Validate URL format\n    try {\n      new URL(url);\n    } catch {\n      return res.status(400).json({ \n        success: false, \n        error: \"Invalid URL format\" \n      });\n    }\n\n    const affiliateUrl = await affiliateService.createAffiliateUrl({\n      name,\n      url,\n      description,\n      isActive,\n    });\n\n    res.status(201).json({ \n      success: true, \n      affiliateUrl,\n      message: \"Affiliate URL created successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error creating affiliate URL:\", error);\n    res.status(500).json({ success: false, error: \"Failed to create affiliate URL\" });\n  }\n};\n\n// Update affiliate URL\nexport const updateAffiliateUrl: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, url, description, isActive } = req.body;\n\n    if (!name || !url) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Name and URL are required\" \n      });\n    }\n\n    // Validate URL format\n    try {\n      new URL(url);\n    } catch {\n      return res.status(400).json({ \n        success: false, \n        error: \"Invalid URL format\" \n      });\n    }\n\n    const affiliateUrl = await affiliateService.updateAffiliateUrl(parseInt(id), {\n      name,\n      url,\n      description,\n      isActive,\n    });\n\n    res.json({ \n      success: true, \n      affiliateUrl,\n      message: \"Affiliate URL updated successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error updating affiliate URL:\", error);\n    res.status(500).json({ success: false, error: \"Failed to update affiliate URL\" });\n  }\n};\n\n// Delete affiliate URL\nexport const deleteAffiliateUrl: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    await affiliateService.deleteAffiliateUrl(parseInt(id));\n    \n    res.json({ \n      success: true, \n      message: \"Affiliate URL deleted successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error deleting affiliate URL:\", error);\n    res.status(500).json({ success: false, error: \"Failed to delete affiliate URL\" });\n  }\n};\n\n// Track affiliate click (public endpoint)\nexport const trackAffiliateClick: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    await affiliateService.incrementClicks(parseInt(id));\n    \n    // Redirect to the affiliate URL\n    const affiliateUrl = await affiliateService.getAffiliateUrlById(parseInt(id));\n    if (affiliateUrl && affiliateUrl.isActive) {\n      res.redirect(affiliateUrl.url);\n    } else {\n      res.status(404).json({ success: false, error: \"Affiliate URL not found or inactive\" });\n    }\n  } catch (error) {\n    console.error(\"Error tracking affiliate click:\", error);\n    res.status(500).json({ success: false, error: \"Failed to track click\" });\n  }\n};\n\n// Track affiliate conversion (webhook endpoint)\nexport const trackAffiliateConversion: RequestHandler = async (req, res) => {\n  try {\n    const { id, revenue = 0 } = req.body;\n    \n    if (!id) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Affiliate URL ID is required\" \n      });\n    }\n\n    await affiliateService.addConversion(parseInt(id), parseFloat(revenue));\n    \n    res.json({ \n      success: true, \n      message: \"Conversion tracked successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error tracking affiliate conversion:\", error);\n    res.status(500).json({ success: false, error: \"Failed to track conversion\" });\n  }\n}; ","import { RequestHandler } from \"express\";\nimport { businessService } from \"../services/database\";\nimport { requireAdminAuth } from \"../middleware/admin-auth\";\n\n// Register a new business\nexport const registerBusiness: RequestHandler = async (req, res) => {\n  try {\n    const { \n      name, \n      domain, \n      website, \n      description, \n      logo, \n      contactEmail, \n      contactPhone, \n      address, \n      country, \n      category, \n      commission \n    } = req.body;\n\n    if (!name || !domain || !website) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Name, domain, and website are required\" \n      });\n    }\n\n    // Validate domain format\n    const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/;\n    if (!domainRegex.test(domain)) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Invalid domain format\" \n      });\n    }\n\n    // Check if domain already exists\n    const existingBusiness = await businessService.findBusinessByDomain(domain);\n    if (existingBusiness) {\n      return res.status(400).json({ \n        success: false, \n        error: \"A business with this domain already exists\" \n      });\n    }\n\n    const business = await businessService.createBusiness({\n      name,\n      domain,\n      website,\n      description,\n      logo,\n      contactEmail,\n      contactPhone,\n      address,\n      country,\n      category,\n      commission: commission ? parseFloat(commission) : 0,\n      email: contactEmail || `contact@${domain}`,\n      password: \"defaultpassword123\", // This will be hashed in the service\n    });\n\n    res.status(201).json({ \n      success: true, \n      business,\n      message: \"Business registered successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error registering business:\", error);\n    res.status(500).json({ success: false, error: \"Failed to register business\" });\n  }\n};\n\n// Get all businesses (admin only)\nexport const getAllBusinesses: RequestHandler = async (req, res) => {\n  try {\n    const businesses = await businessService.getAllBusinesses();\n    res.json({ success: true, businesses });\n  } catch (error) {\n    console.error(\"Error fetching businesses:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch businesses\" });\n  }\n};\n\n// Get active businesses (public)\nexport const getActiveBusinesses: RequestHandler = async (req, res) => {\n  try {\n    const businesses = await businessService.getActiveBusinesses();\n    res.json({ success: true, businesses });\n  } catch (error) {\n    console.error(\"Error fetching active businesses:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch businesses\" });\n  }\n};\n\n// Get business by domain\nexport const getBusinessByDomain: RequestHandler = async (req, res) => {\n  try {\n    const { domain } = req.params;\n    const business = await businessService.findBusinessByDomain(domain);\n    \n    if (!business) {\n      return res.status(404).json({ \n        success: false, \n        error: \"Business not found\" \n      });\n    }\n\n    res.json({ success: true, business });\n  } catch (error) {\n    console.error(\"Error fetching business:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch business\" });\n  }\n};\n\n// Update business (admin only)\nexport const updateBusiness: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const business = await businessService.updateBusiness(parseInt(id), updateData);\n    res.json({ \n      success: true, \n      business,\n      message: \"Business updated successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error updating business:\", error);\n    res.status(500).json({ success: false, error: \"Failed to update business\" });\n  }\n};\n\n// Delete business (admin only)\nexport const deleteBusiness: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    await businessService.deleteBusiness(parseInt(id));\n    \n    res.json({ \n      success: true, \n      message: \"Business deleted successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error deleting business:\", error);\n    res.status(500).json({ success: false, error: \"Failed to delete business\" });\n  }\n};\n\n// Verify business (admin only)\nexport const verifyBusiness: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const business = await businessService.verifyBusiness(parseInt(id));\n    \n    res.json({ \n      success: true, \n      business,\n      message: \"Business verified successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error verifying business:\", error);\n    res.status(500).json({ success: false, error: \"Failed to verify business\" });\n  }\n};\n\n// Get business statistics (admin only)\nexport const getBusinessStats: RequestHandler = async (req, res) => {\n  try {\n    const stats = await businessService.getBusinessStats();\n    res.json({ success: true, stats });\n  } catch (error) {\n    console.error(\"Error fetching business stats:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch business stats\" });\n  }\n};\n\n// Update admin commission rate for a business (admin only)\nexport const updateBusinessCommission: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { adminCommissionRate } = req.body;\n\n    if (typeof adminCommissionRate !== 'number' || adminCommissionRate < 0 || adminCommissionRate > 100) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Commission rate must be a number between 0 and 100\" \n      });\n    }\n\n    const business = await businessService.updateAdminCommissionRate(parseInt(id), adminCommissionRate);\n    res.json({ \n      success: true, \n      business,\n      message: \"Commission rate updated successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error updating business commission:\", error);\n    res.status(500).json({ success: false, error: \"Failed to update commission rate\" });\n  }\n};\n\n// Update business password (admin only)\nexport const updateBusinessPassword: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { password } = req.body;\n\n    if (!password) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Password is required\" \n      });\n    }\n\n    // Validate password strength\n    if (password.length < 8) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Password must be at least 8 characters long\" \n      });\n    }\n\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/;\n    if (!passwordRegex.test(password)) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Password must contain uppercase, lowercase, and number\" \n      });\n    }\n\n    const business = await businessService.updateBusinessPassword(parseInt(id), password);\n    \n    if (!business) {\n      return res.status(404).json({ \n        success: false, \n        error: \"Business not found\" \n      });\n    }\n\n    res.json({ \n      success: true, \n      message: \"Business password updated successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error updating business password:\", error);\n    res.status(500).json({ success: false, error: \"Failed to update business password\" });\n  }\n};\n\n// Get detailed business statistics for admin\nexport const getBusinessDetailedStats: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const stats = await businessService.getBusinessStatistics(parseInt(id));\n    \n    if (!stats) {\n      return res.status(404).json({ \n        success: false, \n        error: \"Business not found\" \n      });\n    }\n\n    res.json({ success: true, stats });\n  } catch (error) {\n    console.error(\"Error fetching business detailed stats:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch business statistics\" });\n  }\n}; ","import { RequestHandler } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { businessService } from \"../services/database\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Helper function to generate JWT token for business\nfunction generateBusinessToken(businessId: number, email: string) {\n  return jwt.sign(\n    { businessId, email, type: \"business\" },\n    JWT_SECRET,\n    { expiresIn: \"7d\" }\n  );\n}\n\n// Helper function to verify business token\nfunction verifyBusinessToken(token: string) {\n  try {\n    return jwt.verify(token, JWT_SECRET) as any;\n  } catch (error) {\n    return null;\n  }\n}\n\n// Business registration with authentication\nexport const registerBusiness: RequestHandler = async (req, res) => {\n  try {\n    const { \n      name, \n      domain, \n      website, \n      description, \n      logo, \n      contactEmail, \n      contactPhone, \n      address, \n      country, \n      category, \n      commission,\n      email,\n      password\n    } = req.body;\n\n    if (!name || !domain || !website || !email || !password) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Name, domain, website, email, and password are required\" \n      });\n    }\n\n    // Validate domain format\n    const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/;\n    if (!domainRegex.test(domain)) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Invalid domain format\" \n      });\n    }\n\n    // Check if domain already exists\n    const existingBusinessByDomain = await businessService.findBusinessByDomain(domain);\n    if (existingBusinessByDomain) {\n      return res.status(400).json({ \n        success: false, \n        error: \"A business with this domain already exists\" \n      });\n    }\n\n    // Check if email already exists\n    const existingBusinessByEmail = await businessService.findBusinessByEmail(email);\n    if (existingBusinessByEmail) {\n      return res.status(400).json({ \n        success: false, \n        error: \"A business with this email already exists\" \n      });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    const business = await businessService.createBusiness({\n      name,\n      domain,\n      website,\n      description,\n      logo,\n      contactEmail,\n      contactPhone,\n      address,\n      country,\n      category,\n      commission: commission ? parseFloat(commission) : 0,\n      email,\n      password: hashedPassword,\n    });\n\n    // Generate token\n    const token = generateBusinessToken(business.id, business.email);\n\n    // Set cookie\n    res.cookie(\"business_token\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    });\n\n    res.status(201).json({ \n      success: true, \n      business: {\n        id: business.id,\n        name: business.name,\n        domain: business.domain,\n        email: business.email,\n      },\n      message: \"Business registered successfully\" \n    });\n  } catch (error) {\n    console.error(\"Error registering business:\", error);\n    res.status(500).json({ success: false, error: \"Failed to register business\" });\n  }\n};\n\n// Business login\nexport const loginBusiness: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Email and password are required\" \n      });\n    }\n\n    const business = await businessService.findBusinessByEmail(email);\n    if (!business) {\n      return res.status(401).json({ \n        success: false, \n        error: \"Invalid email or password\" \n      });\n    }\n\n    if (!business.isActive) {\n      return res.status(401).json({ \n        success: false, \n        error: \"Business account is deactivated\" \n      });\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, business.password);\n    if (!isPasswordValid) {\n      return res.status(401).json({ \n        success: false, \n        error: \"Invalid email or password\" \n      });\n    }\n\n    // Generate token\n    const token = generateBusinessToken(business.id, business.email);\n\n    // Set cookie\n    res.cookie(\"business_token\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    });\n\n    res.json({ \n      success: true, \n      business: {\n        id: business.id,\n        name: business.name,\n        domain: business.domain,\n        email: business.email,\n      },\n      message: \"Business login successful\" \n    });\n  } catch (error) {\n    console.error(\"Error logging in business:\", error);\n    res.status(500).json({ success: false, error: \"Failed to login\" });\n  }\n};\n\n// Get current business\nexport const getCurrentBusiness: RequestHandler = async (req, res) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.business_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.json({ \n        business: null, \n        authenticated: false \n      });\n    }\n\n    const decoded = verifyBusinessToken(token);\n    if (!decoded || decoded.type !== \"business\") {\n      return res.json({ \n        business: null, \n        authenticated: false \n      });\n    }\n\n    const business = await businessService.findBusinessById(decoded.businessId);\n    if (!business) {\n      return res.json({ \n        business: null, \n        authenticated: false \n      });\n    }\n\n    res.json({ \n      business: {\n        id: business.id,\n        name: business.name,\n        domain: business.domain,\n        email: business.email,\n      },\n      authenticated: true \n    });\n  } catch (error) {\n    console.error(\"Error getting current business:\", error);\n    res.json({ \n      business: null, \n      authenticated: false \n    });\n  }\n};\n\n// Business logout\nexport const logoutBusiness: RequestHandler = async (req, res) => {\n  res.clearCookie(\"business_token\");\n  res.json({ success: true, message: \"Business logged out successfully\" });\n};\n\n// Get business statistics\nexport const getBusinessStats: RequestHandler = async (req, res) => {\n  try {\n    // Check for business authentication\n    let token = req.cookies.business_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.status(401).json({ \n        success: false, \n        error: \"Not authenticated\" \n      });\n    }\n\n    const decoded = verifyBusinessToken(token);\n    if (!decoded || decoded.type !== \"business\") {\n      return res.status(401).json({ \n        success: false, \n        error: \"Invalid token\" \n      });\n    }\n\n    const stats = await businessService.getBusinessStatistics(decoded.businessId);\n    if (!stats) {\n      return res.status(404).json({ \n        success: false, \n        error: \"Business not found\" \n      });\n    }\n\n    res.json({ success: true, stats });\n  } catch (error) {\n    console.error(\"Error getting business stats:\", error);\n    res.status(500).json({ success: false, error: \"Failed to get business statistics\" });\n  }\n}; ","import { RequestHandler } from \"express\";\nimport rateLimit, { ipKeyGenerator } from 'express-rate-limit';\nimport { body, validationResult } from 'express-validator';\nimport mcache from 'memory-cache';\n\n// Rate limiting middleware\nexport const authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 attempts per window\n  message: { error: 'Too many login attempts, please try again later' },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: true,\n});\n\nexport const apiRateLimit = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 100, // 100 requests per minute\n  message: { error: 'Too many requests, please try again later' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nexport const businessRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 10, // 10 attempts per window\n  message: { error: 'Too many business operations, please try again later' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Input validation middleware\nexport const validateRegistration = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Please provide a valid email address'),\n  body('password')\n    .isLength({ min: 8 })\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/)\n    .withMessage('Password must be at least 8 characters with uppercase, lowercase, and number'),\n];\n\nexport const validateBusinessRegistration = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Please provide a valid email address'),\n  body('password')\n    .isLength({ min: 8 })\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/)\n    .withMessage('Password must be at least 8 characters with uppercase, lowercase, and number'),\n  body('name')\n    .trim()\n    .isLength({ min: 2, max: 100 })\n    .withMessage('Business name must be between 2 and 100 characters'),\n  body('domain')\n    .isFQDN()\n    .withMessage('Please provide a valid domain (e.g., example.com)'),\n  body('website')\n    .custom((value) => {\n      // Accept if it's a valid URL (with protocol)\n      try {\n        new URL(value);\n        return true;\n      } catch {}\n      // Accept if it's a valid FQDN (plain domain)\n      const fqdnRegex = /^(?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.[A-Za-z]{2,}$/;\n      if (fqdnRegex.test(value)) return true;\n      throw new Error('Please provide a valid website URL or domain (e.g., example.com or https://example.com)');\n    }),\n];\n\nexport const validateLogin = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Please provide a valid email address'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required'),\n];\n\nexport const handleValidationErrors: RequestHandler = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ \n      error: 'Validation failed', \n      details: errors.array() \n    });\n  }\n  next();\n};\n\n// Caching middleware\nexport const cache = (duration: number) => {\n  return (req: any, res: any, next: any) => {\n    const key = `__express__${req.originalUrl || req.url}`;\n    const cachedBody = mcache.get(key);\n    \n    if (cachedBody) {\n      res.send(cachedBody);\n      return;\n    }\n    \n    res.sendResponse = res.send;\n    res.send = (body: any) => {\n      mcache.put(key, body, duration * 1000);\n      res.sendResponse(body);\n    };\n    next();\n  };\n};\n\n// Security headers middleware\nexport const securityHeaders: RequestHandler = (req, res, next) => {\n  // Prevent clickjacking\n  res.setHeader('X-Frame-Options', 'DENY');\n  \n  // Prevent MIME type sniffing\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  \n  // XSS protection\n  res.setHeader('X-XSS-Protection', '1; mode=block');\n  \n  // Referrer policy\n  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n  \n  // Permissions policy\n  res.setHeader('Permissions-Policy', 'geolocation=(), microphone=(), camera=()');\n  \n  next();\n};\n\n// Request logging middleware\nexport const requestLogger: RequestHandler = (req, res, next) => {\n  const start = Date.now();\n  \n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    const logData = {\n      method: req.method,\n      url: req.url,\n      status: res.statusCode,\n      duration: `${duration}ms`,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip || req.connection.remoteAddress,\n      timestamp: new Date().toISOString(),\n    };\n    \n    // Log security-relevant events\n    if (res.statusCode === 401 || res.statusCode === 403) {\n      console.warn('Security event:', logData);\n    } else if (res.statusCode >= 400) {\n      console.error('Error event:', logData);\n    } else {\n      console.log('Request:', logData);\n    }\n  });\n  \n  next();\n};\n\n// Input sanitization middleware\nexport const sanitizeInput: RequestHandler = (req, res, next) => {\n  // Sanitize body\n  if (req.body) {\n    Object.keys(req.body).forEach(key => {\n      if (typeof req.body[key] === 'string') {\n        req.body[key] = req.body[key].trim();\n      }\n    });\n  }\n  \n  // Sanitize query parameters\n  if (req.query) {\n    Object.keys(req.query).forEach(key => {\n      if (typeof req.query[key] === 'string') {\n        req.query[key] = (req.query[key] as string).trim();\n      }\n    });\n  }\n  \n  next();\n};\n\n// URL validation middleware\nexport const validateUrl: RequestHandler = (req, res, next) => {\n  const url = req.body?.url || req.query?.url;\n  \n  if (url) {\n    try {\n      const parsedUrl = new URL(url);\n      \n      // Check for allowed protocols\n      if (!['http:', 'https:'].includes(parsedUrl.protocol)) {\n        return res.status(400).json({ error: 'Invalid URL protocol' });\n      }\n      \n      // Check for allowed domains (optional)\n      const allowedDomains = [\n        'amazon.com', 'amazon.co.uk', 'amazon.de', 'amazon.fr', 'amazon.it', 'amazon.es',\n        'ebay.com', 'ebay.co.uk', 'ebay.de', 'ebay.fr', 'ebay.it', 'ebay.es',\n        'walmart.com', 'bestbuy.com', 'target.com', 'apple.com', 'playstation.com',\n        'newegg.com', 'costco.com', 'larq.com', 'livelarq.com', 'sonos.com',\n        'shopify.com', 'etsy.com', 'aliexpress.com', 'banggood.com', 'gearbest.com'\n      ];\n      \n      const hostname = parsedUrl.hostname.toLowerCase().replace('www.', '');\n      if (!allowedDomains.some(domain => hostname.includes(domain))) {\n        console.warn(`Attempted access to non-whitelisted domain: ${hostname}`);\n        // Don't block, just log for monitoring\n      }\n      \n    } catch (error) {\n      return res.status(400).json({ error: 'Invalid URL format' });\n    }\n  }\n  \n  next();\n}; ","import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { businessService } from \"../services/database\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Helper function to verify business token\nfunction verifyBusinessToken(token: string) {\n  try {\n    return jwt.verify(token, JWT_SECRET) as any;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport const requireBusinessAuth = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.business_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.status(401).json({ \n        success: false, \n        error: \"Authentication required\" \n      });\n    }\n\n    const decoded = verifyBusinessToken(token);\n    if (!decoded || decoded.type !== \"business\") {\n      return res.status(401).json({ \n        success: false, \n        error: \"Invalid token\" \n      });\n    }\n\n    const business = await businessService.findBusinessById(decoded.businessId);\n    if (!business) {\n      return res.status(401).json({ \n        success: false, \n        error: \"Business not found\" \n      });\n    }\n\n    if (!business.isActive) {\n      return res.status(401).json({ \n        success: false, \n        error: \"Business account is deactivated\" \n      });\n    }\n\n    // Add business info to request\n    (req as any).business = {\n      id: business.id,\n      name: business.name,\n      domain: business.domain,\n      email: business.email,\n    };\n\n    next();\n  } catch (error) {\n    console.error(\"Business auth error:\", error);\n    res.status(401).json({ \n      success: false, \n      error: \"Authentication failed\" \n    });\n  }\n}; ","import express from \"express\";\nconst router = express.Router();\n\n// /api/redirect?to=<url>&user_id=<id>&reseller_id=<id>\nrouter.get(\"/redirect\", async (req, res) => {\n  const { to, user_id, reseller_id } = req.query;\n\n  if (!to || typeof to !== \"string\") {\n    return res.status(400).json({ error: \"Missing destination URL\" });\n  }\n\n  let url;\n  try {\n    url = new URL(to);\n  } catch {\n    return res.status(400).json({ error: \"Invalid destination URL\" });\n  }\n\n  if (user_id) url.searchParams.set(\"track_user\", String(user_id));\n  if (reseller_id) url.searchParams.set(\"aff_id\", String(reseller_id));\n  url.searchParams.set(\"utm_source\", \"pavlo4\");\n\n  // TODO: Save to your DB here if needed (click log, analytics, etc.)\n  console.log(\"Redirecting user:\", {\n    user_id,\n    reseller_id,\n    destination: url.toString(),\n    timestamp: new Date().toISOString(),\n  });\n\n  res.redirect(302, url.toString());\n});\n\nexport default router; ","import express from \"express\";\nimport { prisma } from \"../services/database\";\n\nconst router = express.Router();\n\n// POST /api/track-sale\nrouter.post(\"/track-sale\", async (req, res) => {\n  const { user, orderId, amount, domain } = req.body;\n\n  if (!user || !orderId || !amount || !domain) {\n    return res.status(400).json({ error: \"Missing data\" });\n  }\n\n  try {\n    await prisma.conversion.create({\n      data: {\n        user,\n        orderId,\n        amount: parseFloat(amount),\n        domain,\n      },\n    });\n    res.status(200).json({ success: true });\n  } catch (err) {\n    console.error(\"Failed to save conversion:\", err);\n    res.status(500).json({ error: \"Failed to save conversion\" });\n  }\n});\n\nexport default router; ","import dotenv from \"dotenv\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport helmet from \"helmet\";\nimport compression from \"compression\";\nimport { handleDemo } from \"./routes/demo\";\nimport n8nScrapeRouter from \"./routes/n8n-scrape\";\nimport favoritesRouter from \"./routes/favorites\";\nimport { saveSearchHistory, getSearchHistory } from \"./routes/search-history\";\nimport {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  addToSearchHistory,\n  getUserSearchHistory,\n  getAllUsers,\n} from \"./routes/auth\";\nimport { requireAuth, requireAdmin, optionalAuth } from \"./middleware/auth\";\nimport { requireAdminAuth } from \"./middleware/admin-auth\";\nimport { healthCheckHandler } from \"./routes/health\";\nimport { getLocationHandler } from \"./services/location\";\nimport { gracefulShutdown, checkDatabaseConnection, clickLogService, settingsService, businessService } from \"./services/database\";\nimport {\n  getAllAffiliateUrls,\n  getAffiliateStats,\n  createAffiliateUrl,\n  updateAffiliateUrl,\n  deleteAffiliateUrl,\n  trackAffiliateClick,\n  trackAffiliateConversion,\n} from \"./routes/affiliate\";\nimport {\n  registerBusiness,\n  getAllBusinesses,\n  getActiveBusinesses,\n  getBusinessByDomain,\n  updateBusiness,\n  deleteBusiness,\n  verifyBusiness,\n  getBusinessStats,\n  updateBusinessCommission,\n  getBusinessDetailedStats,\n  updateBusinessPassword,\n} from \"./routes/business\";\nimport {\n  registerBusiness as registerBusinessAuth,\n  loginBusiness,\n  getCurrentBusiness,\n  logoutBusiness,\n  getBusinessStats as getBusinessAuthStats,\n} from \"./routes/business-auth\";\nimport {\n  authRateLimit,\n  apiRateLimit,\n  businessRateLimit,\n  validateRegistration,\n  validateBusinessRegistration,\n  validateLogin,\n  handleValidationErrors,\n  cache,\n  securityHeaders,\n  requestLogger,\n  sanitizeInput,\n  validateUrl,\n} from \"./middleware/security\";\nimport { requireBusinessAuth } from \"./middleware/business-auth\";\nimport redirectRouter from \"./routes/redirect\";\nimport trackSaleRouter from \"./routes/track-sale\";\n\n// Load environment variables\ndotenv.config();\n\n// Environment variables\nconsole.log(\"Environment variables loaded:\");\nconsole.log(\"NODE_ENV:\", process.env.NODE_ENV);\n\nexport async function createServer() {\n  // Check database connection on startup\n  const dbStatus = await checkDatabaseConnection();\n  console.log('Database status:', dbStatus.status, dbStatus.message);\n  \n  const app = express();\n\n  // Trust Netlify/Heroku/Cloud proxy for correct req.ip and rate limiting\n  app.set('trust proxy', 1);\n\n  // Security middleware\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\"],\n        connectSrc: [\"'self'\", \"https://api.searchapi.io\", \"https://n8n.srv824584.hstgr.cloud\"],\n      },\n    },\n    hsts: {\n      maxAge: 31536000,\n      includeSubDomains: true,\n      preload: true\n    }\n  }));\n\n  // Compression middleware\n  app.use(compression({\n    filter: (req, res) => {\n      if (req.headers['x-no-compression']) {\n        return false;\n      }\n      return compression.filter(req, res);\n    },\n    level: 6,\n  }));\n\n  // CORS configuration\n  const allowedOrigins = [\n    \"http://localhost:3000\",\n    \"http://localhost:8080\",\n    \"http://localhost:8081\",\n    \"http://localhost:8082\",\n    \"http://localhost:8083\",\n    \"http://localhost:8084\",\n    \"https://pavlo4.netlify.app\",\n    \"https://app.pavlo.com\" // Assuming this is your custom domain\n  ];\n\n  const corsOptions = {\n    origin: (origin, callback) => {\n      if (!origin || allowedOrigins.some(allowedOrigin => origin.startsWith(allowedOrigin))) {\n        callback(null, true);\n      } else {\n        console.error(`CORS error: Origin ${origin} not allowed`);\n        callback(new Error(\"Not allowed by CORS\"));\n      }\n    },\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\n    exposedHeaders: ['Set-Cookie'],\n  };\n\n  app.use(cors(corsOptions));\n\n  // Additional middleware\n  app.use(express.json({ limit: \"10mb\" }));\n  app.use(express.urlencoded({ extended: true }));\n  app.use(cookieParser());\n  app.use(securityHeaders);\n  app.use(requestLogger);\n  app.use(sanitizeInput);\n\n  // Public API routes with caching\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"Hello from Express server v2!\" });\n  });\n\n  app.get(\"/api/demo\", cache(300), handleDemo); // Cache for 5 minutes\n  app.get(\"/api/location\", cache(600), getLocationHandler); // Cache for 10 minutes\n  app.post(\"/api/location\", getLocationHandler);\n  app.get(\"/api/supported-countries\", cache(3600), (req, res) => { // Cache for 1 hour\n    const { getSupportedCountries } = require(\"./services/location\");\n    const countries = getSupportedCountries();\n    res.json({ countries });\n  });\n\n  // Authentication routes without rate limiting\n  app.post(\"/api/auth/register\", \n    validateRegistration,\n    handleValidationErrors,\n    register\n  );\n  app.post(\"/api/auth/login\", \n    validateLogin,\n    handleValidationErrors,\n    login\n  );\n  app.post(\"/api/auth/logout\", logout);\n  app.get(\"/api/auth/me\", getCurrentUser);\n  \n  // TestSprite compatibility routes (redirects)\n  app.post(\"/api/register\", register);\n  app.post(\"/api/login\", login);\n  app.post(\"/api/logout\", logout);\n  app.get(\"/api/user/me\", getCurrentUser);\n\n  // Protected routes - require authentication\n  app.post(\"/api/search-history\", requireAuth, addToSearchHistory);\n  app.get(\"/api/search-history\", requireAuth, getUserSearchHistory);\n  \n  // Admin routes\n  app.get(\"/api/admin/users\", requireAuth, requireAdmin, getAllUsers);\n  \n  // Affiliate routes\n  app.get(\"/api/admin/affiliate/urls\", requireAuth, requireAdmin, getAllAffiliateUrls);\n  app.get(\"/api/admin/affiliate/stats\", requireAuth, requireAdmin, getAffiliateStats);\n  app.post(\"/api/admin/affiliate/urls\", requireAuth, requireAdmin, createAffiliateUrl);\n  app.put(\"/api/admin/affiliate/urls/:id\", requireAuth, requireAdmin, updateAffiliateUrl);\n  app.delete(\"/api/admin/affiliate/urls/:id\", requireAuth, requireAdmin, deleteAffiliateUrl);\n  \n  // Public affiliate tracking endpoints\n  app.get(\"/api/affiliate/click/:id\", trackAffiliateClick);\n  app.post(\"/api/affiliate/conversion\", trackAffiliateConversion);\n  \n  // Business authentication routes without rate limiting\n  app.post(\"/api/business/auth/register\", \n    validateBusinessRegistration,\n    handleValidationErrors,\n    registerBusinessAuth\n  );\n  app.post(\"/api/business/auth/login\", \n    validateLogin,\n    handleValidationErrors,\n    loginBusiness\n  );\n  app.get(\"/api/business/auth/me\", getCurrentBusiness);\n  app.post(\"/api/business/auth/logout\", logoutBusiness);\n  app.get(\"/api/business/auth/stats\", getBusinessAuthStats);\n  \n  // Business routes with caching and validation\n  app.post(\"/api/business/register\", registerBusiness);\n  app.get(\"/api/business/active\", cache(300), getActiveBusinesses); // Cache for 5 minutes\n  app.get(\"/api/business/domain/:domain\", cache(600), getBusinessByDomain); // Cache for 10 minutes\n  \n  // Admin business routes\n  app.get(\"/api/admin/business\", requireAuth, requireAdmin, getAllBusinesses);\n  app.get(\"/api/admin/business/stats\", requireAuth, requireAdmin, getBusinessStats);\n  app.get(\"/api/admin/business/:id/stats\", requireAuth, requireAdmin, getBusinessDetailedStats);\n  app.put(\"/api/admin/business/:id\", requireAuth, requireAdmin, updateBusiness);\n  app.put(\"/api/admin/business/:id/commission\", requireAuth, requireAdmin, updateBusinessCommission);\n  app.put(\"/api/admin/business/:id/password\", requireAuth, requireAdmin, updateBusinessPassword);\n  app.delete(\"/api/admin/business/:id\", requireAuth, requireAdmin, deleteBusiness);\n  app.post(\"/api/admin/business/:id/verify\", requireAuth, requireAdmin, verifyBusiness);\n  \n  // Favorites routes\n  app.use(\"/api/favorites\", favoritesRouter);\n  \n  // TestSprite compatibility routes\n  app.post(\"/api/user/search-history\", requireAuth, addToSearchHistory);\n  app.get(\"/api/user/search-history\", requireAuth, getUserSearchHistory);\n\n  // Legacy search history (for backward compatibility)\n  app.post(\"/api/legacy/search-history\", saveSearchHistory);\n  app.get(\"/api/legacy/search-history\", getSearchHistory);\n\n  // Public search routes without rate limiting\n  app.post(\"/api/scrape\", \n    validateUrl,\n    (req, res) => {\n      req.url = '/n8n-scrape';\n      n8nScrapeRouter(req, res, () => {});\n    }\n  );\n  app.use(\"/api\", \n    validateUrl,\n    n8nScrapeRouter\n  ); // N8N scraping routes (public)\n  \n  // TestSprite compatibility routes with rate limiting and validation\n  app.post(\"/api/scrape-product\", \n    validateUrl,\n    (req, res) => {\n      req.url = '/n8n-scrape';\n      n8nScrapeRouter(req, res, () => {});\n    }\n  );\n  app.post(\"/api/n8n-webhook-scrape\", \n    validateUrl,\n    (req, res) => {\n      req.url = '/n8n-scrape';\n      n8nScrapeRouter(req, res, () => {});\n    }\n  );\n  app.get(\"/api/location-info\", getLocationHandler);\n\n  // Health check route\n  app.get(\"/api/health\", healthCheckHandler);\n\n  // Affiliate/product redirect route for tracking\n  app.get('/go/:affiliateId/:productId', async (req, res) => {\n    const { affiliateId, productId } = req.params;\n    // Look up the real product URL\n    const productUrl = await clickLogService.getProductUrlByAffiliateAndProductId(affiliateId, productId);\n    if (!productUrl) {\n      return res.status(404).send('Product not found');\n    }\n    // Log the click\n    await clickLogService.logClick({\n      affiliateId,\n      productId,\n      userId: req.user?.id,\n      userAgent: req.get('User-Agent'),\n      referrer: req.get('Referer'),\n      ip: req.ip,\n    });\n    // Build redirect URL with UTM parameters and a unique token\n    const utmParams = new URLSearchParams({\n      utm_source: 'pavlo4',\n      utm_medium: 'affiliate',\n      utm_campaign: 'product_suggestion',\n      aff_token: Math.random().toString(36).slice(2, 12),\n    });\n    const redirectUrl = productUrl + (productUrl.includes('?') ? '&' : '?') + utmParams.toString();\n    return res.redirect(302, redirectUrl);\n  });\n\n  // Admin: Get suggestion filter state\n  app.get(\"/api/admin/settings/suggestion-filter\", requireAuth, requireAdmin, async (req, res) => {\n    try {\n      const enabled = await settingsService.getSuggestionFilterEnabled();\n      res.json({ enabled });\n    } catch (err) {\n      res.status(500).json({ error: \"Failed to get suggestion filter state\" });\n    }\n  });\n\n  // Admin: Set suggestion filter state\n  app.post(\"/api/admin/settings/suggestion-filter\", requireAuth, requireAdmin, express.json(), async (req, res) => {\n    try {\n      const { enabled } = req.body;\n      if (typeof enabled !== \"boolean\") {\n        return res.status(400).json({ error: \"'enabled' must be a boolean\" });\n      }\n      await settingsService.setSuggestionFilterEnabled(enabled);\n      res.json({ success: true });\n    } catch (err) {\n      res.status(500).json({ error: \"Failed to set suggestion filter state\" });\n    }\n  });\n\n  // Business: Get user activity (click logs)\n  app.get(\"/api/business/activity\", requireBusinessAuth, async (req, res) => {\n    try {\n      const businessId = (req as any).business?.id;\n      if (!businessId) return res.status(401).json({ error: \"Not authenticated as business\" });\n      const logs = await businessService.getBusinessClickLogs(businessId);\n      res.json({ logs });\n    } catch (err) {\n      res.status(500).json({ error: \"Failed to fetch business activity logs\" });\n    }\n  });\n\n  // Redirect routes\n  app.use(\"/api\", redirectRouter);\n  app.use(\"/api\", trackSaleRouter);\n\n  // Graceful shutdown handler\n  process.on(\"SIGTERM\", async () => {\n    console.log(\"SIGTERM received, shutting down gracefully\");\n    await gracefulShutdown();\n    process.exit(0);\n  });\n\n  process.on(\"SIGINT\", async () => {\n    console.log(\"SIGINT received, shutting down gracefully\");\n    await gracefulShutdown();\n    process.exit(0);\n  });\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\n(async () => {\n  const app = await createServer();\n  const port = process.env.PORT || 3000;\n\n  // In production, serve the built SPA files\n  const __dirname = import.meta.dirname;\n  const distPath = path.join(__dirname, \"../spa\");\n\n  // Serve static files\n  app.use(express.static(distPath));\n\n  // Handle React Router - serve index.html for all non-API routes\n  app.get(\"*\", (req, res) => {\n    // Don't serve index.html for API routes\n    if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n      return res.status(404).json({ error: \"API endpoint not found\" });\n    }\n\n    res.sendFile(path.join(distPath, \"index.html\"));\n  });\n\n  app.listen(port, () => {\n    console.log(`🚀 Fusion Starter server running on port ${port}`);\n    console.log(`📱 Frontend: http://localhost:${port}`);\n    console.log(`🔧 API: http://localhost:${port}/api`);\n  });\n})();\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["bcrypt","router","express","SEARCH_API_SUPPORTED_COUNTRIES","productPatterns","detectedProduct","JWT_SECRET","dealers","registerBusiness","getBusinessStats","verifyBusinessToken","body","registerBusinessAuth","getBusinessAuthStats","favoritesRouter","n8nScrapeRouter","redirectRouter","trackSaleRouter"],"mappings":"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"}