{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/services/database.ts","../../server/routes/n8n-scrape.ts","../../server/routes/auth.ts","../../server/middleware/auth.ts","../../server/routes/favorites.ts","../../server/routes/search-history.ts","../../server/routes/admin-auth.ts","../../server/middleware/admin-auth.ts","../../server/routes/health.ts","../../server/services/location.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { PrismaClient } from \"@prisma/client\";\n\n// Global instance to prevent multiple Prisma Client instances in development\ndeclare global {\n  var __prisma: PrismaClient | undefined;\n}\n\nexport const prisma = globalThis.__prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.__prisma = prisma;\n}\n\n// User operations\nexport const userService = {\n  async createUser(data: {\n    email: string;\n    password: string;\n    isAdmin?: boolean;\n  }) {\n    return prisma.user.create({\n      data: {\n        email: data.email,\n        password: data.password,\n        isAdmin: data.isAdmin || false,\n      },\n    });\n  },\n\n  async findUserByEmail(email: string) {\n    return prisma.user.findUnique({\n      where: { email },\n    });\n  },\n\n  async findUserById(id: number) {\n    return prisma.user.findUnique({\n      where: { id },\n    });\n  },\n\n  async getAllUsers() {\n    return prisma.user.findMany({\n      select: {\n        id: true,\n        email: true,\n        isAdmin: true,\n        createdAt: true,\n        _count: {\n          select: {\n            searchHistory: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  },\n\n  async updateUser(\n    id: number,\n    data: Partial<{\n      email: string;\n      password: string;\n      isAdmin: boolean;\n    }>,\n  ) {\n    return prisma.user.update({\n      where: { id },\n      data,\n    });\n  },\n\n  async deleteUser(id: number) {\n    return prisma.user.delete({\n      where: { id },\n    });\n  },\n};\n\n// Admin operations\nexport const adminService = {\n  async createAdmin(data: {\n    email: string;\n    password: string;\n    name?: string;\n    role?: string;\n  }) {\n    return prisma.admin.create({\n      data: {\n        email: data.email,\n        password: data.password,\n        name: data.name,\n        role: data.role || \"admin\",\n      },\n    });\n  },\n\n  async findAdminByEmail(email: string) {\n    return prisma.admin.findUnique({\n      where: { email },\n    });\n  },\n\n  async findAdminById(id: number) {\n    return prisma.admin.findUnique({\n      where: { id },\n    });\n  },\n\n  async getAllAdmins() {\n    return prisma.admin.findMany({\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        role: true,\n        isActive: true,\n        createdAt: true,\n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  },\n\n  async updateAdmin(\n    id: number,\n    data: Partial<{\n      email: string;\n      password: string;\n      name: string;\n      role: string;\n      isActive: boolean;\n    }>,\n  ) {\n    return prisma.admin.update({\n      where: { id },\n      data,\n    });\n  },\n\n  async deleteAdmin(id: number) {\n    return prisma.admin.delete({\n      where: { id },\n    });\n  },\n};\n\n// Search history operations\nexport const searchHistoryService = {\n  async addSearch(\n    userId: number,\n    data: {\n      url: string;\n      title: string;\n      requestId: string;\n    },\n  ) {\n    return prisma.searchHistory.create({\n      data: {\n        userId,\n        url: data.url,\n        title: data.title,\n        requestId: data.requestId,\n      },\n    });\n  },\n\n  async getUserSearchHistory(userId: number, limit: number = 20) {\n    return prisma.searchHistory.findMany({\n      where: { userId },\n      orderBy: { timestamp: \"desc\" },\n      take: limit,\n    });\n  },\n\n  async deleteUserSearch(userId: number, searchId: number) {\n    return prisma.searchHistory.delete({\n      where: {\n        id: searchId,\n        userId, // Ensure user can only delete their own searches\n      },\n    });\n  },\n\n  async clearUserSearchHistory(userId: number) {\n    return prisma.searchHistory.deleteMany({\n      where: { userId },\n    });\n  },\n\n  // Clean up old search history (older than X days)\n  async cleanupOldSearches(daysToKeep: number = 90) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n    return prisma.searchHistory.deleteMany({\n      where: {\n        timestamp: {\n          lt: cutoffDate,\n        },\n      },\n    });\n  },\n};\n\n// Legacy search history for non-authenticated users\nexport const legacySearchHistoryService = {\n  async addSearch(userKey: string, url: string) {\n    return prisma.legacySearchHistory.create({\n      data: {\n        userKey,\n        url,\n      },\n    });\n  },\n\n  async getUserSearchHistory(userKey: string, limit: number = 10) {\n    return prisma.legacySearchHistory.findMany({\n      where: { userKey },\n      orderBy: { timestamp: \"desc\" },\n      take: limit,\n    });\n  },\n\n  async cleanupOldLegacySearches(daysToKeep: number = 30) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n    return prisma.legacySearchHistory.deleteMany({\n      where: {\n        timestamp: {\n          lt: cutoffDate,\n        },\n      },\n    });\n  },\n};\n\n// Database health check\nexport const healthCheck = {\n  async checkConnection() {\n    try {\n      await prisma.$queryRaw`SELECT 1`;\n      return { status: \"healthy\", message: \"Database connection successful\" };\n    } catch (error) {\n      return {\n        status: \"unhealthy\",\n        message: \"Database connection failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  },\n\n  async getStats() {\n    const [userCount, searchCount, legacySearchCount] = await Promise.all([\n      prisma.user.count(),\n      prisma.searchHistory.count(),\n      prisma.legacySearchHistory.count(),\n    ]);\n\n    return {\n      users: userCount,\n      searches: searchCount,\n      legacySearches: legacySearchCount,\n    };\n  },\n};\n\n// Graceful shutdown\nexport const gracefulShutdown = async () => {\n  await prisma.$disconnect();\n};\n","// Main app scraping route - uses the same workflow logic as N8N but implemented directly\n// This route provides real product URLs from search results instead of generated URLs\n\nimport express from \"express\";\nimport axios from \"axios\";\nimport { ProductData, PriceComparison } from \"../../shared/api\";\nimport { Request, Response } from \"express\";\nimport { searchHistoryService } from \"../services/database\";\nimport { requireAuth } from \"../middleware/auth\";\n\n// --- Product patterns for better product parsing ---\nconst productPatterns = [\n  { pattern: /sonos-ace/i, brand: 'sonos', model: 'ace', category: 'headphones' },\n  { pattern: /sonos-era/i, brand: 'sonos', model: 'era', category: 'speakers' },\n  { pattern: /sonos-beam/i, brand: 'sonos', model: 'beam', category: 'soundbar' },\n  { pattern: /sonos-arc/i, brand: 'sonos', model: 'arc', category: 'soundbar' },\n  { pattern: /sonos-sub/i, brand: 'sonos', model: 'sub', category: 'subwoofer' },\n  { pattern: /sonos-one/i, brand: 'sonos', model: 'one', category: 'speakers' },\n  { pattern: /sonos-five/i, brand: 'sonos', model: 'five', category: 'speakers' },\n  { pattern: /sonos-move/i, brand: 'sonos', model: 'move', category: 'portable-speaker' },\n  { pattern: /sonos-roam/i, brand: 'sonos', model: 'roam', category: 'portable-speaker' },\n  { pattern: /bose-quietcomfort/i, brand: 'bose', model: 'quietcomfort', category: 'headphones' },\n  { pattern: /bose-soundlink/i, brand: 'bose', model: 'soundlink', category: 'speakers' },\n  { pattern: /bose-home-speaker/i, brand: 'bose', model: 'home-speaker', category: 'speakers' },\n  { pattern: /bose-sport/i, brand: 'bose', model: 'sport', category: 'headphones' },\n  { pattern: /jbl-charge/i, brand: 'jbl', model: 'charge', category: 'speakers' }\n];\n\n// --- Utility functions ---\n// Use countryCode variable instead of getCountryCode function.\n\n// Utility: Extract price as number from string.\nfunction extractPrice(text: string): number | null {\n  const match = text.match(/(\\d{1,4}[.,]?\\d{2})/);\n  return match ? parseFloat(match[1].replace(',', '.')) : null;\n}\n\nfunction extractDirectRetailerUrl(link: string): string {\n  if (!link) return '';\n  \n  // Handle Google Shopping links\n  if (link.includes('google.com/shopping/product/')) {\n    // For Google Shopping links, we'll keep them as they are valid product pages\n    return link;\n  }\n  \n  try {\n    const url = new URL(link);\n    return `${url.origin}${url.pathname}`;\n  } catch {\n    return link;\n  }\n}\n\nfunction extractStoreName(link: string): string {\n  if (!link) return 'unknown';\n  \n  // Handle Google Shopping links\n  if (link.includes('google.com/shopping/product/')) {\n    return 'Google Shopping';\n  }\n  \n  try {\n    return new URL(link).hostname.replace('www.', '');\n  } catch {\n    return 'unknown';\n  }\n}\n\nconst router = express.Router();\n\n// Remove authentication middleware from router - make search public\n// Authentication will only be applied when saving search history\n\n// SearchAPI configuration (Google Search API)\nconst SEARCH_API_KEY = process.env.SEARCH_API_KEY || process.env.SERP_API_KEY;\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n\n// Debug logging\nconsole.log(\"SearchAPI Key loaded:\", SEARCH_API_KEY ? \"Yes\" : \"No\");\n\n// Test Gemini API key on startup\nasync function testGeminiAPIKey(): Promise<boolean> {\n  if (!GEMINI_API_KEY) return false;\n  \n  try {\n    const response = await axios.post(\n      'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent',\n      {\n        contents: [{ parts: [{ text: \"Hello\" }] }]\n      },\n      {\n        params: { key: GEMINI_API_KEY },\n        headers: { 'Content-Type': 'application/json' },\n        timeout: 10000\n      }\n    );\n    \n    if (response.status === 200) {\n      console.log(\"✅ Gemini API key is valid\");\n      return true;\n    } else {\n      console.error(\"❌ Gemini API test failed with status:\", response.status);\n      return false;\n    }\n  } catch (error) {\n    console.error(\"❌ Gemini API test failed:\", error);\n    if (axios.isAxiosError(error)) {\n      console.error('Response status:', error.response?.status);\n      console.error('Response data:', error.response?.data);\n    }\n    return false;\n  }\n}\n\n// Test the API key on startup\ntestGeminiAPIKey().then(isValid => {\n  if (!isValid) {\n    console.warn(\"⚠️ Gemini API key appears to be invalid, will use fallback methods\");\n    geminiFailureCount = MAX_GEMINI_FAILURES; // Disable Gemini immediately\n  }\n});\n\n// Track Gemini API failures to disable it if it's consistently failing\nlet geminiFailureCount = 0;\nconst MAX_GEMINI_FAILURES = 3;\n\n// Helper function to safely parse JSON from Gemini responses\nfunction safeParseGeminiJSON(text: string, fallback: any[]): any[] {\n  try {\n    // Extract JSON from markdown code blocks if present\n    let jsonText = text;\n    if (text.includes('```json')) {\n      const jsonMatch = text.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n      if (jsonMatch) {\n        jsonText = jsonMatch[1].trim();\n      }\n    } else if (text.includes('```')) {\n      // Handle other code blocks\n      const codeMatch = text.match(/```\\s*([\\s\\S]*?)\\s*```/);\n      if (codeMatch) {\n        jsonText = codeMatch[1].trim();\n      }\n    }\n    \n    const parsed = JSON.parse(jsonText);\n    if (Array.isArray(parsed)) {\n      return parsed;\n    } else {\n      console.error('Gemini returned non-array response:', parsed);\n      return fallback;\n    }\n  } catch (parseError) {\n    console.error('Failed to parse Gemini response as JSON:', parseError);\n    console.error('Raw response text:', text);\n    return fallback;\n  }\n}\n\n// Use Gemini to clean up product titles for better search results\nasync function cleanProductTitleWithGemini(productTitle: string): Promise<string> {\n  if (!GEMINI_API_KEY || geminiFailureCount >= MAX_GEMINI_FAILURES) {\n    console.log(\"Gemini API key not available or too many failures, using fallback title cleaning\");\n    return cleanProductTitleFallback(productTitle);\n  }\n\n  try {\n    const prompt = `Clean this product title for better search results. Remove SEO words, marketing terms, and keep only the essential product information (brand, model, type). Return only the cleaned title, nothing else.\n\nOriginal title: \"${productTitle}\"\n\nExamples:\n- \"Sonos Ace: Wireless Over Ear Headphones with Noise Cancellation\" → \"Sonos Ace Wireless Headphones\"\n- \"Samsung BESPOKE Jet Bot AI+ Robot Vacuum Cleaner with Clean Station\" → \"Samsung BESPOKE Jet Bot Vacuum\"\n- \"Apple iPhone 15 Pro Max 256GB Titanium - Latest Model with Advanced Camera\" → \"Apple iPhone 15 Pro Max\"\n\nCleaned title:`;\n\n    const response = await axios.post(\n      'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent',\n      {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      },\n      {\n        params: { key: GEMINI_API_KEY },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        timeout: 30000, // 30 second timeout\n        maxRedirects: 5\n      }\n    );\n\n    const data = response.data;\n    const cleanedTitle = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();\n    \n    if (cleanedTitle && cleanedTitle.length > 0) {\n      console.log(`Gemini cleaned title: \"${productTitle}\" → \"${cleanedTitle}\"`);\n      return cleanedTitle;\n    } else {\n      console.log(\"Gemini returned empty response, using fallback\");\n      return cleanProductTitleFallback(productTitle);\n    }\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n    if (axios.isAxiosError(error)) {\n      console.error('Response status:', error.response?.status);\n      console.error('Response data:', error.response?.data);\n    }\n    geminiFailureCount++;\n    console.log(`Gemini failure count: ${geminiFailureCount}/${MAX_GEMINI_FAILURES}`);\n    console.log(\"Using fallback title cleaning\");\n    return cleanProductTitleFallback(productTitle);\n  }\n}\n\n// Fallback function to clean product titles without Gemini\nfunction cleanProductTitleFallback(productTitle: string): string {\n  if (!productTitle) return \"\";\n  \n  // Remove common SEO words and marketing terms\n  const seoWords = [\n    'with', 'and', 'the', 'latest', 'new', 'best', 'top', 'premium', 'advanced',\n    'professional', 'pro', 'plus', 'max', 'ultra', 'extreme', 'ultimate',\n    'wireless', 'bluetooth', 'smart', 'intelligent', 'automatic', 'automatic',\n    'noise', 'cancelling', 'cancellation', 'active', 'passive', 'hybrid',\n    'over-ear', 'on-ear', 'in-ear', 'true', 'wireless', 'earbuds', 'headphones',\n    'speakers', 'sound', 'audio', 'music', 'bass', 'treble', 'clarity',\n    'crystal', 'clear', 'sharp', 'vivid', 'brilliant', 'stunning', 'amazing',\n    'incredible', 'fantastic', 'excellent', 'perfect', 'ideal', 'optimal',\n    'superior', 'premium', 'high-quality', 'high', 'quality', 'durable',\n    'long-lasting', 'reliable', 'trusted', 'popular', 'favorite', 'choice',\n    'recommended', 'award-winning', 'award', 'winning', 'best-selling',\n    'best', 'selling', 'trending', 'viral', 'hot', 'cool', 'awesome',\n    'great', 'good', 'nice', 'beautiful', 'elegant', 'stylish', 'modern',\n    'contemporary', 'classic', 'traditional', 'vintage', 'retro', 'unique',\n    'special', 'exclusive', 'limited', 'edition', 'collector', 'series',\n    'collection', 'set', 'bundle', 'package', 'kit', 'combo', 'deal',\n    'offer', 'discount', 'sale', 'clearance', 'outlet', 'refurbished',\n    'used', 'pre-owned', 'second-hand', 'like-new', 'mint', 'condition',\n    'warranty', 'guarantee', 'certified', 'authentic', 'genuine', 'original',\n    'official', 'licensed', 'authorized', 'dealer', 'reseller', 'distributor',\n    'manufacturer', 'brand', 'company', 'corporation', 'inc', 'ltd', 'llc',\n    'co', 'corp', 'international', 'global', 'worldwide', 'imported',\n    'domestic', 'local', 'regional', 'national', 'federal', 'state',\n    'provincial', 'municipal', 'city', 'town', 'village', 'community',\n    'neighborhood', 'district', 'area', 'zone', 'region', 'territory',\n    'country', 'nation', 'continent', 'hemisphere', 'planet', 'earth',\n    'world', 'universe', 'galaxy', 'solar', 'system', 'space', 'cosmos',\n    'nature', 'natural', 'organic', 'biological', 'chemical', 'physical',\n    'mechanical', 'electrical', 'electronic', 'digital', 'analog', 'hybrid',\n    'mixed', 'combined', 'integrated', 'unified', 'consolidated', 'merged',\n    'fused', 'blended', 'mixed', 'combined', 'integrated', 'unified',\n    'consolidated', 'merged', 'fused', 'blended', 'mixed', 'combined'\n  ];\n  \n  let cleanedTitle = productTitle;\n  \n  // Remove SEO words (case insensitive)\n  const seoWordsRegex = new RegExp(`\\\\b(${seoWords.join('|')})\\\\b`, 'gi');\n  cleanedTitle = cleanedTitle.replace(seoWordsRegex, '');\n  \n  // Remove extra spaces and punctuation\n  cleanedTitle = cleanedTitle.replace(/\\s+/g, ' ').trim();\n  cleanedTitle = cleanedTitle.replace(/^[:\\-\\s]+|[:\\-\\s]+$/g, '');\n  \n  // Remove common marketing phrases\n  const marketingPhrases = [\n    /with\\s+[a-z\\s]+$/i,\n    /featuring\\s+[a-z\\s]+$/i,\n    /including\\s+[a-z\\s]+$/i,\n    /comes\\s+with\\s+[a-z\\s]+$/i,\n    /includes\\s+[a-z\\s]+$/i,\n    /packaged\\s+with\\s+[a-z\\s]+$/i,\n    /bundle\\s+with\\s+[a-z\\s]+$/i,\n    /set\\s+with\\s+[a-z\\s]+$/i,\n    /kit\\s+with\\s+[a-z\\s]+$/i,\n    /combo\\s+with\\s+[a-z\\s]+$/i,\n    /deal\\s+with\\s+[a-z\\s]+$/i,\n    /offer\\s+with\\s+[a-z\\s]+$/i,\n    /discount\\s+with\\s+[a-z\\s]+$/i,\n    /sale\\s+with\\s+[a-z\\s]+$/i,\n    /clearance\\s+with\\s+[a-z\\s]+$/i,\n    /outlet\\s+with\\s+[a-z\\s]+$/i,\n    /refurbished\\s+with\\s+[a-z\\s]+$/i,\n    /used\\s+with\\s+[a-z\\s]+$/i,\n    /pre-owned\\s+with\\s+[a-z\\s]+$/i,\n    /second-hand\\s+with\\s+[a-z\\s]+$/i,\n    /like-new\\s+with\\s+[a-z\\s]+$/i,\n    /mint\\s+with\\s+[a-z\\s]+$/i,\n    /condition\\s+with\\s+[a-z\\s]+$/i,\n    /warranty\\s+with\\s+[a-z\\s]+$/i,\n    /guarantee\\s+with\\s+[a-z\\s]+$/i,\n    /certified\\s+with\\s+[a-z\\s]+$/i,\n    /authentic\\s+with\\s+[a-z\\s]+$/i,\n    /genuine\\s+with\\s+[a-z\\s]+$/i,\n    /original\\s+with\\s+[a-z\\s]+$/i,\n    /official\\s+with\\s+[a-z\\s]+$/i,\n    /licensed\\s+with\\s+[a-z\\s]+$/i,\n    /authorized\\s+with\\s+[a-z\\s]+$/i,\n    /dealer\\s+with\\s+[a-z\\s]+$/i,\n    /reseller\\s+with\\s+[a-z\\s]+$/i,\n    /distributor\\s+with\\s+[a-z\\s]+$/i,\n    /manufacturer\\s+with\\s+[a-z\\s]+$/i,\n    /brand\\s+with\\s+[a-z\\s]+$/i,\n    /company\\s+with\\s+[a-z\\s]+$/i,\n    /corporation\\s+with\\s+[a-z\\s]+$/i,\n    /inc\\s+with\\s+[a-z\\s]+$/i,\n    /ltd\\s+with\\s+[a-z\\s]+$/i,\n    /llc\\s+with\\s+[a-z\\s]+$/i,\n    /co\\s+with\\s+[a-z\\s]+$/i,\n    /corp\\s+with\\s+[a-z\\s]+$/i,\n    /international\\s+with\\s+[a-z\\s]+$/i,\n    /global\\s+with\\s+[a-z\\s]+$/i,\n    /worldwide\\s+with\\s+[a-z\\s]+$/i,\n    /imported\\s+with\\s+[a-z\\s]+$/i,\n    /domestic\\s+with\\s+[a-z\\s]+$/i,\n    /local\\s+with\\s+[a-z\\s]+$/i,\n    /regional\\s+with\\s+[a-z\\s]+$/i,\n    /national\\s+with\\s+[a-z\\s]+$/i,\n    /federal\\s+with\\s+[a-z\\s]+$/i,\n    /state\\s+with\\s+[a-z\\s]+$/i,\n    /provincial\\s+with\\s+[a-z\\s]+$/i,\n    /municipal\\s+with\\s+[a-z\\s]+$/i,\n    /city\\s+with\\s+[a-z\\s]+$/i,\n    /town\\s+with\\s+[a-z\\s]+$/i,\n    /village\\s+with\\s+[a-z\\s]+$/i,\n    /community\\s+with\\s+[a-z\\s]+$/i,\n    /neighborhood\\s+with\\s+[a-z\\s]+$/i,\n    /district\\s+with\\s+[a-z\\s]+$/i,\n    /area\\s+with\\s+[a-z\\s]+$/i,\n    /zone\\s+with\\s+[a-z\\s]+$/i,\n    /region\\s+with\\s+[a-z\\s]+$/i,\n    /territory\\s+with\\s+[a-z\\s]+$/i,\n    /country\\s+with\\s+[a-z\\s]+$/i,\n    /nation\\s+with\\s+[a-z\\s]+$/i,\n    /continent\\s+with\\s+[a-z\\s]+$/i,\n    /hemisphere\\s+with\\s+[a-z\\s]+$/i,\n    /planet\\s+with\\s+[a-z\\s]+$/i,\n    /earth\\s+with\\s+[a-z\\s]+$/i,\n    /world\\s+with\\s+[a-z\\s]+$/i,\n    /universe\\s+with\\s+[a-z\\s]+$/i,\n    /galaxy\\s+with\\s+[a-z\\s]+$/i,\n    /solar\\s+with\\s+[a-z\\s]+$/i,\n    /system\\s+with\\s+[a-z\\s]+$/i,\n    /space\\s+with\\s+[a-z\\s]+$/i,\n    /cosmos\\s+with\\s+[a-z\\s]+$/i,\n    /nature\\s+with\\s+[a-z\\s]+$/i,\n    /natural\\s+with\\s+[a-z\\s]+$/i,\n    /organic\\s+with\\s+[a-z\\s]+$/i,\n    /biological\\s+with\\s+[a-z\\s]+$/i,\n    /chemical\\s+with\\s+[a-z\\s]+$/i,\n    /physical\\s+with\\s+[a-z\\s]+$/i,\n    /mechanical\\s+with\\s+[a-z\\s]+$/i,\n    /electrical\\s+with\\s+[a-z\\s]+$/i,\n    /electronic\\s+with\\s+[a-z\\s]+$/i,\n    /digital\\s+with\\s+[a-z\\s]+$/i,\n    /analog\\s+with\\s+[a-z\\s]+$/i,\n    /hybrid\\s+with\\s+[a-z\\s]+$/i,\n    /mixed\\s+with\\s+[a-z\\s]+$/i,\n    /combined\\s+with\\s+[a-z\\s]+$/i,\n    /integrated\\s+with\\s+[a-z\\s]+$/i,\n    /unified\\s+with\\s+[a-z\\s]+$/i,\n    /consolidated\\s+with\\s+[a-z\\s]+$/i,\n    /merged\\s+with\\s+[a-z\\s]+$/i,\n    /fused\\s+with\\s+[a-z\\s]+$/i,\n    /blended\\s+with\\s+[a-z\\s]+$/i\n  ];\n  \n  for (const phrase of marketingPhrases) {\n    cleanedTitle = cleanedTitle.replace(phrase, '');\n  }\n  \n  // Remove extra spaces and punctuation again\n  cleanedTitle = cleanedTitle.replace(/\\s+/g, ' ').trim();\n  cleanedTitle = cleanedTitle.replace(/^[:\\-\\s]+|[:\\-\\s]+$/g, '');\n  \n  console.log(`Fallback cleaned title: \"${productTitle}\" → \"${cleanedTitle}\"`);\n  return cleanedTitle;\n}\n\n// Add rate limiting utility\nlet lastSearchApiCall = 0;\nconst SEARCH_API_RATE_LIMIT = 1000; // 1 second between calls\nlet isRateLimited = false;\nlet rateLimitResetTime = 0;\n\nasync function makeSearchApiRequest(url: string): Promise<any> {\n  const now = Date.now();\n  \n  // Check if we're currently rate limited\n  if (isRateLimited && now < rateLimitResetTime) {\n    const remainingTime = rateLimitResetTime - now;\n    console.log(`Rate limited, waiting ${remainingTime}ms before retry`);\n    await new Promise(resolve => setTimeout(resolve, remainingTime));\n    isRateLimited = false;\n  }\n  \n  const timeSinceLastCall = now - lastSearchApiCall;\n  \n  if (timeSinceLastCall < SEARCH_API_RATE_LIMIT) {\n    const delay = SEARCH_API_RATE_LIMIT - timeSinceLastCall;\n    console.log(`Rate limiting: waiting ${delay}ms before next SearchAPI call`);\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n  \n  lastSearchApiCall = Date.now();\n  \n  try {\n    const response = await axios.get(url, {\n      timeout: 15000, // 15 second timeout\n      maxRedirects: 5,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; PriceComparisonBot/1.0)'\n      }\n    });\n    \n    if (response.status === 429) {\n      console.warn(\"SearchAPI rate limit exceeded, setting global rate limit for 30 seconds\");\n      isRateLimited = true;\n      rateLimitResetTime = now + 30000; // 30 seconds\n      return null; // Signal to try fallback\n    }\n    \n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 429) {\n        console.warn(\"SearchAPI rate limit exceeded, setting global rate limit for 30 seconds\");\n        isRateLimited = true;\n        rateLimitResetTime = now + 30000; // 30 seconds\n        return null; // Signal to try fallback\n      }\n      console.error(`SearchAPI request failed: ${error.response?.status} ${error.response?.statusText}`);\n    } else {\n      console.error(\"SearchAPI request error:\", error);\n    }\n    return null;\n  }\n}\n\nasync function testSearchAPIKey(): Promise<boolean> {\n  if (!SEARCH_API_KEY) return false;\n  \n  try {\n    const testUrl = `https://www.searchapi.io/api/v1/search?engine=google&q=test&api_key=${SEARCH_API_KEY}`;\n    const response = await axios.get(testUrl, {\n      timeout: 10000, // 10 second timeout\n      maxRedirects: 3\n    });\n    \n    if (response.status === 200) {\n      console.log(\"✅ SearchAPI key is valid\");\n      return true;\n    } else if (response.status === 401) {\n      console.error(\"❌ SearchAPI key is invalid or expired\");\n      return false;\n    } else if (response.status === 429) {\n      console.warn(\"⚠️ SearchAPI rate limit exceeded during test\");\n      return false;\n    } else {\n      console.warn(`⚠️ SearchAPI test returned status: ${response.status}`);\n      return false;\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 401) {\n        console.error(\"❌ SearchAPI key is invalid or expired\");\n        return false;\n      } else if (error.response?.status === 429) {\n        console.warn(\"⚠️ SearchAPI rate limit exceeded during test\");\n        return false;\n      } else {\n        console.error(`❌ SearchAPI test failed: ${error.response?.status} ${error.response?.statusText}`);\n        return false;\n      }\n    } else {\n      console.error(\"❌ SearchAPI test failed:\", error);\n      return false;\n    }\n  }\n}\n\n// Extract product model from URL (e.g., BDFS26040XQ from Lithuanian dishwasher URL)\nfunction extractProductModel(url: string): string | null {\n  try {\n    const urlObj = new URL(url);\n    const pathname = urlObj.pathname;\n    \n    // Look for product model patterns in the URL path\n    const modelPatterns = [\n      /[A-Z]{2,3}\\d{6,8}[A-Z]?/g, // Pattern like BDFS26040XQ\n      /\\d{8,12}/g, // Long numeric codes\n      /[A-Z]{2,4}\\d{4,6}[A-Z]?/g, // Shorter patterns\n    ];\n    \n    for (const pattern of modelPatterns) {\n      const matches = pathname.match(pattern);\n      if (matches && matches.length > 0) {\n        console.log(`Found model in Lithuanian URL path: ${matches[0]}`);\n        return matches[0];\n      }\n    }\n    \n    // Also check the full URL for patterns\n    const fullUrlMatches = url.match(/[A-Z]{2,3}\\d{6,8}[A-Z]?/);\n    if (fullUrlMatches) {\n      console.log(`Found model in full URL: ${fullUrlMatches[0]}`);\n      return fullUrlMatches[0];\n    }\n    \n    return null;\n  } catch (error) {\n    console.error(\"Error extracting product model:\", error);\n    return null;\n  }\n}\n\n// Extract brand name from product title\nfunction extractBrandFromTitle(productTitle: string): string {\n  if (!productTitle) return \"\";\n  \n  // Common brand names to look for\n  const brands = [\n    'Samsung', 'LG', 'Bosch', 'Siemens', 'Beko', 'Whirlpool', 'Electrolux',\n    'Panasonic', 'Sharp', 'Toshiba', 'Hitachi', 'Daewoo', 'Haier',\n    'Apple', 'Sony', 'Philips', 'Braun', 'KitchenAid', 'Kenmore',\n    'Maytag', 'Frigidaire', 'GE', 'Hotpoint', 'Zanussi', 'AEG',\n    'Miele', 'Gorenje', 'Vestel', 'Arçelik', 'Blaupunkt', 'Grundig',\n    // Audio/Electronics brands\n    'Sonos', 'Bose', 'JBL', 'Sennheiser', 'Audio-Technica', 'Shure',\n    'Beyerdynamic', 'AKG', 'Denon', 'Marantz', 'Pioneer', 'Onkyo',\n    'Yamaha', 'Harman Kardon', 'Klipsch', 'Bowers & Wilkins', 'B&W',\n    'Focal', 'KEF', 'Monitor Audio', 'Dynaudio', 'Elac', 'Wharfedale',\n    'Cambridge Audio', 'Rega', 'Naim', 'Linn', 'McIntosh', 'Krell',\n    'Paradigm', 'Martin Logan', 'Definitive Technology', 'Polk Audio',\n    'Infinity', 'Cerwin Vega', 'Jamo', 'Dali', 'Q Acoustics', 'Monitor',\n    'M-Audio', 'Focusrite', 'Presonus', 'Behringer', 'Rode', 'Blue',\n    'Audio Technica', 'Sennheiser', 'Beyerdynamic', 'AKG', 'Shure',\n    'Sony', 'Panasonic', 'Sharp', 'Toshiba', 'Hitachi', 'Daewoo',\n    'LG', 'Samsung', 'Philips', 'Braun', 'KitchenAid', 'Kenmore',\n    'Maytag', 'Frigidaire', 'GE', 'Hotpoint', 'Zanussi', 'AEG',\n    'Miele', 'Gorenje', 'Vestel', 'Arçelik', 'Blaupunkt', 'Grundig',\n    // Computer/Electronics brands\n    'Apple', 'Dell', 'HP', 'Lenovo', 'Asus', 'Acer', 'MSI', 'Gigabyte',\n    'Intel', 'AMD', 'NVIDIA', 'Corsair', 'EVGA', 'Thermaltake',\n    'Cooler Master', 'Noctua', 'be quiet!', 'Fractal Design', 'Phanteks',\n    'Lian Li', 'NZXT', 'Silverstone', 'Antec', 'Seasonic', 'EVGA',\n    'Corsair', 'G.Skill', 'Crucial', 'Samsung', 'Western Digital',\n    'Seagate', 'Kingston', 'ADATA', 'Team Group', 'Patriot', 'PNY',\n    'Logitech', 'Razer', 'SteelSeries', 'HyperX', 'Corsair', 'ROCCAT',\n    'Mad Catz', 'Saitek', 'Thrustmaster', 'Fanatec', 'Logitech G',\n    // Gaming brands\n    'Nintendo', 'Sony', 'Microsoft', 'Xbox', 'PlayStation', 'Steam',\n    'Valve', 'Blizzard', 'EA', 'Ubisoft', 'Activision', 'Bethesda',\n    'Rockstar', 'Take-Two', '2K', 'Capcom', 'Konami', 'Sega',\n    'Bandai Namco', 'Square Enix', 'Atlus', 'NIS America', 'Xseed',\n    'Aksys', 'Idea Factory', 'Compile Heart', 'Gust', 'Falcom',\n    'Nihon Falcom', 'Falcom', 'Nihon', 'Falcom', 'Nihon', 'Falcom'\n  ];\n  \n  const titleLower = productTitle.toLowerCase();\n  for (const brand of brands) {\n    if (titleLower.includes(brand.toLowerCase())) {\n      return brand;\n    }\n  }\n  \n  // If no known brand found, try to extract from the beginning of the title\n  const words = productTitle.split(' ');\n  if (words.length > 0) {\n    const firstWord = words[0];\n    // Check if first word looks like a brand (starts with capital letter and is reasonable length)\n    if (firstWord.length > 2 && firstWord.length < 15 && /^[A-Z]/.test(firstWord)) {\n      return firstWord;\n    }\n  }\n  \n  return \"\";\n}\n\n// Extract product type from product title\nfunction extractProductType(productTitle: string): string {\n  if (!productTitle) return \"\";\n  \n  const titleLower = productTitle.toLowerCase();\n  \n  // Common product types\n  const productTypes = [\n    // Kitchen appliances\n    'dishwasher', 'washing machine', 'dryer', 'refrigerator', 'freezer',\n    'oven', 'microwave', 'stove', 'cooker', 'range', 'hood', 'extractor',\n    'blender', 'mixer', 'food processor', 'coffee maker', 'toaster',\n    'kettle', 'iron', 'vacuum cleaner', 'air conditioner', 'heater',\n    'fan', 'dehumidifier', 'humidifier', 'purifier', 'filter',\n    \n    // Electronics\n    'laptop', 'computer', 'desktop', 'tablet', 'phone', 'smartphone',\n    'tv', 'television', 'monitor', 'speaker', 'headphone', 'camera',\n    'printer', 'scanner', 'router', 'modem', 'keyboard', 'mouse',\n    \n    // Audio equipment\n    'headphones', 'headphone', 'earbuds', 'earbud', 'earphones', 'earphone',\n    'speakers', 'speaker', 'subwoofer', 'woofer', 'tweeter', 'tweeters',\n    'amplifier', 'amp', 'receiver', 'preamp', 'preamplifier', 'power amp',\n    'power amplifier', 'integrated amp', 'integrated amplifier', 'mono block',\n    'monoblock', 'stereo amp', 'stereo amplifier', 'tube amp', 'tube amplifier',\n    'solid state', 'solid-state', 'class a', 'class b', 'class ab', 'class d',\n    'turntable', 'record player', 'vinyl player', 'cd player', 'cdp',\n    'dvd player', 'blu-ray player', 'streamer', 'streaming', 'dac',\n    'digital to analog converter', 'digital-to-analog converter', 'adc',\n    'analog to digital converter', 'analog-to-digital converter', 'phono',\n    'phono stage', 'phono preamp', 'phono preamplifier', 'mc', 'mm',\n    'moving coil', 'moving magnet', 'cartridge', 'stylus', 'needle',\n    'tonearm', 'platter', 'belt drive', 'direct drive', 'idler wheel',\n    'motor', 'bearing', 'spindle', 'mat', 'clamp', 'weight', 'stabilizer',\n    'isolation', 'feet', 'spikes', 'cones', 'balls', 'pads', 'sorbothane',\n    'cable', 'wire', 'interconnect', 'speaker cable', 'speaker wire',\n    'power cord', 'power cable', 'mains cable', 'mains cord', 'iec',\n    'power strip', 'surge protector', 'ups', 'uninterruptible power supply',\n    'battery', 'batteries', 'rechargeable', 'lithium', 'li-ion', 'li-poly',\n    'nickel', 'ni-mh', 'ni-cd', 'alkaline', 'zinc', 'carbon'\n  ];\n  \n  for (const type of productTypes) {\n    if (titleLower.includes(type)) {\n      return type;\n    }\n  }\n  \n  return \"\";\n}\n\n// Filter search results to only include exact product matches\nfunction filterExactProductMatches(results: any[], productModel: string | null, productTitle: string): any[] {\n  if (!results || results.length === 0) return [];\n  \n  const titleLower = productTitle.toLowerCase();\n  const modelLower = productModel?.toLowerCase() || \"\";\n  \n  return results.filter((result) => {\n    const resultTitle = (result.title || \"\").toLowerCase();\n    \n    // If we have a product model, check if it's in the result title\n    if (productModel && modelLower) {\n      if (resultTitle.includes(modelLower)) {\n        console.log(`Exact model match found: ${productModel} in \"${result.title}\"`);\n        return true;\n      }\n    }\n    \n    // Check for significant word matches (at least 3 words)\n    const titleWords = titleLower.split(/\\s+/).filter(word => word.length > 2);\n    const resultWords = resultTitle.split(/\\s+/).filter(word => word.length > 2);\n    \n    let matchCount = 0;\n    for (const word of titleWords) {\n      if (resultWords.some(resultWord => resultWord.includes(word) || word.includes(resultWord))) {\n        matchCount++;\n      }\n    }\n    \n    // Require at least 3 matching words or 60% match rate for longer titles\n    const minMatches = Math.max(3, Math.floor(titleWords.length * 0.6));\n    const isMatch = matchCount >= minMatches;\n    \n    if (isMatch) {\n      console.log(`Title match found: ${matchCount}/${titleWords.length} words match in \"${result.title}\"`);\n    }\n    \n    return isMatch;\n  });\n}\n\n// Remove duplicate results based on URL and title similarity\nfunction removeDuplicateResults(results: any[]): any[] {\n  if (!results || results.length === 0) return [];\n  \n  const seen = new Set<string>();\n  const uniqueResults: any[] = [];\n  \n  for (const result of results) {\n    // Create a unique key based on URL and title\n    const url = result.link || result.product_link || result.source_url || \"\";\n    const title = result.title || \"\";\n    const key = `${url}|${title}`;\n    \n    if (!seen.has(key)) {\n      seen.add(key);\n      uniqueResults.push(result);\n    }\n  }\n  \n  console.log(`Removed ${results.length - uniqueResults.length} duplicate results`);\n  return uniqueResults;\n}\n\n// Search for exact product model using SearchAPI (Google Search API)\nasync function searchExactProductModel(productModel: string, productTitle: string, userCountry: string, actualPrice?: number): Promise<PriceComparison[]> {\n  if (!SEARCH_API_KEY) {\n    console.warn(\"SearchAPI key not configured\");\n    return [];\n  }\n\n  try {\n    console.log(`Searching for exact product model: ${productModel}`);\n    console.log(`Original product title: ${productTitle}`);\n    console.log(`User country: ${userCountry}`);\n    console.log(`Actual price: ${actualPrice || 'Not available'}`);\n    console.log(`SearchAPI Key available: ${SEARCH_API_KEY ? \"Yes\" : \"No\"}`);\n    \n    // Test SearchAPI key first\n    const isKeyValid = await testSearchAPIKey();\n    if (!isKeyValid) {\n      console.warn(\"SearchAPI key is invalid, skipping search\");\n      return [];\n    }\n    \n    // Clean the product title for better search results\n    const cleanedProductTitle = await cleanProductTitleWithGemini(productTitle);\n    console.log(`Cleaned product title: \"${cleanedProductTitle}\"`);\n    \n    // Get country code for SearchAPI - convert to ISO format\n    const countryCode = getCountryCode(userCountry);\n    console.log(`Using country code: ${countryCode} for SearchAPI search`);\n\n    // Helper function to convert country names to ISO codes\n    function getCountryCode(country: string): string {\n      // Import the supported countries from location service\n      const { SEARCH_API_SUPPORTED_COUNTRIES } = require(\"../services/location\");\n      \n      // Find the country in supported countries by name\n      const supportedCountry = Object.values(SEARCH_API_SUPPORTED_COUNTRIES).find(\n        (c: any) => c.country.toLowerCase() === country.toLowerCase()\n      ) as any;\n      \n      if (supportedCountry) {\n        // Return the gl code (lowercase country code)\n        return supportedCountry.countryCode;\n      }\n      \n      // If not found, default to US\n      console.warn(`Country \"${country}\" not found in supported countries, defaulting to US`);\n      return 'us';\n    }\n    \n    // Create more flexible search queries for better matching\n    let searchQueries: string[] = [];\n    \n    if (productModel) {\n      // Try exact model number first\n      searchQueries.push(`\"${productModel}\"`);\n      // Try model with brand name\n      const brand = extractBrandFromTitle(cleanedProductTitle);\n      if (brand) {\n        searchQueries.push(`\"${productModel}\" ${brand}`);\n      }\n      // Try model with product type\n      const productType = extractProductType(cleanedProductTitle);\n      if (productType) {\n        searchQueries.push(`\"${productModel}\" ${productType}`);\n      }\n    }\n    \n    // Add cleaned product title queries\n    if (cleanedProductTitle) {\n      // Try exact cleaned title\n      searchQueries.push(`\"${cleanedProductTitle}\"`);\n      \n      // Try without quotes for broader matching\n      searchQueries.push(cleanedProductTitle);\n      \n      // Try with just brand and model\n      const brand = extractBrandFromTitle(cleanedProductTitle);\n      const words = cleanedProductTitle.split(' ').filter(word => word.length > 2);\n      if (brand && words.length > 1) {\n        const modelWords = words.slice(1, 3).join(' '); // Take 2-3 words after brand\n        if (modelWords) {\n          searchQueries.push(`${brand} ${modelWords}`);\n        }\n      }\n    }\n    \n    // If no model found, try with original product title as fallback\n    if (searchQueries.length === 0) {\n      searchQueries.push(`\"${productTitle}\"`);\n      searchQueries.push(productTitle);\n    }\n    \n    console.log(`Search queries to try: ${JSON.stringify(searchQueries)}`);\n    \n    let allResults: any[] = [];\n    let searchApiFailed = false;\n    let rateLimited = false;\n    \n    // Try each search query with rate limiting\n    for (const searchQuery of searchQueries) {\n      console.log(`Trying search query: ${searchQuery}`);\n      \n      // Build SearchAPI URL with shopping results\n      const searchApiUrl = `https://www.searchapi.io/api/v1/search?engine=google_shopping&q=${encodeURIComponent(searchQuery)}&gl=${countryCode}&api_key=${SEARCH_API_KEY}`;\n      console.log(`SearchAPI URL: ${searchApiUrl}`);\n      \n      // Make the actual SearchAPI request with rate limiting\n      const searchData = await makeSearchApiRequest(searchApiUrl);\n      \n      if (!searchData) {\n        console.warn(`SearchAPI failed for query \"${searchQuery}\", trying next query or fallback`);\n        searchApiFailed = true;\n        \n        // Check if it was rate limited\n        if (searchData === null) {\n          rateLimited = true;\n          console.warn(\"Rate limit detected, stopping further searches\");\n          break; // Stop trying more queries if rate limited\n        }\n        \n        continue; // Try next query\n      }\n      \n      console.log(`Raw SearchAPI response for \"${searchQuery}\":`, JSON.stringify(searchData, null, 2));\n      \n      // Extract shopping results from SearchAPI response\n      let shoppingResults = searchData.shopping_ads || searchData.shopping_results || searchData.inline_shopping || [];\n      console.log(`Found ${shoppingResults.length} shopping results for query \"${searchQuery}\"`);\n      \n      // Also check for knowledge graph shopping offers\n      const knowledgeGraph = searchData.knowledge_graph;\n      if (knowledgeGraph && knowledgeGraph.offers) {\n        console.log(`Found ${knowledgeGraph.offers.length} knowledge graph offers for query \"${searchQuery}\"`);\n        shoppingResults.push(...knowledgeGraph.offers);\n      }\n      \n      // Use more flexible matching instead of exact matches\n      const relevantMatches = filterRelevantProductMatches(shoppingResults, productModel, cleanedProductTitle, productTitle);\n      console.log(`Found ${relevantMatches.length} relevant matches for query \"${searchQuery}\"`);\n      \n      allResults.push(...relevantMatches);\n      \n      // If we found good results, we can stop trying more queries\n      if (relevantMatches.length >= 3) {\n        console.log(\"Found sufficient results, stopping search\");\n        break;\n      }\n    }\n    \n    // If SearchAPI failed completely or was rate limited, use fallback\n    if ((searchApiFailed && allResults.length === 0) || rateLimited) {\n      console.log(\"SearchAPI failed completely or was rate limited, using fallback comparisons\");\n      return generateFallbackComparisons(productTitle, actualPrice || 0, userCountry);\n    }\n    \n    // Remove duplicates and limit results\n    const uniqueResults = removeDuplicateResults(allResults);\n    console.log(`Total unique relevant matches found: ${uniqueResults.length}`);\n    \n    // Validate, sanitize, and convert SearchAPI results to PriceComparison format\n    const validationPromises = uniqueResults.map((result: any) => \n      validateAndSanitizeResult(result, productTitle, actualPrice)\n    );\n    \n    // Add timeout and rate limiting for URL validation\n    const validatedResults = await Promise.allSettled(validationPromises);\n    const comparisons: PriceComparison[] = validatedResults\n      .filter((result): result is PromiseFulfilledResult<PriceComparison | null> => \n        result.status === 'fulfilled' && result.value !== null\n      )\n      .map(result => result.value)\n      .slice(0, 10);\n    \n    console.log(`Converted ${comparisons.length} relevant SearchAPI results to PriceComparison format`);\n    \n    // Apply price filtering to remove unrelated parts/accessories\n    const priceFilteredComparisons = filterByPriceRange(comparisons, actualPrice || 0);\n    \n    console.log(\"Final price-filtered comparisons:\", JSON.stringify(priceFilteredComparisons, null, 2));\n    \n    // Return all valid SearchAPI results, even if they're from known retailers\n    if (priceFilteredComparisons.length > 0) {\n      console.log(`Returning ${priceFilteredComparisons.length} SearchAPI results with actual product URLs`);\n      return priceFilteredComparisons;\n    } else {\n      console.log(\"No SearchAPI results found, using fallback\");\n      return generateFallbackComparisons(productTitle, actualPrice || 0, userCountry);\n    }\n    \n  } catch (error) {\n    console.error(\"SearchAPI search error:\", error);\n    console.log(\"Using fallback comparisons due to error\");\n    return generateFallbackComparisons(productTitle, actualPrice || 0, userCountry);\n  }\n}\n\n// Generate fallback comparisons when SearchAPI fails\nfunction generateFallbackComparisons(productTitle: string, actualPrice: number, userCountry: string): PriceComparison[] {\n  console.log(\"No real product comparisons available - SearchAPI failed or returned no results\");\n  console.log(\"Returning empty array to avoid fake URLs\");\n  \n  // Return empty array instead of generating fake URLs\n  return [];\n}\n\n// Filter search results to include relevant product matches (more flexible than exact)\nfunction filterRelevantProductMatches(results: any[], productModel: string | null, cleanedTitle: string, originalTitle: string): any[] {\n  if (!results || results.length === 0) return [];\n  \n  const cleanedTitleLower = cleanedTitle.toLowerCase();\n  const originalTitleLower = originalTitle.toLowerCase();\n  const modelLower = productModel?.toLowerCase() || \"\";\n  \n  return results.filter((result) => {\n    const resultTitle = (result.title || \"\").toLowerCase();\n    \n    // If we have a product model, check if it's in the result title\n    if (productModel && modelLower) {\n      if (resultTitle.includes(modelLower)) {\n        console.log(`Model match found: ${productModel} in \"${result.title}\"`);\n        return true;\n      }\n    }\n    \n    // Check for brand match\n    const brand = extractBrandFromTitle(cleanedTitle);\n    if (brand) {\n      const brandLower = brand.toLowerCase();\n      if (resultTitle.includes(brandLower)) {\n        console.log(`Brand match found: ${brand} in \"${result.title}\"`);\n        return true;\n      }\n    }\n    \n    // Check for significant word matches (more flexible than exact)\n    const titleWords = cleanedTitleLower.split(/\\s+/).filter(word => word.length > 2);\n    const resultWords = resultTitle.split(/\\s+/).filter(word => word.length > 2);\n    \n    let matchCount = 0;\n    for (const word of titleWords) {\n      if (resultWords.some(resultWord => resultWord.includes(word) || word.includes(resultWord))) {\n        matchCount++;\n      }\n    }\n    \n    // More flexible matching: require at least 2 matching words or 40% match rate\n    const minMatches = Math.max(2, Math.floor(titleWords.length * 0.4));\n    const isMatch = matchCount >= minMatches;\n    \n    if (isMatch) {\n      console.log(`Relevant match found: ${matchCount}/${titleWords.length} words match in \"${result.title}\"`);\n    }\n    \n    return isMatch;\n  });\n}\n\n// These functions are no longer needed since we're using real SerpAPI data\n\n// Generate assessment based on price and retailer\nfunction generateAssessment(price: number, basePrice: number, retailer: string): any {\n  let cost = 2; // Medium by default\n  if (price < basePrice * 0.9) cost = 1; // Low cost\n  else if (price > basePrice * 1.1) cost = 3; // High cost\n  \n  return {\n    cost,\n    value: Math.floor(Math.random() * 3) + 1, // 1-3\n    quality: Math.floor(Math.random() * 3) + 1, // 1-3\n    description: `Found on ${retailer}`\n  };\n}\n\n// Extract price from SearchAPI extensions\nconst extractPriceFromExtensions = (extensions: string[] = []): string | null => {\n  const priceRegex = /€\\s?\\d{1,3}(?:[.,]\\d{2})?/; // Matches €437.00 or € 437,00\n  for (const el of extensions) {\n    const match = el.match(priceRegex);\n    if (match) {\n      return match[0].trim();\n    }\n  }\n  return null;\n};\n\n// Validate and sanitize SearchAPI result to ensure it has a valid price and URL\nasync function validateAndSanitizeResult(result: any, productTitle: string, actualPrice?: number): Promise<PriceComparison | null> {\n  // Try to extract price from extensions first, then fallback to other fields\n  const priceFromExtensions = extractPriceFromExtensions(result.rich_snippet?.extensions);\n  const price = priceFromExtensions ? extractPrice(priceFromExtensions) : extractPrice(result.price || result.priceText || result.price_string || result.extracted_price || '');\n  const rawUrl = result.link || result.product_link || result.source_url || result.url || result.offers_link || '';\n  const url = extractDirectRetailerUrl(rawUrl);\n  \n  if (price == null || !url) {\n    console.log(`Skipping invalid result: ${result.title} (no price or URL)`);\n    return null;\n  }\n  \n  // Check if this is a real product URL (not just a domain)\n  const isRealProductUrl = url && \n    url.length > 20 && // Real product URLs are longer\n    !url.match(/^https?:\\/\\/[^\\/]+\\/?$/) && // Not just a domain\n    (url.includes('/product/') || url.includes('/p/') || url.includes('/dp/') || url.includes('/item/') || url.includes('/shop/') || url.includes('google.com/shopping/product/'));\n  \n  if (!isRealProductUrl) {\n    console.log(`Skipping result with non-product URL: ${result.title} (URL: ${url})`);\n    return null;\n  }\n  \n  // Skip HTML validation for Google Shopping URLs since they return 404 when accessed directly\n  if (url.includes('google.com/shopping/product/')) {\n    console.log(`Skipping HTML validation for Google Shopping URL: ${url}`);\n    const finalTitle = result.title || 'Unknown Product';\n    const finalPrice = price || 0;\n    const finalImage = result.thumbnail || result.image || '';\n    \n    // Generate assessment based on price comparison\n    const assessment = generateAssessment(finalPrice, actualPrice || 0, result.seller || result.source || \"\");\n    return {\n      title: finalTitle,\n      store: extractStoreName(result.seller || result.source || \"\"),\n      price: finalPrice,\n      currency: result.currency || \"€\",\n      url,\n      image: finalImage,\n      condition: \"New\",\n      assessment\n    };\n  }\n  \n  // Validate URL by fetching HTML and checking for product content\n  try {\n    console.log(`Validating URL: ${url}`);\n    const response = await axios.get(url, {\n      timeout: 10000,\n      maxRedirects: 5,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; PriceComparisonBot/1.0)'\n      }\n    });\n    \n    const html = response.data;\n    const isValidProductPage = validateProductPage(html, productTitle);\n    \n    if (!isValidProductPage) {\n      console.log(`URL validation failed: ${result.title} (URL: ${url}) - No valid product content found`);\n      return null;\n    }\n    \n    console.log(`URL validation successful: ${result.title} (URL: ${url})`);\n    \n    // Extract real product information from HTML\n    const extractedInfo = extractProductInfoFromHTML(html, url);\n    console.log(`Extracted product info:`, extractedInfo);\n    \n    // Use extracted information if available, otherwise use original data\n    const finalTitle = extractedInfo.title || result.title || productTitle;\n    const finalPrice = extractedInfo.price || price;\n    const finalImage = extractedInfo.image || result.thumbnail || result.image || \"\";\n    \n    // Generate assessment based on price comparison\n    const assessment = generateAssessment(finalPrice, actualPrice || 0, result.seller || result.source || \"\");\n    return {\n      title: finalTitle,\n      store: extractStoreName(result.seller || result.source || \"\"),\n      price: finalPrice,\n      currency: result.currency || \"€\",\n      url,\n      image: finalImage,\n      condition: \"New\",\n      assessment\n    };\n  } catch (error) {\n    console.log(`URL validation failed: ${result.title} (URL: ${url}) - HTTP error: ${error}`);\n    return null;\n  }\n}\n\n// Validate HTML content to check if it's a real product page\nfunction validateProductPage(html: string, productTitle: string): boolean {\n  const htmlLower = html.toLowerCase();\n  const titleLower = productTitle.toLowerCase();\n  \n  // Check for common error indicators\n  const errorIndicators = [\n    'page not found',\n    '404',\n    'not found',\n    'error',\n    'sorry',\n    'unavailable',\n    'out of stock',\n    'discontinued',\n    'click the button below to continue shopping'\n  ];\n  \n  for (const indicator of errorIndicators) {\n    if (htmlLower.includes(indicator)) {\n      console.log(`Found error indicator: ${indicator}`);\n      return false;\n    }\n  }\n  \n  // Check for product-specific content\n  const productIndicators = [\n    'add to cart',\n    'buy now',\n    'add to basket',\n    'purchase',\n    'price',\n    '€',\n    '$',\n    'product',\n    'item',\n    'shipping',\n    'delivery',\n    'stock',\n    'availability'\n  ];\n  \n  let productIndicatorCount = 0;\n  for (const indicator of productIndicators) {\n    if (htmlLower.includes(indicator)) {\n      productIndicatorCount++;\n    }\n  }\n  \n  // Check if title keywords are present in the page\n  const titleWords = titleLower.split(' ').filter(word => word.length > 2);\n  let titleMatchCount = 0;\n  for (const word of titleWords) {\n    if (htmlLower.includes(word)) {\n      titleMatchCount++;\n    }\n  }\n  \n  // Require at least 3 product indicators and some title matches\n  const hasProductContent = productIndicatorCount >= 3;\n  const hasTitleMatches = titleMatchCount >= Math.max(1, titleWords.length * 0.3);\n  \n  console.log(`Product validation: ${productIndicatorCount} product indicators, ${titleMatchCount}/${titleWords.length} title matches`);\n  \n  return hasProductContent && hasTitleMatches;\n}\n\n// Extract product information from HTML\nfunction extractProductInfoFromHTML(html: string, url: string): { title?: string; price?: number; image?: string } {\n  const htmlLower = html.toLowerCase();\n  \n  // Extract title from meta tags or page title\n  let title = '';\n  const titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i);\n  if (titleMatch) {\n    title = titleMatch[1].trim();\n  }\n  \n  // Extract price from various patterns\n  let price = 0;\n  const pricePatterns = [\n    /€\\s*(\\d+[.,]\\d{2})/i,\n    /\\$(\\d+[.,]\\d{2})/i,\n    /(\\d+[.,]\\d{2})\\s*€/i,\n    /(\\d+[.,]\\d{2})\\s*\\$/i,\n    /price[^>]*>.*?(\\d+[.,]\\d{2})/i,\n    /cost[^>]*>.*?(\\d+[.,]\\d{2})/i\n  ];\n  \n  for (const pattern of pricePatterns) {\n    const match = html.match(pattern);\n    if (match) {\n      price = parseFloat(match[1].replace(',', '.'));\n      break;\n    }\n  }\n  \n  // Extract image from meta tags or img tags\n  let image = '';\n  const imagePatterns = [\n    /<meta[^>]*property=\"og:image\"[^>]*content=\"([^\"]+)\"/i,\n    /<meta[^>]*name=\"twitter:image\"[^>]*content=\"([^\"]+)\"/i,\n    /<img[^>]*src=\"([^\"]*product[^\"]*)\"[^>]*>/i,\n    /<img[^>]*src=\"([^\"]*\\.(?:jpg|jpeg|png|webp))\"[^>]*>/i\n  ];\n  \n  for (const pattern of imagePatterns) {\n    const match = html.match(pattern);\n    if (match && match[1]) {\n      image = match[1];\n      if (image.startsWith('//')) {\n        image = 'https:' + image;\n      } else if (image.startsWith('/')) {\n        const urlObj = new URL(url);\n        image = urlObj.origin + image;\n      }\n      break;\n    }\n  }\n  \n  return { title, price, image };\n}\n\n// Filter comparisons by price range to remove unrelated parts/accessories\nfunction filterByPriceRange(comparisons: PriceComparison[], originalPrice: number): PriceComparison[] {\n  if (originalPrice <= 0) {\n    console.log(\"No original price available, skipping price filtering\");\n    return comparisons;\n  }\n  \n  // For Google Shopping results, be more lenient with price filtering\n  const isGoogleShopping = comparisons.some(comp => comp.url.includes('google.com/shopping/product/'));\n  \n  let minPrice, maxPrice;\n  if (isGoogleShopping) {\n    // More lenient for Google Shopping - allow wider range\n    minPrice = originalPrice * 0.1; // 10% of original price\n    maxPrice = originalPrice * 3.0; // 300% of original price\n    console.log(`Google Shopping detected - using lenient price range: €${minPrice.toFixed(2)} - €${maxPrice.toFixed(2)}`);\n  } else {\n    // Standard filtering for direct retailer URLs\n    minPrice = originalPrice * 0.4; // 40% of original price\n    maxPrice = originalPrice * 2.0; // 200% of original price\n    console.log(`Price range: €${minPrice.toFixed(2)} - €${maxPrice.toFixed(2)}`);\n  }\n  \n  const filtered = comparisons.filter(comparison => {\n    const isInRange = comparison.price >= minPrice && comparison.price <= maxPrice;\n    if (isInRange) {\n      console.log(`✓ ${comparison.store}: €${comparison.price} (within range)`);\n    } else {\n      console.log(`Filtered out ${comparison.store}: €${comparison.price} (${comparison.price < minPrice ? 'too cheap' : 'too expensive'})`);\n    }\n    return isInRange;\n  });\n  \n  console.log(`Price filtering: ${comparisons.length} → ${filtered.length} results`);\n  return filtered;\n}\n\n// Get local retailers for a specific country\nfunction getLocalRetailers(country: string): string[] {\n  const retailerMap: { [key: string]: string[] } = {\n    'Germany': [\n      'amazon.de', 'mediamarkt.de', 'saturn.de', 'otto.de', 'idealo.de',\n      'geizhals.de', 'preisvergleich.de', 'galaxus.de', 'coolblue.de',\n      'cyberport.de', 'alternate.de', 'mindfactory.de', 'caseking.de',\n      'hardwareversand.de', 'computeruniverse.net', 'notebooksbilliger.de',\n      'redcoon.de', 'arlt.com', 'hifi-schluderbacher.de', 'premiumhifi.de'\n    ],\n    'United States': [\n      'amazon.com', 'walmart.com', 'target.com', 'bestbuy.com', 'newegg.com',\n      'bhphotovideo.com', 'adorama.com', 'microcenter.com', 'ebay.com',\n      'costco.com', 'samsclub.com'\n    ],\n    'United Kingdom': [\n      'amazon.co.uk', 'currys.co.uk', 'argos.co.uk', 'johnlewis.com',\n      'very.co.uk', 'ao.com', 'ebay.co.uk', 'scan.co.uk', 'overclockers.co.uk'\n    ],\n    'France': [\n      'amazon.fr', 'fnac.com', 'darty.com', 'boulanger.com', 'ldlc.com',\n      'materiel.net', 'rue-du-commerce.fr', 'cdiscount.com'\n    ],\n    'Italy': [\n      'amazon.it', 'unieuro.it', 'mediaworld.it', 'trony.it', 'euronics.it'\n    ],\n    'Spain': [\n      'amazon.es', 'pccomponentes.com', 'mediamarkt.es', 'elcorteingles.es'\n    ],\n    'Netherlands': [\n      'amazon.nl', 'bol.com', 'coolblue.nl', 'mediamarkt.nl', 'saturn.nl'\n    ],\n    'Belgium': [\n      'amazon.be', 'bol.com', 'coolblue.be', 'mediamarkt.be', 'saturn.be'\n    ],\n    'Austria': [\n      'amazon.at', 'mediamarkt.at', 'saturn.at', 'otto.at', 'idealo.at'\n    ],\n    'Switzerland': [\n      'amazon.ch', 'digitec.ch', 'galaxus.ch', 'mediamarkt.ch', 'saturn.ch'\n    ]\n  };\n  \n  return retailerMap[country] || retailerMap['United States'];\n}\n\n// Sort comparisons by local retailers first\nfunction sortByLocalRetailers(comparisons: PriceComparison[], userCountry: string): PriceComparison[] {\n  const localRetailers = getLocalRetailers(userCountry);\n  \n  return comparisons.sort((a, b) => {\n    const aIsLocal = localRetailers.some(retailer => \n      a.store.toLowerCase().includes(retailer.toLowerCase())\n    );\n    const bIsLocal = localRetailers.some(retailer => \n      b.store.toLowerCase().includes(retailer.toLowerCase())\n    );\n    \n    // Local retailers first\n    if (aIsLocal && !bIsLocal) return -1;\n    if (!aIsLocal && bIsLocal) return 1;\n    \n    // Then by price (lowest first)\n    return a.price - b.price;\n  });\n}\n\n// Detect product information from URL\nasync function detectProductFromUrl(url: string): Promise<{\n  brand: string;\n  model: string;\n  title: string;\n  category: string;\n  price?: number;\n} | null> {\n  try {\n    console.log(`Detecting product from URL: ${url}`);\n    \n    const urlObj = new URL(url);\n    const hostname = urlObj.hostname;\n    const pathname = urlObj.pathname;\n    \n    // Extract brand from hostname\n    const brandFromHostname = extractBrandFromHostname(hostname);\n    \n    // Extract product information from pathname\n    const pathInfo = extractProductFromPathname(pathname);\n    \n    // Combine information\n    const detectedProduct = {\n      brand: brandFromHostname || pathInfo.brand || \"\",\n      model: pathInfo.model || \"\",\n      title: pathInfo.title || \"\",\n      category: pathInfo.category || \"\",\n      price: pathInfo.price\n    };\n    \n    console.log(`Detected product:`, detectedProduct);\n    return detectedProduct;\n    \n  } catch (error) {\n    console.error(\"Error detecting product from URL:\", error);\n    return null;\n  }\n}\n\n// Extract brand from hostname\nfunction extractBrandFromHostname(hostname: string): string {\n  const brandPatterns = [\n    /^www\\.(sonos|bose|jbl|sennheiser|beyerdynamic|akg|shure|denon|marantz|yamaha|pioneer|onkyo|harman|klipsch|bowerswilkins|focal|kef|monitor|dynaudio|elac|wharfedale|cambridge|rega|naim|linn|mcintosh|krell|paradigm|martinlogan|definitive|polk|infinity|cerwinvega|jamo|dali|qacoustics|m-audio|focusrite|presonus|behringer|rode|blue|audiotechnica|raycon|anker|soundcore|houseofmarley)\\./i,\n    /^www\\.(samsung|lg|bosch|siemens|beko|whirlpool|electrolux|panasonic|sharp|toshiba|hitachi|daewoo|haier|apple|sony|philips|braun|kitchenaid|kenmore|maytag|frigidaire|ge|hotpoint|zanussi|aeg|miele|gorenje|vestel|arçelik|blaupunkt|grundig)\\./i,\n    /^www\\.(dell|hp|lenovo|asus|acer|msi|gigabyte|intel|amd|nvidia|corsair|evga|thermaltake|coolermaster|noctua|bequiet|fractal|phanteks|lianli|nzxt|silverstone|antec|seasonic|gskill|crucial|western|seagate|kingston|adata|teamgroup|patriot|pny|logitech|razer|steelseries|hyperx|roccat|madcatz|saitek|thrustmaster|fanatec)\\./i\n  ];\n  \n  for (const pattern of brandPatterns) {\n    const match = hostname.match(pattern);\n    if (match) {\n      return match[1].toLowerCase();\n    }\n  }\n  \n  return \"\";\n}\n\n// Extract product information from URL pathname\nfunction extractProductFromPathname(pathname: string): {\n  brand: string;\n  model: string;\n  title: string;\n  category: string;\n  price?: number;\n} {\n  const pathParts = pathname.split('/').filter(part => part.length > 0);\n  \n  // Common product patterns\n  const productPatterns = [\n    // Sonos patterns\n    { pattern: /sonos-ace/i, brand: 'sonos', model: 'ace', category: 'headphones' },\n    { pattern: /sonos-era/i, brand: 'sonos', model: 'era', category: 'speakers' },\n    { pattern: /sonos-beam/i, brand: 'sonos', model: 'beam', category: 'soundbar' },\n    { pattern: /sonos-arc/i, brand: 'sonos', model: 'arc', category: 'soundbar' },\n    { pattern: /sonos-sub/i, brand: 'sonos', model: 'sub', category: 'subwoofer' },\n    { pattern: /sonos-one/i, brand: 'sonos', model: 'one', category: 'speakers' },\n    { pattern: /sonos-five/i, brand: 'sonos', model: 'five', category: 'speakers' },\n    { pattern: /sonos-move/i, brand: 'sonos', model: 'move', category: 'portable-speaker' },\n    { pattern: /sonos-roam/i, brand: 'sonos', model: 'roam', category: 'portable-speaker' },\n    \n    // Bose patterns\n    { pattern: /bose-quietcomfort/i, brand: 'bose', model: 'quietcomfort', category: 'headphones' },\n    { pattern: /bose-soundlink/i, brand: 'bose', model: 'soundlink', category: 'speakers' },\n    { pattern: /bose-home-speaker/i, brand: 'bose', model: 'home-speaker', category: 'speakers' },\n    { pattern: /bose-sport/i, brand: 'bose', model: 'sport', category: 'headphones' },\n    \n    // JBL patterns\n    { pattern: /jbl-charge/i, brand: 'jbl', model: 'charge', category: 'portable-speaker' },\n    { pattern: /jbl-flip/i, brand: 'jbl', model: 'flip', category: 'portable-speaker' },\n    { pattern: /jbl-pulse/i, brand: 'jbl', model: 'pulse', category: 'portable-speaker' },\n    { pattern: /jbl-partybox/i, brand: 'jbl', model: 'partybox', category: 'portable-speaker' },\n    \n    // Sennheiser patterns\n    { pattern: /sennheiser-momentum/i, brand: 'sennheiser', model: 'momentum', category: 'headphones' },\n    { pattern: /sennheiser-hd/i, brand: 'sennheiser', model: 'hd', category: 'headphones' },\n    { pattern: /sennheiser-ie/i, brand: 'sennheiser', model: 'ie', category: 'earphones' },\n    \n    // Audio-Technica patterns\n    { pattern: /audio-technica-ath/i, brand: 'audio-technica', model: 'ath', category: 'headphones' },\n    { pattern: /audio-technica-at/i, brand: 'audio-technica', model: 'at', category: 'microphones' },\n    \n    // Shure patterns\n    { pattern: /shure-se/i, brand: 'shure', model: 'se', category: 'earphones' },\n    { pattern: /shure-srh/i, brand: 'shure', model: 'srh', category: 'headphones' },\n    { pattern: /shure-sm/i, brand: 'shure', model: 'sm', category: 'microphones' },\n    \n    // Beyerdynamic patterns\n    { pattern: /beyerdynamic-dt/i, brand: 'beyerdynamic', model: 'dt', category: 'headphones' },\n    { pattern: /beyerdynamic-t/i, brand: 'beyerdynamic', model: 't', category: 'microphones' },\n    \n    // AKG patterns\n    { pattern: /akg-k/i, brand: 'akg', model: 'k', category: 'headphones' },\n    { pattern: /akg-p/i, brand: 'akg', model: 'p', category: 'microphones' },\n    \n    // Denon patterns\n    { pattern: /denon-avr/i, brand: 'denon', model: 'avr', category: 'receiver' },\n    { pattern: /denon-dm/i, brand: 'denon', model: 'dm', category: 'micro-system' },\n    \n    // Marantz patterns\n    { pattern: /marantz-sr/i, brand: 'marantz', model: 'sr', category: 'receiver' },\n    { pattern: /marantz-pm/i, brand: 'marantz', model: 'pm', category: 'amplifier' },\n    \n    // Yamaha patterns\n    { pattern: /yamaha-rx/i, brand: 'yamaha', model: 'rx', category: 'receiver' },\n    { pattern: /yamaha-ax/i, brand: 'yamaha', model: 'ax', category: 'amplifier' },\n    { pattern: /yamaha-ns/i, brand: 'yamaha', model: 'ns', category: 'speakers' },\n    \n    // Pioneer patterns\n    { pattern: /pioneer-vsx/i, brand: 'pioneer', model: 'vsx', category: 'receiver' },\n    { pattern: /pioneer-a/i, brand: 'pioneer', model: 'a', category: 'amplifier' },\n    \n    // Onkyo patterns\n    { pattern: /onkyo-tx/i, brand: 'onkyo', model: 'tx', category: 'receiver' },\n    { pattern: /onkyo-a/i, brand: 'onkyo', model: 'a', category: 'amplifier' },\n    \n    // Klipsch patterns\n    { pattern: /klipsch-rp/i, brand: 'klipsch', model: 'rp', category: 'speakers' },\n    { pattern: /klipsch-reference/i, brand: 'klipsch', model: 'reference', category: 'speakers' },\n    { pattern: /klipsch-synergy/i, brand: 'klipsch', model: 'synergy', category: 'speakers' },\n    \n    // Bowers & Wilkins patterns\n    { pattern: /bowers-wilkins-600/i, brand: 'bowers & wilkins', model: '600', category: 'speakers' },\n    { pattern: /bowers-wilkins-700/i, brand: 'bowers & wilkins', model: '700', category: 'speakers' },\n    { pattern: /bowers-wilkins-800/i, brand: 'bowers & wilkins', model: '800', category: 'speakers' },\n    { pattern: /bowers-wilkins-px/i, brand: 'bowers & wilkins', model: 'px', category: 'headphones' },\n    { pattern: /bowers-wilkins-pi/i, brand: 'bowers & wilkins', model: 'pi', category: 'earphones' },\n    \n    // Focal patterns\n    { pattern: /focal-aria/i, brand: 'focal', model: 'aria', category: 'speakers' },\n    { pattern: /focal-chora/i, brand: 'focal', model: 'chora', category: 'speakers' },\n    { pattern: /focal-utopia/i, brand: 'focal', model: 'utopia', category: 'speakers' },\n    { pattern: /focal-elegia/i, brand: 'focal', model: 'elegia', category: 'headphones' },\n    { pattern: /focal-clear/i, brand: 'focal', model: 'clear', category: 'headphones' },\n    \n    // KEF patterns\n    { pattern: /kef-q/i, brand: 'kef', model: 'q', category: 'speakers' },\n    { pattern: /kef-r/i, brand: 'kef', model: 'r', category: 'speakers' },\n    { pattern: /kef-reference/i, brand: 'kef', model: 'reference', category: 'speakers' },\n    { pattern: /kef-ls50/i, brand: 'kef', model: 'ls50', category: 'speakers' },\n    \n    // Monitor Audio patterns\n    { pattern: /monitor-audio-bronze/i, brand: 'monitor audio', model: 'bronze', category: 'speakers' },\n    { pattern: /monitor-audio-silver/i, brand: 'monitor audio', model: 'silver', category: 'speakers' },\n    { pattern: /monitor-audio-gold/i, brand: 'monitor audio', model: 'gold', category: 'speakers' },\n    { pattern: /monitor-audio-platinum/i, brand: 'monitor audio', model: 'platinum', category: 'speakers' }\n  ];\n  \n  const pathString = pathname.toLowerCase();\n  \n  for (const pattern of productPatterns) {\n    if (pattern.pattern.test(pathString)) {\n      return {\n        brand: pattern.brand,\n        model: pattern.model,\n        title: `${pattern.brand} ${pattern.model}`.toLowerCase(),\n        category: pattern.category\n      };\n    }\n  }\n  \n  // Fallback: try to extract from path parts\n  const lastPart = pathParts[pathParts.length - 1];\n  if (lastPart) {\n    // Look for model numbers in the last part\n    const modelMatch = lastPart.match(/([a-z]{2,4}\\d{2,4}[a-z]?)/i);\n    if (modelMatch) {\n      return {\n        brand: \"\",\n        model: modelMatch[1],\n        title: lastPart,\n        category: \"electronics\"\n      };\n    }\n  }\n  \n  return {\n    brand: \"\",\n    model: \"\",\n    title: pathParts.join(' '),\n    category: \"electronics\"\n  };\n}\n\n// Generate price comparisons for a product\nfunction generatePriceComparisons(mainProduct: ProductData): PriceComparison[] {\n  console.log(`Generating price comparisons for: ${mainProduct.title}`);\n  \n  // Get user location (default to Germany for now)\n  const userLocation = { country: 'Germany' };\n  console.log(`User location: ${JSON.stringify(userLocation)}`);\n  \n  // Don't generate fake URLs - return empty array\n  console.log(\"Not generating fake URLs - returning empty array\");\n  return [];\n}\n\n// Convert scraped data to standard format\nfunction convertToStandardFormat(scrapedData: any): {\n  product: ProductData;\n  comparisons: PriceComparison[];\n} {\n  const product: ProductData = {\n    title: scrapedData.originalProduct?.title || \"Product\",\n    price: scrapedData.originalProduct?.price || 0,\n    currency: scrapedData.originalProduct?.currency || \"€\",\n    url: scrapedData.originalProduct?.url || \"\",\n    image: scrapedData.originalProduct?.image || \"/placeholder.svg\",\n    store: scrapedData.originalProduct?.store || \"Unknown\"\n  };\n  \n  const comparisons: PriceComparison[] = scrapedData.comparisons || [];\n  \n  return { product, comparisons };\n}\n\n// Gemini validation function\nasync function runGeminiValidation(originalProduct: any, comparisons: any[]) {\n  // Skip Gemini validation if too many failures\n  if (geminiFailureCount >= MAX_GEMINI_FAILURES) {\n    console.log(\"Skipping Gemini validation due to previous failures\");\n    return comparisons;\n  }\n\n  const prompt = `You are a product comparison filter. Given an original product and a list of product comparisons from different stores, return only the ones that truly match the original product (same model and condition). Also clean up image URLs and standardize pricing.\n\nIMPORTANT: Return ONLY a valid JSON array, no markdown formatting, no explanations, no code blocks. Just the raw JSON array.\n\nOriginal Product:\n${JSON.stringify(originalProduct)}\n\nComparisons:\n${JSON.stringify(comparisons)}\n\nReturn ONLY a JSON array of cleaned and validated comparison products:`;\n\n  try {\n    const response = await axios.post(\n      'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent',\n      {\n        contents: [{ parts: [{ text: prompt }] }]\n      },\n      {\n        params: { key: process.env.GEMINI_API_KEY },\n        headers: { 'Content-Type': 'application/json' },\n        timeout: 30000, // 30 second timeout\n        maxRedirects: 5\n      }\n    );\n\n    const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || '{}';\n    return safeParseGeminiJSON(text, comparisons);\n  } catch (error) {\n    console.error('Gemini API error:', error);\n    if (axios.isAxiosError(error)) {\n      console.error('Response status:', error.response?.status);\n      console.error('Response data:', error.response?.data);\n    }\n    geminiFailureCount++;\n    console.log(`Gemini validation failure count: ${geminiFailureCount}/${MAX_GEMINI_FAILURES}`);\n    throw new Error(`Gemini API request failed: ${error}`);\n  }\n}\n\nrouter.post(\"/scrape-enhanced\", async (req, res) => {\n  try {\n    const { url } = req.body;\n\n    if (!url) {\n      return res.status(400).json({ error: \"URL is required\" });\n    }\n\n    console.log(`Backend scraping request for: ${url}`);\n\n    // Enhanced product detection (like Dupe.com)\n    const detectedProduct = await detectProductFromUrl(url);\n    console.log(`Enhanced product detection result:`, detectedProduct);\n\n    // Extract product model from URL (fallback method)\n    const productModel = extractProductModel(url);\n    console.log(`Extracted product model: ${productModel || \"Not found\"}`);\n\n    // Get user country from request or default to United States\n    const userCountry = req.body.userLocation?.country || \"United States\";\n    console.log(`User country detected: ${userCountry}`);\n\n    // Extract product data directly without calling the old scraping function\n    let capturedData: any = null;\n    \n    try {\n      // Use the enhanced product detection\n      const detectedProduct = await detectProductFromUrl(url);\n      console.log(\"Detected product:\", detectedProduct);\n      \n      // Create basic product data structure\n      capturedData = {\n        originalProduct: {\n          title: detectedProduct?.title || \"Product\",\n          price: detectedProduct?.price || 0,\n          currency: \"€\",\n          url,\n          image: \"/placeholder.svg\",\n          store: new URL(url).hostname.replace(/^www\\./, \"\"),\n        },\n        comparisons: [],\n      };\n    } catch (error) {\n      console.error(\"Error detecting product:\", error);\n      capturedData = {\n        originalProduct: {\n          title: \"Product\",\n          price: 0,\n          currency: \"€\",\n          url,\n          image: \"/placeholder.svg\",\n          store: new URL(url).hostname.replace(/^www\\./, \"\"),\n        },\n        comparisons: [],\n      };\n    }\n\n    // Debug: Log what the original scraping returned\n    console.log(\"Original scraping result:\", JSON.stringify(capturedData, null, 2));\n\n    // ALWAYS try to get real URLs from SearchAPI first, regardless of scraping success\n    let comparisons: PriceComparison[] = [];\n    let searchApiUsed = false;\n    \n    try {\n      // Consolidate search logic to avoid duplicate calls\n      let searchAttempted = false;\n      \n      // Use enhanced product detection for better search queries\n      if (detectedProduct && detectedProduct.brand && detectedProduct.model && !searchAttempted) {\n        console.log(`Using enhanced product detection: ${detectedProduct.brand} ${detectedProduct.model}`);\n        const searchTitle = `${detectedProduct.brand} ${detectedProduct.model}`;\n        comparisons = await searchExactProductModel(\n          detectedProduct.model, \n          searchTitle, \n          userCountry, \n          capturedData?.originalProduct?.price\n        );\n        searchApiUsed = true;\n        searchAttempted = true;\n      }\n      \n      // If no results and we have a product model, try with that\n      if (comparisons.length === 0 && productModel && !searchAttempted) {\n        console.log(`Using extracted product model: ${productModel}`);\n        comparisons = await searchExactProductModel(\n          productModel, \n          capturedData?.originalProduct?.title || \"Product\", \n          userCountry, \n          capturedData?.originalProduct?.price\n        );\n        searchApiUsed = true;\n        searchAttempted = true;\n      }\n\n      // If still no results, try with just the product title (only once)\n      if (comparisons.length === 0 && capturedData?.originalProduct?.title && !searchAttempted) {\n        console.log(\"No results with product model, trying with product title\");\n        comparisons = await searchExactProductModel(\n          \"\", \n          capturedData.originalProduct.title, \n          userCountry, \n          capturedData.originalProduct.price\n        );\n        searchApiUsed = true;\n        searchAttempted = true;\n      }\n    } catch (searchError) {\n      console.error(\"SearchAPI error:\", searchError);\n      console.log(\"SearchAPI failed, will use fallback comparisons\");\n    }\n\n    // Check if we got real SearchAPI results with actual product URLs\n    const hasRealUrls = comparisons.length > 0 && searchApiUsed && \n      comparisons.some(comp => comp.url && comp.url.length > 20 && \n        !comp.url.match(/^https?:\\/\\/[^\\/]+\\/?$/));\n    \n    if (hasRealUrls) {\n      console.log(`Found ${comparisons.length} real SearchAPI results with actual product URLs, using them`);\n      // Sort by price (lowest first) and then by local retailers\n      comparisons = sortByLocalRetailers(comparisons, userCountry);\n      if (capturedData) {\n        capturedData.comparisons = comparisons;\n      } else {\n        // Create basic product data if scraping failed\n        capturedData = {\n          originalProduct: {\n            title: detectedProduct?.title || \"Product\",\n            price: 0,\n            currency: \"€\",\n            url,\n            image: \"/placeholder.svg\",\n            store: new URL(url).hostname.replace(/^www\\./, \"\"),\n          },\n          comparisons,\n        };\n      }\n    } else {\n      console.log(\"No real SearchAPI results with valid URLs found, using empty comparisons\");\n      // Don't use fake URLs - return empty comparisons\n      if (!capturedData || !capturedData.originalProduct || capturedData.originalProduct.price === 0) {\n        console.log(\"Original scraping failed or returned no price\");\n        \n        // Create a basic product data structure\n        const product: ProductData = {\n          title: detectedProduct?.title || \"Product\",\n          price: 0,\n          currency: \"€\",\n          url,\n          image: \"/placeholder.svg\",\n          store: new URL(url).hostname.replace(/^www\\./, \"\"),\n        };\n\n        capturedData = {\n          originalProduct: product,\n          comparisons: [], // Empty array instead of fake URLs\n        };\n      } else {\n        // Original scraping succeeded, but no SearchAPI results\n        console.log(\"Using empty comparisons - no real URLs available\");\n        capturedData.comparisons = []; // Empty array instead of fake URLs\n      }\n    }\n\n    if (!capturedData) {\n      throw new Error(\"Failed to scrape product data\");\n    }\n\n    // Convert to standard format\n    const result = convertToStandardFormat(capturedData);\n\n    // Gemini validation step\n    let validatedComparisons = result.comparisons;\n    try {\n      validatedComparisons = await runGeminiValidation(result.product, result.comparisons);\n      console.log(`Gemini validation successful, filtered to ${validatedComparisons.length} comparisons`);\n    } catch (geminiErr) {\n      console.error(\"Gemini validation failed, using unfiltered comparisons:\", geminiErr);\n      // Keep original comparisons if Gemini fails\n      validatedComparisons = result.comparisons;\n    }\n\n    // Generate a unique request ID\n    const requestId = Date.now().toString();\n\n    res.json({\n      product: result.product,\n      comparisons: validatedComparisons,\n      requestId,\n    });\n  } catch (error) {\n    console.error(\"Scraping error:\", error);\n    \n    // Even if everything fails, provide a basic response\n    try {\n      const url = req.body.url;\n      const userCountry = req.body.userLocation?.country || \"United States\";\n      \n      console.log(\"Providing fallback response due to error\");\n      \n  const fallbackProduct: ProductData = {\n    title: \"Product\",\n    price: 0,\n    currency: \"€\",\n    url,\n    image: \"/placeholder.svg\",\n    store: new URL(url).hostname.replace(/^www\\./, \"\"),\n  };\n      \n      // Don't generate fake URLs in error fallback\n      res.json({\n        product: fallbackProduct,\n        comparisons: [], // Empty array instead of fake URLs\n        requestId: Date.now().toString(),\n      });\n    } catch (fallbackError) {\n      console.error(\"Fallback also failed:\", fallbackError);\n      res.json({ \n        product: {\n          title: \"Product\",\n          price: 0,\n          currency: \"€\",\n          url: req.body.url || \"\",\n          image: \"/placeholder.svg\",\n          store: \"unknown\"\n        },\n        comparisons: [],\n        requestId: Date.now().toString(),\n        error: \"Failed to scrape product data\"\n      });\n    }\n  }\n});\n\n// New n8n webhook scraping function\nasync function scrapeWithN8nWebhook(url: string, gl?: string): Promise<any> {\n  try {\n    console.log(\"Calling n8n webhook for URL:\", url, \"GL:\", gl);\n    \n    const n8nWebhookUrl = process.env.N8N_WEBHOOK_URL || 'https://n8n.srv824584.hstgr.cloud/webhook/new-test';\n    \n    console.log(\"Using n8n webhook URL:\", n8nWebhookUrl);\n    \n    const params: any = { url };\n    if (gl) {\n      params.gl = gl;\n    }\n    \n    console.log(\"Full URL being called:\", `${n8nWebhookUrl}?${new URLSearchParams(params).toString()}`);\n    \n    const response = await axios.get(n8nWebhookUrl, {\n      params: params,\n      timeout: 60000, // 60 second timeout (increased from 30)\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n\n    console.log(\"n8n webhook response status:\", response.status);\n    console.log(\"n8n webhook response data:\", JSON.stringify(response.data, null, 2));\n\n    if (response.status !== 200) {\n      throw new Error(`n8n webhook returned status ${response.status}`);\n    }\n\n    const data = response.data;\n    \n    // Handle the n8n response format\n    if (data && data.mainProduct && Array.isArray(data.suggestions)) {\n      // Convert suggestions to PriceComparison format\n      const comparisons: PriceComparison[] = data.suggestions.map((suggestion: any) => ({\n        title: suggestion.title,\n        store: suggestion.site || 'unknown',\n        price: extractPrice(suggestion.standardPrice || suggestion.discountPrice || '0'),\n        currency: extractCurrency(suggestion.standardPrice || suggestion.discountPrice || ''),\n        url: suggestion.link,\n        image: suggestion.image,\n        condition: \"New\",\n        assessment: {\n          cost: 3,\n          value: 3,\n          quality: 3,\n          description: `Found on ${suggestion.site || 'unknown'}`\n        }\n      }));\n\n      return {\n        mainProduct: {\n          title: data.mainProduct.title,\n          price: data.mainProduct.price,\n          image: data.mainProduct.image,\n          url: data.mainProduct.url\n        },\n        suggestions: data.suggestions,\n        comparisons: comparisons\n      };\n    }\n\n    // Handle new n8n response format (array with single object containing mainProduct and suggestions)\n    if (Array.isArray(data) && data.length > 0 && data[0].mainProduct && Array.isArray(data[0].suggestions)) {\n      console.log(\"Handling new n8n response format (array with mainProduct and suggestions)\");\n      \n      const firstItem = data[0];\n      const mainProduct = firstItem.mainProduct;\n      \n      // Convert suggestions to PriceComparison format\n      const comparisons: PriceComparison[] = firstItem.suggestions.map((suggestion: any) => ({\n        title: suggestion.title,\n        store: suggestion.site || 'unknown',\n        price: extractPrice(suggestion.standardPrice || suggestion.discountPrice || '0'),\n        currency: extractCurrency(suggestion.standardPrice || suggestion.discountPrice || ''),\n        url: suggestion.link,\n        image: suggestion.image,\n        condition: \"New\",\n        // New fields\n        merchant: suggestion.merchant,\n        stock: suggestion.stock,\n        reviewsCount: suggestion.reviewsCount,\n        deliveryPrice: suggestion.deliveryPrice,\n        details: suggestion.details,\n        returnPolicy: suggestion.returnPolicy,\n        rating: suggestion.rating ? parseFloat(suggestion.rating) : undefined,\n        assessment: {\n          cost: 3,\n          value: 3,\n          quality: 3,\n          description: `Found on ${suggestion.site || 'unknown'}`\n        }\n      }));\n\n      return {\n        mainProduct: {\n          title: mainProduct.title,\n          price: mainProduct.price,\n          image: mainProduct.image,\n          url: mainProduct.url\n        },\n        suggestions: firstItem.suggestions,\n        comparisons: comparisons\n      };\n    }\n\n    // Handle new n8n response format (single object with all fields)\n    if (data && data.title && (data.standardPrice || data.discountPrice)) {\n      console.log(\"Handling new n8n response format (single object)\");\n      \n      // Convert single object to the expected format\n      const mainProduct = {\n        title: data.title,\n        price: data.standardPrice || data.discountPrice || \"Price not available\",\n        image: data.image,\n        url: data.link\n      };\n\n      const suggestion = {\n        title: data.title,\n        standardPrice: data.standardPrice,\n        discountPrice: data.discountPrice,\n        site: data.site,\n        link: data.link,\n        image: data.image,\n        // New fields\n        merchant: data.merchant,\n        stock: data.stock,\n        reviewsCount: data.reviewsCount,\n        deliveryPrice: data.deliveryPrice,\n        details: data.details,\n        returnPolicy: data.returnPolicy,\n        rating: data.rating\n      };\n\n      const comparison: PriceComparison = {\n        title: data.title,\n        store: data.site || 'unknown',\n        price: extractPrice(data.standardPrice || data.discountPrice || '0'),\n        currency: extractCurrency(data.standardPrice || data.discountPrice || ''),\n        url: data.link,\n        image: data.image,\n        condition: \"New\",\n        // New fields\n        merchant: data.merchant,\n        stock: data.stock,\n        reviewsCount: data.reviewsCount,\n        deliveryPrice: data.deliveryPrice,\n        details: data.details,\n        returnPolicy: data.returnPolicy,\n        rating: data.rating ? parseFloat(data.rating) : undefined,\n        assessment: {\n          cost: 3,\n          value: 3,\n          quality: 3,\n          description: `Found on ${data.site || 'unknown'}`\n        }\n      };\n\n      return {\n        mainProduct: mainProduct,\n        suggestions: [suggestion],\n        comparisons: [comparison]\n      };\n    }\n\n    // If response is empty or invalid, throw an error instead of providing fallback data\n    if (!data || Object.keys(data).length === 0) {\n      console.log(\"n8n webhook returned empty data\");\n      throw new Error(\"No product data received from webhook\");\n    }\n\n    throw new Error(\"Invalid n8n webhook response format\");\n  } catch (error) {\n    console.error(\"n8n webhook error:\", error);\n    \n    // If it's an axios error, log more details\n    if (axios.isAxiosError(error)) {\n      console.error(\"Axios error details:\", {\n        status: error.response?.status,\n        statusText: error.response?.statusText,\n        data: error.response?.data,\n        url: error.config?.url,\n        method: error.config?.method,\n        params: error.config?.params,\n        fullUrl: error.config?.url + '?' + new URLSearchParams(error.config?.params || {}).toString()\n      });\n    }\n    \n    throw error;\n  }\n}\n\n// Helper function to extract currency from price string\nfunction extractCurrency(priceString: string): string {\n  if (priceString.includes('€')) return '€';\n  if (priceString.includes('$')) return '$';\n  if (priceString.includes('£')) return '£';\n  return '€'; // Default to Euro\n}\n\n// New route for n8n webhook scraping\nrouter.post(\"/n8n-scrape\", async (req, res) => {\n  console.log(\"=== n8n-scrape route called ===\");\n  console.log(\"Request body:\", req.body);\n  \n  try {\n    const { url, requestId, gl, userCountry, findSimilar } = req.body;\n\n    if (!url) {\n      return res.status(400).json({ error: \"URL is required\" });\n    }\n\n    console.log(`n8n webhook scraping request for URL: ${url}, GL: ${gl}`);\n    console.log(`Request ID: ${requestId}`);\n    console.log(`Find Similar: ${findSimilar}`);\n\n    // Call the n8n webhook with gl parameter\n    const result = await scrapeWithN8nWebhook(url, gl);\n\n    console.log(\"n8n webhook scraping successful\");\n    console.log(\"Main product:\", result.mainProduct);\n    console.log(\"Suggestions count:\", result.suggestions?.length || 0);\n\n    // If findSimilar is true, modify the search to focus on similar products\n    if (findSimilar && result.mainProduct) {\n      console.log(\"Processing similar products search...\");\n      \n      // Extract product information for similar search\n      const productTitle = result.mainProduct.title;\n      const productBrand = extractBrandFromTitle(productTitle);\n      const productType = extractProductType(productTitle);\n      \n      // Create a search query for similar products\n      const similarSearchQuery = `${productBrand} ${productType}`;\n      console.log(`Similar products search query: ${similarSearchQuery}`);\n      \n      // For now, we'll use the same suggestions but mark them as similar products\n      // In a full implementation, you might want to make additional API calls\n      // to find truly similar products from different brands or categories\n      \n      if (result.suggestions && result.suggestions.length > 0) {\n        // Filter and enhance suggestions for similar products\n        result.suggestions = result.suggestions.map(suggestion => ({\n          ...suggestion,\n          isSimilar: true,\n          similarityReason: `Similar ${productType} from ${suggestion.merchant || suggestion.site || 'other retailers'}`\n        }));\n        \n        console.log(`Enhanced ${result.suggestions.length} suggestions for similar products`);\n      }\n    }\n\n    // Save to search history if user is authenticated\n    try {\n      // Check if user is authenticated by looking for user info in request\n      const userId = (req as any).user?.id;\n      if (userId && result.mainProduct?.title) {\n        await searchHistoryService.addSearch(userId, {\n          url: url,\n          title: result.mainProduct.title,\n          requestId: requestId || `search_${Date.now()}`,\n        });\n        console.log(`Search history saved for user ${userId} (type: ${findSimilar ? 'similar' : 'price_comparison'})`);\n      }\n    } catch (historyError) {\n      console.error(\"Failed to save search history:\", historyError);\n      // Don't fail the main request if history saving fails\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error(\"n8n webhook scraping error:\", error);\n    \n    // Return a proper error response instead of mock data\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n    console.log(\"Returning error response:\", errorMessage);\n    \n    res.status(500).json({ \n      error: \"Failed to fetch product information\",\n      message: errorMessage,\n      mainProduct: null,\n      suggestions: []\n    });\n  }\n});\n\nexport default router; ","import { RequestHandler } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { userService, searchHistoryService } from \"../services/database\";\n\nconst JWT_SECRET =\n  process.env.JWT_SECRET || \"your-secret-key-change-in-production\";\n\n// Helper function to generate JWT token\nfunction generateToken(userId: number): string {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"7d\" });\n}\n\n// Helper function to verify JWT token\nexport function verifyToken(token: string): { userId: number } | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n    return decoded;\n  } catch {\n    return null;\n  }\n}\n\n// Register new user\nexport const register: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ error: \"Email and password are required\" });\n    }\n\n    if (password.length < 6) {\n      return res\n        .status(400)\n        .json({ error: \"Password must be at least 6 characters long\" });\n    }\n\n    // Check if user already exists\n    const existingUser = await userService.findUserByEmail(email);\n    if (existingUser) {\n      return res\n        .status(400)\n        .json({ error: \"User with this email already exists\" });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // Create new user\n    const user = await userService.createUser({\n      email,\n      password: hashedPassword,\n      isAdmin: false, // First user can be made admin manually\n    });\n\n    // Generate token\n    const token = generateToken(user.id);\n\n    res.cookie(\"auth_token\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    });\n\n    res.status(201).json({\n      success: true,\n      token: token,\n      accessToken: token,\n      user: {\n        id: user.id,\n        email: user.email,\n        isAdmin: user.isAdmin,\n      },\n    });\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    res.status(500).json({ error: \"Failed to register user\" });\n  }\n};\n\n// Login user\nexport const login: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ error: \"Email and password are required\" });\n    }\n\n    // Find user by email\n    const user = await userService.findUserByEmail(email);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid email or password\" });\n    }\n\n    // Check password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      return res.status(401).json({ error: \"Invalid email or password\" });\n    }\n\n    // Generate token\n    const token = generateToken(user.id);\n\n    res.cookie(\"auth_token\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    });\n\n    res.json({\n      success: true,\n      token: token,\n      accessToken: token,\n      user: {\n        id: user.id,\n        email: user.email,\n        isAdmin: user.isAdmin,\n      },\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.status(500).json({ error: \"Failed to login\" });\n  }\n};\n\n// Logout user\nexport const logout: RequestHandler = (req, res) => {\n  res.clearCookie(\"auth_token\");\n  res.json({ success: true });\n};\n\n// Get current user info\nexport const getCurrentUser: RequestHandler = async (req, res) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ error: \"Invalid token\" });\n    }\n\n    // Handle both string and number user IDs\n    const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n    \n    if (isNaN(userId)) {\n      return res.status(401).json({ error: \"Invalid user ID in token\" });\n    }\n\n    const user = await userService.findUserById(userId);\n    if (!user) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n\n    res.json({\n      user: {\n        id: user.id,\n        email: user.email,\n        isAdmin: user.isAdmin,\n      },\n    });\n  } catch (error) {\n    console.error(\"Get current user error:\", error);\n    res.status(500).json({ error: \"Failed to get user info\" });\n  }\n};\n\n// Add search to user history\nexport const addToSearchHistory: RequestHandler = async (req, res) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ error: \"Invalid token\" });\n    }\n\n    // Handle both string and number user IDs\n    const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n    \n    if (isNaN(userId)) {\n      return res.status(401).json({ error: \"Invalid user ID in token\" });\n    }\n\n    const user = await userService.findUserById(userId);\n    if (!user) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n\n    const { url, title, requestId } = req.body;\n\n    if (!url || !title || !requestId) {\n      return res.status(400).json({ error: \"Missing required fields\" });\n    }\n\n    // Add to search history\n    await searchHistoryService.addSearch(user.id, {\n      url,\n      title,\n      requestId,\n    });\n\n    res.status(201).json({ success: true });\n  } catch (error) {\n    console.error(\"Error adding to search history:\", error);\n    res.status(500).json({ error: \"Failed to add to search history\" });\n  }\n};\n\n// Get user search history\nexport const getUserSearchHistory: RequestHandler = async (req, res) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ error: \"Invalid token\" });\n    }\n\n    // Handle both string and number user IDs\n    const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n    \n    if (isNaN(userId)) {\n      return res.status(401).json({ error: \"Invalid user ID in token\" });\n    }\n\n    const user = await userService.findUserById(userId);\n    if (!user) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n\n    const history = await searchHistoryService.getUserSearchHistory(\n      user.id,\n      20,\n    );\n\n    res.json({\n      history: history.map((h) => ({\n        url: h.url,\n        title: h.title,\n        requestId: h.requestId,\n        timestamp: h.timestamp,\n      })),\n    });\n  } catch (error) {\n    console.error(\"Error getting search history:\", error);\n    res.status(500).json({ error: \"Failed to get search history\" });\n  }\n};\n\n// Get all users (admin only)\nexport const getAllUsers: RequestHandler = async (req, res) => {\n  try {\n    // This function is now called with admin authentication middleware\n    // The admin authentication is handled by requireAdminAuth middleware\n    const users = await userService.getAllUsers();\n\n    res.json({\n      users: users.map((u) => ({\n        id: u.id,\n        email: u.email,\n        isAdmin: u.isAdmin,\n        createdAt: u.createdAt,\n        searchCount: u._count.searchHistory,\n      })),\n    });\n  } catch (error) {\n    console.error(\"Error getting all users:\", error);\n    res.json({ \n      users: [],\n      error: \"Failed to get users\"\n    });\n  }\n};\n\n// Export database services for other modules to access\nexport { userService, searchHistoryService };\n","import { RequestHandler } from \"express\";\nimport { verifyToken, userService } from \"../routes/auth\";\n\n// Extend Express Request type to include user info\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: number;\n        email: string;\n        isAdmin: boolean;\n      };\n    }\n  }\n}\n\n// Middleware to check if user is authenticated\nexport const requireAuth: RequestHandler = async (req, res, next) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (!token) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ error: \"Invalid authentication token\" });\n    }\n\n    try {\n      // Handle both string and number user IDs\n      const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n      \n      if (isNaN(userId)) {\n        return res.status(401).json({ error: \"Invalid user ID in token\" });\n      }\n\n      const user = await userService.findUserById(userId);\n      if (!user) {\n        return res.status(401).json({ error: \"User not found\" });\n      }\n\n      // Attach user info to request\n      req.user = {\n        id: user.id,\n        email: user.email,\n        isAdmin: user.isAdmin,\n      };\n\n      next();\n    } catch (dbError) {\n      console.error(\"Database error in requireAuth:\", dbError);\n      return res.status(500).json({ error: \"Database error during authentication\" });\n    }\n  } catch (error) {\n    console.error(\"Auth middleware error:\", error);\n    return res.status(500).json({ error: \"Authentication error\" });\n  }\n};\n\n// Middleware to check if user is admin\nexport const requireAdmin: RequestHandler = (req, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n\n  if (!req.user.isAdmin) {\n    return res.status(403).json({ error: \"Admin privileges required\" });\n  }\n\n  next();\n};\n\n// Optional auth middleware - sets user if authenticated but doesn't require it\nexport const optionalAuth: RequestHandler = async (req, res, next) => {\n  try {\n    // Check for token in cookies or Authorization header\n    let token = req.cookies.auth_token;\n    \n    if (!token) {\n      const authHeader = req.headers.authorization;\n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        token = authHeader.substring(7);\n      }\n    }\n\n    if (token) {\n      const decoded = verifyToken(token);\n      if (decoded) {\n        try {\n          // Handle both string and number user IDs\n          const userId = typeof decoded.userId === 'string' ? parseInt(decoded.userId, 10) : decoded.userId;\n          \n          if (!isNaN(userId)) {\n            const user = await userService.findUserById(userId);\n            if (user) {\n              req.user = {\n                id: user.id,\n                email: user.email,\n                isAdmin: user.isAdmin,\n              };\n            }\n          }\n        } catch (dbError) {\n          // Log the error but don't break the request\n          console.warn(\"Database error in optionalAuth:\", dbError);\n          // Continue without setting user\n        }\n      }\n    }\n\n    next();\n  } catch (error) {\n    // Continue without authentication if there's an error\n    console.warn(\"Optional auth error:\", error);\n    next();\n  }\n};\n","import express from 'express';\nimport { prisma } from '../services/database';\nimport { requireAuth } from '../middleware/auth';\n\nconst router = express.Router();\n\n// Get user's favorites\nrouter.get('/', requireAuth, async (req: any, res) => {\n  try {\n    const userId = req.user.id;\n    \n    const favorites = await prisma.favorite.findMany({\n      where: { userId },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    res.json(favorites);\n  } catch (error) {\n    console.error('Error fetching favorites:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch favorites',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Add a favorite\nrouter.post('/', requireAuth, async (req: any, res) => {\n  try {\n    const userId = req.user.id;\n    const {\n      title,\n      price,\n      currency,\n      url,\n      image,\n      store,\n      merchant,\n      stock,\n      rating,\n      reviewsCount,\n      deliveryPrice,\n      details,\n      returnPolicy,\n      condition = 'New'\n    } = req.body;\n\n    if (!title || !url) {\n      return res.status(400).json({ error: 'Title and URL are required' });\n    }\n\n    // Check if already favorited\n    const existingFavorite = await prisma.favorite.findFirst({\n      where: {\n        userId,\n        url\n      }\n    });\n\n    if (existingFavorite) {\n      return res.status(400).json({ error: 'Product already in favorites' });\n    }\n\n    const favorite = await prisma.favorite.create({\n      data: {\n        userId,\n        title,\n        price,\n        currency,\n        url,\n        image,\n        store,\n        merchant,\n        stock,\n        rating: rating ? parseFloat(rating) : null,\n        reviewsCount: reviewsCount ? parseInt(reviewsCount) : null,\n        deliveryPrice,\n        details,\n        returnPolicy,\n        condition\n      }\n    });\n\n    res.json(favorite);\n  } catch (error) {\n    console.error('Error adding favorite:', error);\n    res.status(500).json({ error: 'Failed to add favorite' });\n  }\n});\n\n// Remove a favorite\nrouter.delete('/:id', requireAuth, async (req: any, res) => {\n  try {\n    const userId = req.user.id;\n    const favoriteId = parseInt(req.params.id);\n\n    const favorite = await prisma.favorite.findFirst({\n      where: {\n        id: favoriteId,\n        userId\n      }\n    });\n\n    if (!favorite) {\n      return res.status(404).json({ error: 'Favorite not found' });\n    }\n\n    await prisma.favorite.delete({\n      where: { id: favoriteId }\n    });\n\n    res.json({ message: 'Favorite removed successfully' });\n  } catch (error) {\n    console.error('Error removing favorite:', error);\n    res.status(500).json({ error: 'Failed to remove favorite' });\n  }\n});\n\n// Check if a product is favorited\nrouter.get('/check', requireAuth, async (req: any, res) => {\n  try {\n    const userId = req.user.id;\n    const { url } = req.query;\n\n    if (!url) {\n      return res.status(400).json({ error: 'URL is required' });\n    }\n\n    const favorite = await prisma.favorite.findFirst({\n      where: {\n        userId,\n        url: url as string\n      }\n    });\n\n    res.json({ isFavorited: !!favorite, favoriteId: favorite?.id });\n  } catch (error) {\n    console.error('Error checking favorite status:', error);\n    res.status(500).json({ error: 'Failed to check favorite status' });\n  }\n});\n\nexport default router; ","import { RequestHandler } from \"express\";\nimport { legacySearchHistoryService } from \"../services/database\";\n\ninterface SearchHistoryRequest {\n  url: string;\n  userKey: string; // IP address or session ID\n}\n\nexport const saveSearchHistory: RequestHandler = async (req, res) => {\n  try {\n    const { url, userKey }: SearchHistoryRequest = req.body;\n\n    if (!url || !userKey) {\n      return res.status(400).json({ error: \"Missing url or userKey\" });\n    }\n\n    // Add to legacy search history\n    await legacySearchHistoryService.addSearch(userKey, url);\n\n    res.json({ success: true });\n  } catch (error) {\n    console.error(\"Error saving search history:\", error);\n    res.status(500).json({ error: \"Failed to save search history\" });\n  }\n};\n\nexport const getSearchHistory: RequestHandler = async (req, res) => {\n  try {\n    const userKey = req.query.userKey as string;\n\n    if (!userKey) {\n      return res.status(400).json({ error: \"Missing userKey\" });\n    }\n\n    const historyRecords =\n      await legacySearchHistoryService.getUserSearchHistory(userKey, 10);\n    const history = historyRecords.map((record) => record.url);\n\n    res.json({ history });\n  } catch (error) {\n    console.error(\"Error getting search history:\", error);\n    res.status(500).json({ error: \"Failed to get search history\" });\n  }\n};\n","import { Request, Response } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { adminService } from \"../services/database\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Admin login\nexport const adminLogin = async (req: Request, res: Response) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({\n        success: false,\n        message: \"Email and password are required\",\n      });\n    }\n\n    // Find admin by email\n    const admin = await adminService.findAdminByEmail(email);\n\n    if (!admin) {\n      return res.status(401).json({\n        success: false,\n        message: \"Invalid credentials\",\n      });\n    }\n\n    // Check if admin is active\n    if (!admin.isActive) {\n      return res.status(401).json({\n        success: false,\n        message: \"Account is deactivated\",\n      });\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, admin.password);\n\n    if (!isValidPassword) {\n      return res.status(401).json({\n        success: false,\n        message: \"Invalid credentials\",\n      });\n    }\n\n    // Create JWT token\n    const token = jwt.sign(\n      {\n        adminId: admin.id,\n        email: admin.email,\n        role: admin.role,\n        type: \"admin\",\n      },\n      JWT_SECRET,\n      { expiresIn: \"24h\" }\n    );\n\n    // Set HTTP-only cookie\n    res.cookie(\"adminToken\", token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"lax\",\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    });\n\n    res.json({\n      success: true,\n      message: \"Admin login successful\",\n      admin: {\n        id: admin.id,\n        email: admin.email,\n        name: admin.name,\n        role: admin.role,\n      },\n    });\n  } catch (error) {\n    console.error(\"Admin login error:\", error);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Admin logout\nexport const adminLogout = async (req: Request, res: Response) => {\n  try {\n    res.clearCookie(\"adminToken\");\n    res.json({\n      success: true,\n      message: \"Admin logout successful\",\n    });\n  } catch (error) {\n    console.error(\"Admin logout error:\", error);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Get current admin\nexport const getCurrentAdmin = async (req: Request, res: Response) => {\n  try {\n    const adminId = (req as any).adminId;\n\n    if (!adminId) {\n      return res.status(401).json({\n        success: false,\n        message: \"Not authenticated\",\n      });\n    }\n\n    const admin = await adminService.findAdminById(adminId);\n\n    if (!admin) {\n      return res.status(401).json({\n        success: false,\n        message: \"Admin not found\",\n      });\n    }\n\n    if (!admin.isActive) {\n      return res.status(401).json({\n        success: false,\n        message: \"Account is deactivated\",\n      });\n    }\n\n    res.json({\n      success: true,\n      admin: {\n        id: admin.id,\n        email: admin.email,\n        name: admin.name,\n        role: admin.role,\n      },\n    });\n  } catch (error) {\n    console.error(\"Get current admin error:\", error);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Create admin (for initial setup)\nexport const createAdmin = async (req: Request, res: Response) => {\n  try {\n    const { email, password, name } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({\n        success: false,\n        message: \"Email and password are required\",\n      });\n    }\n\n    // Check if admin already exists\n    const existingAdmin = await adminService.findAdminByEmail(email);\n\n    if (existingAdmin) {\n      return res.status(400).json({\n        success: false,\n        message: \"Admin with this email already exists\",\n      });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // Create admin\n    const admin = await adminService.createAdmin({\n      email,\n      password: hashedPassword,\n      name,\n    });\n\n    res.status(201).json({\n      success: true,\n      message: \"Admin created successfully\",\n      admin: {\n        id: admin.id,\n        email: admin.email,\n        name: admin.name,\n        role: admin.role,\n      },\n    });\n  } catch (error) {\n    console.error(\"Create admin error:\", error);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n}; ","import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { adminService } from \"../services/database\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Admin authentication middleware\nexport const requireAdminAuth = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.cookies.adminToken;\n\n    if (!token) {\n      return res.status(401).json({\n        success: false,\n        message: \"Admin authentication required\",\n      });\n    }\n\n    // Verify JWT token\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n\n    if (decoded.type !== \"admin\") {\n      return res.status(401).json({\n        success: false,\n        message: \"Invalid token type\",\n      });\n    }\n\n    // Check if admin exists and is active\n    const admin = await adminService.findAdminById(decoded.adminId);\n\n    if (!admin) {\n      return res.status(401).json({\n        success: false,\n        message: \"Admin not found\",\n      });\n    }\n\n    if (!admin.isActive) {\n      return res.status(401).json({\n        success: false,\n        message: \"Admin account is deactivated\",\n      });\n    }\n\n    // Add admin info to request\n    (req as any).adminId = admin.id;\n    (req as any).adminEmail = admin.email;\n    (req as any).adminRole = admin.role;\n\n    next();\n  } catch (error) {\n    console.error(\"Admin auth middleware error:\", error);\n    res.status(401).json({\n      success: false,\n      message: \"Invalid token\",\n    });\n  }\n};\n\n// Optional admin authentication middleware\nexport const optionalAdminAuth = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.cookies.adminToken;\n\n    if (!token) {\n      return next();\n    }\n\n    // Verify JWT token\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n\n    if (decoded.type !== \"admin\") {\n      return next();\n    }\n\n    // Check if admin exists and is active\n    const admin = await adminService.findAdminById(decoded.adminId);\n\n    if (!admin || !admin.isActive) {\n      return next();\n    }\n\n    // Add admin info to request\n    (req as any).adminId = admin.id;\n    (req as any).adminEmail = admin.email;\n    (req as any).adminRole = admin.role;\n\n    next();\n  } catch (error) {\n    // If token is invalid, just continue without admin info\n    next();\n  }\n}; ","import { RequestHandler } from \"express\";\nimport { healthCheck } from \"../services/database\";\n\n// Basic health check\nexport const healthCheckHandler: RequestHandler = async (req, res) => {\n  try {\n    const dbHealth = await healthCheck.checkConnection();\n    const stats = await healthCheck.getStats();\n\n    res.json({\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      database: dbHealth,\n      stats: stats,\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: \"unhealthy\",\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n};\n","import { RequestHandler } from \"express\";\n\nexport interface LocationInfo {\n  country: string;\n  countryCode: string;\n  region: string;\n  city?: string;\n  currency: string;\n  timeZone: string;\n}\n\nexport interface LocalDealer {\n  name: string;\n  url: string;\n  country: string;\n  region: string;\n  searchUrlPattern: string;\n  currency: string;\n  priority: number; // Lower = higher priority\n}\n\n// SearchAPI supported countries with their gl codes (Google Shopping API)\nexport const SEARCH_API_SUPPORTED_COUNTRIES: { [key: string]: LocationInfo } = {\n  // Middle East\n  AE: {\n    country: \"United Arab Emirates\",\n    countryCode: \"ae\",\n    region: \"Middle East\",\n    currency: \"AED\",\n    timeZone: \"Asia/Dubai\",\n  },\n  // Americas\n  AI: {\n    country: \"Anguilla\",\n    countryCode: \"ai\",\n    region: \"Caribbean\",\n    currency: \"XCD\",\n    timeZone: \"America/Anguilla\",\n  },\n  AR: {\n    country: \"Argentina\",\n    countryCode: \"ar\",\n    region: \"South America\",\n    currency: \"ARS\",\n    timeZone: \"America/Argentina/Buenos_Aires\",\n  },\n  AU: {\n    country: \"Australia\",\n    countryCode: \"au\",\n    region: \"Asia Pacific\",\n    currency: \"AUD\",\n    timeZone: \"Australia/Sydney\",\n  },\n  BM: {\n    country: \"Bermuda\",\n    countryCode: \"bm\",\n    region: \"North America\",\n    currency: \"BMD\",\n    timeZone: \"Atlantic/Bermuda\",\n  },\n  BR: {\n    country: \"Brazil\",\n    countryCode: \"br\",\n    region: \"South America\",\n    currency: \"BRL\",\n    timeZone: \"America/Sao_Paulo\",\n  },\n  CA: {\n    country: \"Canada\",\n    countryCode: \"ca\",\n    region: \"North America\",\n    currency: \"CAD\",\n    timeZone: \"America/Toronto\",\n  },\n  CL: {\n    country: \"Chile\",\n    countryCode: \"cl\",\n    region: \"South America\",\n    currency: \"CLP\",\n    timeZone: \"America/Santiago\",\n  },\n  CO: {\n    country: \"Colombia\",\n    countryCode: \"co\",\n    region: \"South America\",\n    currency: \"COP\",\n    timeZone: \"America/Bogota\",\n  },\n  MX: {\n    country: \"Mexico\",\n    countryCode: \"mx\",\n    region: \"North America\",\n    currency: \"MXN\",\n    timeZone: \"America/Mexico_City\",\n  },\n  PE: {\n    country: \"Peru\",\n    countryCode: \"pe\",\n    region: \"South America\",\n    currency: \"PEN\",\n    timeZone: \"America/Lima\",\n  },\n  US: {\n    country: \"United States\",\n    countryCode: \"us\",\n    region: \"North America\",\n    currency: \"$\",\n    timeZone: \"America/New_York\",\n  },\n  VE: {\n    country: \"Venezuela\",\n    countryCode: \"ve\",\n    region: \"South America\",\n    currency: \"VES\",\n    timeZone: \"America/Caracas\",\n  },\n  // Europe\n  AT: {\n    country: \"Austria\",\n    countryCode: \"at\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Vienna\",\n  },\n  BE: {\n    country: \"Belgium\",\n    countryCode: \"be\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Brussels\",\n  },\n  BG: {\n    country: \"Bulgaria\",\n    countryCode: \"bg\",\n    region: \"Eastern Europe\",\n    currency: \"BGN\",\n    timeZone: \"Europe/Sofia\",\n  },\n  CH: {\n    country: \"Switzerland\",\n    countryCode: \"ch\",\n    region: \"Western Europe\",\n    currency: \"CHF\",\n    timeZone: \"Europe/Zurich\",\n  },\n  CZ: {\n    country: \"Czech Republic\",\n    countryCode: \"cz\",\n    region: \"Eastern Europe\",\n    currency: \"CZK\",\n    timeZone: \"Europe/Prague\",\n  },\n  DE: {\n    country: \"Germany\",\n    countryCode: \"de\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Berlin\",\n  },\n  DK: {\n    country: \"Denmark\",\n    countryCode: \"dk\",\n    region: \"Nordic\",\n    currency: \"DKK\",\n    timeZone: \"Europe/Copenhagen\",\n  },\n  EE: {\n    country: \"Estonia\",\n    countryCode: \"ee\",\n    region: \"Baltic\",\n    currency: \"€\",\n    timeZone: \"Europe/Tallinn\",\n  },\n  ES: {\n    country: \"Spain\",\n    countryCode: \"es\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Madrid\",\n  },\n  FI: {\n    country: \"Finland\",\n    countryCode: \"fi\",\n    region: \"Nordic\",\n    currency: \"€\",\n    timeZone: \"Europe/Helsinki\",\n  },\n  FR: {\n    country: \"France\",\n    countryCode: \"fr\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Paris\",\n  },\n  GB: {\n    country: \"United Kingdom\",\n    countryCode: \"gb\",\n    region: \"Western Europe\",\n    currency: \"£\",\n    timeZone: \"Europe/London\",\n  },\n  GR: {\n    country: \"Greece\",\n    countryCode: \"gr\",\n    region: \"Southern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Athens\",\n  },\n  HR: {\n    country: \"Croatia\",\n    countryCode: \"hr\",\n    region: \"Eastern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Zagreb\",\n  },\n  HU: {\n    country: \"Hungary\",\n    countryCode: \"hu\",\n    region: \"Eastern Europe\",\n    currency: \"HUF\",\n    timeZone: \"Europe/Budapest\",\n  },\n  IE: {\n    country: \"Ireland\",\n    countryCode: \"ie\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Dublin\",\n  },\n  IT: {\n    country: \"Italy\",\n    countryCode: \"it\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Rome\",\n  },\n  LT: {\n    country: \"Lithuania\",\n    countryCode: \"lt\",\n    region: \"Baltic\",\n    currency: \"€\",\n    timeZone: \"Europe/Vilnius\",\n  },\n  LV: {\n    country: \"Latvia\",\n    countryCode: \"lv\",\n    region: \"Baltic\",\n    currency: \"€\",\n    timeZone: \"Europe/Riga\",\n  },\n  LU: {\n    country: \"Luxembourg\",\n    countryCode: \"lu\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Luxembourg\",\n  },\n  MT: {\n    country: \"Malta\",\n    countryCode: \"mt\",\n    region: \"Southern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Malta\",\n  },\n  NL: {\n    country: \"Netherlands\",\n    countryCode: \"nl\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Amsterdam\",\n  },\n  NO: {\n    country: \"Norway\",\n    countryCode: \"no\",\n    region: \"Nordic\",\n    currency: \"NOK\",\n    timeZone: \"Europe/Oslo\",\n  },\n  PL: {\n    country: \"Poland\",\n    countryCode: \"pl\",\n    region: \"Eastern Europe\",\n    currency: \"PLN\",\n    timeZone: \"Europe/Warsaw\",\n  },\n  PT: {\n    country: \"Portugal\",\n    countryCode: \"pt\",\n    region: \"Western Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Lisbon\",\n  },\n  RO: {\n    country: \"Romania\",\n    countryCode: \"ro\",\n    region: \"Eastern Europe\",\n    currency: \"RON\",\n    timeZone: \"Europe/Bucharest\",\n  },\n  SE: {\n    country: \"Sweden\",\n    countryCode: \"se\",\n    region: \"Nordic\",\n    currency: \"SEK\",\n    timeZone: \"Europe/Stockholm\",\n  },\n  SI: {\n    country: \"Slovenia\",\n    countryCode: \"si\",\n    region: \"Eastern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Ljubljana\",\n  },\n  SK: {\n    country: \"Slovakia\",\n    countryCode: \"sk\",\n    region: \"Eastern Europe\",\n    currency: \"€\",\n    timeZone: \"Europe/Bratislava\",\n  },\n  // Asia Pacific\n  HK: {\n    country: \"Hong Kong\",\n    countryCode: \"hk\",\n    region: \"Asia Pacific\",\n    currency: \"HKD\",\n    timeZone: \"Asia/Hong_Kong\",\n  },\n  ID: {\n    country: \"Indonesia\",\n    countryCode: \"id\",\n    region: \"Asia Pacific\",\n    currency: \"IDR\",\n    timeZone: \"Asia/Jakarta\",\n  },\n  IN: {\n    country: \"India\",\n    countryCode: \"in\",\n    region: \"Asia Pacific\",\n    currency: \"₹\",\n    timeZone: \"Asia/Kolkata\",\n  },\n  JP: {\n    country: \"Japan\",\n    countryCode: \"jp\",\n    region: \"Asia Pacific\",\n    currency: \"¥\",\n    timeZone: \"Asia/Tokyo\",\n  },\n  KR: {\n    country: \"South Korea\",\n    countryCode: \"kr\",\n    region: \"Asia Pacific\",\n    currency: \"₩\",\n    timeZone: \"Asia/Seoul\",\n  },\n  MY: {\n    country: \"Malaysia\",\n    countryCode: \"my\",\n    region: \"Asia Pacific\",\n    currency: \"MYR\",\n    timeZone: \"Asia/Kuala_Lumpur\",\n  },\n  NZ: {\n    country: \"New Zealand\",\n    countryCode: \"nz\",\n    region: \"Asia Pacific\",\n    currency: \"NZD\",\n    timeZone: \"Pacific/Auckland\",\n  },\n  PH: {\n    country: \"Philippines\",\n    countryCode: \"ph\",\n    region: \"Asia Pacific\",\n    currency: \"PHP\",\n    timeZone: \"Asia/Manila\",\n  },\n  SG: {\n    country: \"Singapore\",\n    countryCode: \"sg\",\n    region: \"Asia Pacific\",\n    currency: \"SGD\",\n    timeZone: \"Asia/Singapore\",\n  },\n  TH: {\n    country: \"Thailand\",\n    countryCode: \"th\",\n    region: \"Asia Pacific\",\n    currency: \"THB\",\n    timeZone: \"Asia/Bangkok\",\n  },\n  TW: {\n    country: \"Taiwan\",\n    countryCode: \"tw\",\n    region: \"Asia Pacific\",\n    currency: \"TWD\",\n    timeZone: \"Asia/Taipei\",\n  },\n  VN: {\n    country: \"Vietnam\",\n    countryCode: \"vn\",\n    region: \"Asia Pacific\",\n    currency: \"VND\",\n    timeZone: \"Asia/Ho_Chi_Minh\",\n  },\n  // Africa\n  EG: {\n    country: \"Egypt\",\n    countryCode: \"eg\",\n    region: \"Africa\",\n    currency: \"EGP\",\n    timeZone: \"Africa/Cairo\",\n  },\n  GH: {\n    country: \"Ghana\",\n    countryCode: \"gh\",\n    region: \"Africa\",\n    currency: \"GHS\",\n    timeZone: \"Africa/Accra\",\n  },\n  KE: {\n    country: \"Kenya\",\n    countryCode: \"ke\",\n    region: \"Africa\",\n    currency: \"KES\",\n    timeZone: \"Africa/Nairobi\",\n  },\n  NG: {\n    country: \"Nigeria\",\n    countryCode: \"ng\",\n    region: \"Africa\",\n    currency: \"NGN\",\n    timeZone: \"Africa/Lagos\",\n  },\n  ZA: {\n    country: \"South Africa\",\n    countryCode: \"za\",\n    region: \"Africa\",\n    currency: \"ZAR\",\n    timeZone: \"Africa/Johannesburg\",\n  },\n  // Middle East\n  IL: {\n    country: \"Israel\",\n    countryCode: \"il\",\n    region: \"Middle East\",\n    currency: \"ILS\",\n    timeZone: \"Asia/Jerusalem\",\n  },\n  SA: {\n    country: \"Saudi Arabia\",\n    countryCode: \"sa\",\n    region: \"Middle East\",\n    currency: \"SAR\",\n    timeZone: \"Asia/Riyadh\",\n  },\n  TR: {\n    country: \"Turkey\",\n    countryCode: \"tr\",\n    region: \"Middle East\",\n    currency: \"TRY\",\n    timeZone: \"Europe/Istanbul\",\n  },\n};\n\n// Database of local dealers by region\nexport const localDealers: LocalDealer[] = [\n  // Lithuania\n  {\n    name: \"pigu.lt\",\n    url: \"https://pigu.lt\",\n    country: \"Lithuania\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://pigu.lt/search?q={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n  {\n    name: \"varle.lt\",\n    url: \"https://varle.lt\",\n    country: \"Lithuania\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://varle.lt/search?q={query}\",\n    currency: \"€\",\n    priority: 2,\n  },\n  {\n    name: \"kilobaitas.lt\",\n    url: \"https://kilobaitas.lt\",\n    country: \"Lithuania\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://kilobaitas.lt/search?q={query}\",\n    currency: \"€\",\n    priority: 3,\n  },\n\n  // Latvia\n  {\n    name: \"1a.lv\",\n    url: \"https://1a.lv\",\n    country: \"Latvia\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://1a.lv/search?q={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n  {\n    name: \"220.lv\",\n    url: \"https://220.lv\",\n    country: \"Latvia\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://220.lv/search?q={query}\",\n    currency: \"€\",\n    priority: 2,\n  },\n\n  // Estonia\n  {\n    name: \"kaup24.ee\",\n    url: \"https://kaup24.ee\",\n    country: \"Estonia\",\n    region: \"Baltic\",\n    searchUrlPattern: \"https://kaup24.ee/search?q={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n\n  // Germany\n  {\n    name: \"amazon.de\",\n    url: \"https://amazon.de\",\n    country: \"Germany\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://amazon.de/s?k={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n  {\n    name: \"mediamarkt.de\",\n    url: \"https://mediamarkt.de\",\n    country: \"Germany\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://mediamarkt.de/search?query={query}\",\n    currency: \"€\",\n    priority: 2,\n  },\n\n  // France\n  {\n    name: \"amazon.fr\",\n    url: \"https://amazon.fr\",\n    country: \"France\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://amazon.fr/s?k={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n  {\n    name: \"fnac.com\",\n    url: \"https://fnac.com\",\n    country: \"France\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://fnac.com/search?query={query}\",\n    currency: \"€\",\n    priority: 2,\n  },\n\n  // UK\n  {\n    name: \"amazon.co.uk\",\n    url: \"https://amazon.co.uk\",\n    country: \"United Kingdom\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://amazon.co.uk/s?k={query}\",\n    currency: \"£\",\n    priority: 1,\n  },\n  {\n    name: \"currys.co.uk\",\n    url: \"https://currys.co.uk\",\n    country: \"United Kingdom\",\n    region: \"Western Europe\",\n    searchUrlPattern: \"https://currys.co.uk/search?q={query}\",\n    currency: \"£\",\n    priority: 2,\n  },\n\n  // Poland\n  {\n    name: \"allegro.pl\",\n    url: \"https://allegro.pl\",\n    country: \"Poland\",\n    region: \"Eastern Europe\",\n    searchUrlPattern: \"https://allegro.pl/listing?string={query}\",\n    currency: \"PLN\",\n    priority: 1,\n  },\n  {\n    name: \"x-kom.pl\",\n    url: \"https://x-kom.pl\",\n    country: \"Poland\",\n    region: \"Eastern Europe\",\n    searchUrlPattern: \"https://x-kom.pl/search?q={query}\",\n    currency: \"PLN\",\n    priority: 2,\n  },\n\n  // Nordic countries\n  {\n    name: \"elgiganten.dk\",\n    url: \"https://elgiganten.dk\",\n    country: \"Denmark\",\n    region: \"Nordic\",\n    searchUrlPattern: \"https://elgiganten.dk/search?SearchTerm={query}\",\n    currency: \"DKK\",\n    priority: 1,\n  },\n  {\n    name: \"elkjop.no\",\n    url: \"https://elkjop.no\",\n    country: \"Norway\",\n    region: \"Nordic\",\n    searchUrlPattern: \"https://elkjop.no/search?SearchTerm={query}\",\n    currency: \"NOK\",\n    priority: 1,\n  },\n  {\n    name: \"power.fi\",\n    url: \"https://power.fi\",\n    country: \"Finland\",\n    region: \"Nordic\",\n    searchUrlPattern: \"https://power.fi/search?SearchTerm={query}\",\n    currency: \"€\",\n    priority: 1,\n  },\n];\n\n// Detect user location from IP (in production, use a proper IP geolocation service)\nexport function detectLocationFromIP(ip: string): LocationInfo {\n  // This is a simplified implementation\n  // In production, you would use services like:\n  // - MaxMind GeoIP2\n  // - ipapi.co\n  // - ip-api.com\n  // - CloudFlare's CF-IPCountry header\n\n  // For now, return default based on common patterns\n  if (\n    ip.includes(\"192.168\") ||\n    ip.includes(\"127.0\") ||\n    ip.includes(\"10.\") ||\n    ip.includes(\"172.\")\n  ) {\n    // Local development - default to Lithuania since that's where pigu.lt is popular\n    return {\n      country: \"Lithuania\",\n      countryCode: \"LT\",\n      region: \"Baltic\",\n      city: \"Vilnius\",\n      currency: \"€\",\n      timeZone: \"Europe/Vilnius\",\n    };\n  }\n\n  // Default to US for unknown IPs\n  return {\n    country: \"United States\",\n    countryCode: \"US\",\n    region: \"North America\",\n    currency: \"$\",\n    timeZone: \"America/New_York\",\n  };\n}\n\n// Detect location from browser headers\nexport function detectLocationFromHeaders(headers: any): LocationInfo | null {\n  // Check CloudFlare country header\n  if (headers[\"cf-ipcountry\"]) {\n    const countryCode = headers[\"cf-ipcountry\"].toUpperCase();\n    return getLocationByCountryCode(countryCode);\n  }\n\n  // Check Accept-Language header for hints\n  const acceptLanguage = headers[\"accept-language\"];\n  if (acceptLanguage) {\n    if (acceptLanguage.includes(\"lt\")) {\n      return {\n        country: \"Lithuania\",\n        countryCode: \"LT\",\n        region: \"Baltic\",\n        currency: \"€\",\n        timeZone: \"Europe/Vilnius\",\n      };\n    }\n    if (acceptLanguage.includes(\"lv\")) {\n      return {\n        country: \"Latvia\",\n        countryCode: \"LV\",\n        region: \"Baltic\",\n        currency: \"€\",\n        timeZone: \"Europe/Riga\",\n      };\n    }\n    if (acceptLanguage.includes(\"et\")) {\n      return {\n        country: \"Estonia\",\n        countryCode: \"EE\",\n        region: \"Baltic\",\n        currency: \"€\",\n        timeZone: \"Europe/Tallinn\",\n      };\n    }\n    if (acceptLanguage.includes(\"de\")) {\n      return {\n        country: \"Germany\",\n        countryCode: \"DE\",\n        region: \"Western Europe\",\n        currency: \"€\",\n        timeZone: \"Europe/Berlin\",\n      };\n    }\n  }\n\n  return null;\n}\n\n// Get location info by country code\nfunction getLocationByCountryCode(countryCode: string): LocationInfo {\n  // Only return supported countries\n  const supportedCountry = SEARCH_API_SUPPORTED_COUNTRIES[countryCode];\n  if (supportedCountry) {\n    return supportedCountry;\n  }\n  \n  // Fallback to US if country is not supported\n  return SEARCH_API_SUPPORTED_COUNTRIES[\"US\"];\n}\n\n// Get list of all supported countries\nexport function getSupportedCountries(): LocationInfo[] {\n  return Object.values(SEARCH_API_SUPPORTED_COUNTRIES).sort((a, b) => \n    a.country.localeCompare(b.country)\n  );\n}\n\n// Validate if a country is supported by SearchAPI\nexport function isCountrySupported(countryCode: string): boolean {\n  // Convert to lowercase for comparison since gl codes are lowercase\n  const normalizedCode = countryCode.toLowerCase();\n  return Object.values(SEARCH_API_SUPPORTED_COUNTRIES).some(\n    (country: any) => country.countryCode === normalizedCode\n  );\n}\n\n// Get local dealers for a specific location\nexport function getLocalDealers(location: LocationInfo): LocalDealer[] {\n  return localDealers\n    .filter(\n      (dealer) =>\n        dealer.country === location.country ||\n        dealer.region === location.region,\n    )\n    .sort((a, b) => a.priority - b.priority);\n}\n\n// Get location detection handler\nexport const getLocationHandler: RequestHandler = async (req, res) => {\n  try {\n    // If it's a POST request with location data, validate and use that\n    if (req.method === 'POST' && req.body && req.body.location) {\n      const userLocation = req.body.location as LocationInfo;\n      \n      // Validate that the country is supported\n      if (!isCountrySupported(userLocation.countryCode)) {\n        return res.status(400).json({ \n          error: \"Country not supported by SearchAPI\",\n          message: `Country code '${userLocation.countryCode}' is not supported. Please choose from the supported countries list.`\n        });\n      }\n      \n      const dealers = getLocalDealers(userLocation);\n      \n      res.json({\n        location: userLocation,\n        localDealers: dealers.slice(0, 5), // Return top 5 local dealers\n      });\n      return;\n    }\n\n    // For GET requests, detect location automatically\n    const clientIP = req.ip || req.socket.remoteAddress || \"127.0.0.1\";\n\n    // Try to detect from headers first\n    let location = detectLocationFromHeaders(req.headers);\n\n    // Fallback to IP detection\n    if (!location) {\n      location = detectLocationFromIP(clientIP);\n    }\n\n    // Ensure the detected location is supported\n    if (!isCountrySupported(location.countryCode)) {\n      // Fallback to US if detected country is not supported\n      location = SEARCH_API_SUPPORTED_COUNTRIES[\"US\"];\n    }\n\n    // Get local dealers\n    const dealers = getLocalDealers(location);\n\n    res.json({\n      location,\n      localDealers: dealers.slice(0, 5), // Return top 5 local dealers\n    });\n  } catch (error) {\n    console.error(\"Location detection error:\", error);\n    // Return a fallback response instead of 500 error\n    res.json({\n      location: SEARCH_API_SUPPORTED_COUNTRIES[\"US\"],\n      localDealers: [],\n      error: \"Failed to detect location\"\n    });\n  }\n};\n","import dotenv from \"dotenv\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport { handleDemo } from \"./routes/demo\";\nimport n8nScrapeRouter from \"./routes/n8n-scrape\";\nimport favoritesRouter from \"./routes/favorites\";\nimport { saveSearchHistory, getSearchHistory } from \"./routes/search-history\";\nimport {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  addToSearchHistory,\n  getUserSearchHistory,\n  getAllUsers,\n} from \"./routes/auth\";\nimport {\n  adminLogin,\n  adminLogout,\n  getCurrentAdmin,\n  createAdmin,\n} from \"./routes/admin-auth\";\nimport { requireAuth, requireAdmin, optionalAuth } from \"./middleware/auth\";\nimport { requireAdminAuth } from \"./middleware/admin-auth\";\nimport { healthCheckHandler } from \"./routes/health\";\nimport { getLocationHandler } from \"./services/location\";\nimport { gracefulShutdown } from \"./services/database\";\n\n// Load environment variables\ndotenv.config();\n\n// Environment variables\nconsole.log(\"Environment variables loaded:\");\nconsole.log(\"NODE_ENV:\", process.env.NODE_ENV);\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(\n    cors({\n      origin:\n        process.env.NODE_ENV === \"production\"\n          ? process.env.FRONTEND_URL || \"http://localhost:8080\"\n          : \"http://localhost:8080\",\n      credentials: true,\n    }),\n  );\n  app.use(express.json({ limit: \"10mb\" }));\n  app.use(express.urlencoded({ extended: true }));\n  app.use(cookieParser());\n\n  // Public API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"Hello from Express server v2!\" });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n  app.get(\"/api/location\", getLocationHandler);\n  app.post(\"/api/location\", getLocationHandler);\n  app.get(\"/api/supported-countries\", (req, res) => {\n    const { getSupportedCountries } = require(\"./services/location\");\n    const countries = getSupportedCountries();\n    res.json({ countries });\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", register);\n  app.post(\"/api/auth/login\", login);\n  app.post(\"/api/auth/logout\", logout);\n  app.get(\"/api/auth/me\", getCurrentUser);\n  \n  // Admin authentication routes\n  app.post(\"/api/admin/auth/login\", adminLogin);\n  app.post(\"/api/admin/auth/logout\", adminLogout);\n  app.get(\"/api/admin/auth/me\", requireAdminAuth, getCurrentAdmin);\n  app.post(\"/api/admin/auth/create\", createAdmin); // For initial setup\n  \n  // TestSprite compatibility routes (redirects)\n  app.post(\"/api/register\", register);\n  app.post(\"/api/login\", login);\n  app.post(\"/api/logout\", logout);\n  app.get(\"/api/user/me\", getCurrentUser);\n\n  // Protected routes - require authentication\n  app.post(\"/api/search-history\", requireAuth, addToSearchHistory);\n  app.get(\"/api/search-history\", requireAuth, getUserSearchHistory);\n  \n  // Admin routes\n  app.get(\"/api/admin/users\", requireAdminAuth, getAllUsers);\n  \n  // Favorites routes\n  app.use(\"/api/favorites\", favoritesRouter);\n  \n  // TestSprite compatibility routes\n  app.post(\"/api/user/search-history\", requireAuth, addToSearchHistory);\n  app.get(\"/api/user/search-history\", requireAuth, getUserSearchHistory);\n\n  // Legacy search history (for backward compatibility)\n  app.post(\"/api/legacy/search-history\", saveSearchHistory);\n  app.get(\"/api/legacy/search-history\", getSearchHistory);\n\n  // Public search routes (no authentication required)\n  app.post(\"/api/scrape\", (req, res) => {\n    // Redirect to the n8n webhook scraping endpoint\n    req.url = '/n8n-scrape';\n    n8nScrapeRouter(req, res, () => {});\n  });\n  app.use(\"/api\", n8nScrapeRouter); // N8N scraping routes (public)\n  \n  // TestSprite compatibility routes (public)\n  app.post(\"/api/scrape-product\", (req, res) => {\n    // Redirect to the n8n webhook scraping endpoint\n    req.url = '/n8n-scrape';\n    n8nScrapeRouter(req, res, () => {});\n  });\n  app.post(\"/api/n8n-webhook-scrape\", (req, res) => {\n    // Redirect to the n8n webhook scraping endpoint\n    req.url = '/n8n-scrape';\n    n8nScrapeRouter(req, res, () => {});\n  });\n  app.get(\"/api/location-info\", getLocationHandler);\n\n  // Health check route\n  app.get(\"/api/health\", healthCheckHandler);\n\n  // Graceful shutdown handler\n  process.on(\"SIGTERM\", async () => {\n    console.log(\"SIGTERM received, shutting down gracefully\");\n    await gracefulShutdown();\n    process.exit(0);\n  });\n\n  process.on(\"SIGINT\", async () => {\n    console.log(\"SIGINT received, shutting down gracefully\");\n    await gracefulShutdown();\n    process.exit(0);\n  });\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["router","express","SEARCH_API_SUPPORTED_COUNTRIES","productPatterns","detectedProduct","JWT_SECRET","dealers","app","favoritesRouter","n8nScrapeRouter"],"mappings":"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"}